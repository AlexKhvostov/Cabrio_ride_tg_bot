const mysql = require('mysql2/promise');
const config = require('../config/config');

class Database {
    constructor() {
        this.connection = null;
        this.isConnected = false;
        this.init();
    }

	/**
	 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	 * –°–æ–∑–¥–∞–µ—Ç –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫ "connection is in closed state"
	 */
	async init() {
		try {
			// –°–æ–∑–¥–∞–µ–º –ü–£–õ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤–º–µ—Å—Ç–æ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
			// –ü—É–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏ –∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –ø—Ä–∏ —Ä–∞–∑—Ä—ã–≤–µ
			this.connection = mysql.createPool({
				host: config.DATABASE.host,
				user: config.DATABASE.user,
				password: config.DATABASE.password,
				database: config.DATABASE.database,
				port: config.DATABASE.port,
				
				// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–ª–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏:
				waitForConnections: true,    // –ñ–¥–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –≤—Å–µ –∑–∞–Ω—è—Ç—ã
				connectionLimit: 10,         // –ú–∞–∫—Å–∏–º—É–º 10 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
				queueLimit: 0,              // –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ –æ—á–µ—Ä–µ–¥—å –∑–∞–ø—Ä–æ—Å–æ–≤
				acquireTimeout: 60000,      // –¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (60 —Å–µ–∫)
				timeout: 60000              // –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ (60 —Å–µ–∫)
			});

			console.log('‚úÖ –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ MySQL —Å–æ–∑–¥–∞–Ω');
			
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –ø—É–ª–∞
			// –≠—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ —á–µ–º ping() –Ω–∞ —Å–∞–º–æ–º –ø—É–ª–µ
			const testConnection = await this.connection.getConnection();
			await testConnection.ping();  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∂–∏–≤–æ–µ
			testConnection.release();     // –í–ê–ñ–ù–û: –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø—É–ª
			
			console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞');
			this.isConnected = true;
			
		} catch (error) {
			console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
			console.log('‚ö†Ô∏è  –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–µ–∂–∏–º–µ –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
			this.isConnected = false;
			// –ù–ï –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –ø–æ–∑–≤–æ–ª—è–µ–º –±–æ—Ç—É —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –ë–î
		}
	}

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–æ–≤
    checkConnection() {
        if (!this.isConnected) {
            console.log('‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞.');
            return false;
        }
        return true;
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
    async getMemberByTelegramId(telegramId) {
        if (!this.checkConnection()) return null;
        
        try {
            const [rows] = await this.connection.execute(
                'SELECT * FROM members WHERE telegram_id = ?',
                [telegramId]
            );
            return rows.length > 0 ? rows[0] : null;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
            
            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
            if (error.code === 'ECONNRESET' || error.code === 'PROTOCOL_CONNECTION_LOST') {
                console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
                try {
                    await this.init();
                    if (this.isConnected) {
                        console.log('‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
                        
                        // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
                        const [rows] = await this.connection.execute(
                            'SELECT * FROM members WHERE telegram_id = ?',
                            [telegramId]
                        );
                        return rows.length > 0 ? rows[0] : null;
                    }
                } catch (reconnectError) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', reconnectError);
                    return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤–º–µ—Å—Ç–æ –≤—ã–±—Ä–æ—Å–∞ –æ—à–∏–±–∫–∏
                }
            }
            
            // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
            return null;
        }
    }

    async getMemberById(memberId) {
        if (!this.checkConnection()) return null;
        
        try {
            const [rows] = await this.connection.execute(
                'SELECT * FROM members WHERE id = ?',
                [memberId]
            );
            return rows.length > 0 ? rows[0] : null;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ ID:', error);
            return null;
        }
    }

    async createMember(memberData) {
        if (!this.checkConnection()) {
            console.log('‚ö†Ô∏è  –°–æ–∑–¥–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–æ - –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
            return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
        }
        
        try {
            console.log('üîç –û—Ç–ª–∞–¥–∫–∞ createMember:');
            console.log('memberData:', JSON.stringify(memberData, null, 2));
            
            const {
                telegram_id, first_name, last_name, birth_date, nickname, alias,
                phone, email, country, city, photo_url, 
                join_date, status, about
            } = memberData;

            const [result] = await this.connection.execute(
                `INSERT INTO members (
                    telegram_id, first_name, last_name, birth_date, nickname, alias,
                    phone, email, country, city, photo_url,
                    join_date, status, about
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
                [
                    telegram_id, 
                    first_name, 
                    last_name || null,
                    birth_date || null,
                    nickname || null, 
                    alias || null,
                    phone || null, 
                    email || null, 
                    country || null, 
                    city || null, 
                    photo_url || null,
                    join_date, 
                    status || '–Ω–æ–≤—ã–π', 
                    about || null
                ]
            );

            return { id: result.insertId, ...memberData };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
            return null;
        }
    }

    async updateMember(telegramId, updates) {
        if (!this.checkConnection()) return { affectedRows: 0 };
        
        try {
            const fields = Object.keys(updates);
            const values = Object.values(updates);
            const setClause = fields.map(field => `${field} = ?`).join(', ');

            const [result] = await this.connection.execute(
                `UPDATE members SET ${setClause} WHERE telegram_id = ?`,
                [...values, telegramId]
            );

            return { affectedRows: result.affectedRows };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
            return { affectedRows: 0 };
        }
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏
    async getCarsByMemberId(memberId) {
        if (!this.checkConnection()) return [];
        
        try {
            const [rows] = await this.connection.execute(
                'SELECT * FROM cars WHERE member_id = ? ORDER BY created_at DESC',
                [memberId]
            );
            return rows;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:', error);
            return [];
        }
    }

    async createCar(carData) {
        if (!this.checkConnection()) {
            console.log('‚ö†Ô∏è  –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø—Ä–æ–ø—É—â–µ–Ω–æ - –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
            return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
        }
        
        try {
            const {
                member_id, brand, model, generation, year, color,
                vin, reg_number, engine_volume, engine_power,
                roof_type, status, description, photos
            } = carData;

            const [result] = await this.connection.execute(
                `INSERT INTO cars (
                    member_id, brand, model, generation, year, color,
                    vin, reg_number, engine_volume, engine_power,
                    roof_type, status, description, photos
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
                [
                    member_id, 
                    brand, 
                    model, 
                    generation || null, 
                    year, 
                    color || null,
                    vin || null, 
                    reg_number || null, 
                    engine_volume || null, 
                    engine_power || null,
                    roof_type || null, 
                    status || '–∞–∫—Ç–∏–≤–Ω—ã–π', 
                    description || null, 
                    photos || null
                ]
            );

            return { id: result.insertId, ...carData };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', error);
            return null;
        }
    }

    async updateCar(carId, updates) {
        if (!this.checkConnection()) return { affectedRows: 0 };
        
        try {
            const fields = Object.keys(updates);
            const values = Object.values(updates);
            const setClause = fields.map(field => `${field} = ?`).join(', ');

            const [result] = await this.connection.execute(
                `UPDATE cars SET ${setClause} WHERE id = ?`,
                [...values, carId]
            );

            return { affectedRows: result.affectedRows };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', error);
            return { affectedRows: 0 };
        }
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º–∏
    async createInvitation(invitationData) {
        if (!this.checkConnection()) {
            console.log('‚ö†Ô∏è  –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–æ - –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
            return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
        }
        
        try {
            const {
                car_id, invitation_date, location, inviter_member_id,
                status, contact_phone, contact_name, notes
            } = invitationData;

            const [result] = await this.connection.execute(
                `INSERT INTO invitations (
                    car_id, invitation_date, location, inviter_member_id,
                    status, contact_phone, contact_name, notes
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,
                [
                    car_id, invitation_date, location, inviter_member_id,
                    status || '–Ω–æ–≤–æ–µ', contact_phone, contact_name, notes
                ]
            );

            return { id: result.insertId, ...invitationData };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', error);
            return null;
        }
    }

    async getInvitationsByInviter(inviterMemberId) {
        if (!this.checkConnection()) return [];
        
        try {
            const [rows] = await this.connection.execute(
                `SELECT i.*, c.brand, c.model, c.year, c.reg_number
                 FROM invitations i 
                 JOIN cars c ON i.car_id = c.id 
                 WHERE i.inviter_member_id = ?
                 ORDER BY i.invitation_date DESC`,
                [inviterMemberId]
            );
            return rows;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π:', error);
            return [];
        }
    }

    async getInvitationsByCar(carId) {
        if (!this.checkConnection()) return [];
        
        try {
            const [rows] = await this.connection.execute(
                `SELECT i.*, m.first_name, m.last_name, m.nickname
                 FROM invitations i
                 LEFT JOIN members m ON i.inviter_member_id = m.id
                 WHERE i.car_id = ?
                 ORDER BY i.invitation_date DESC`,
                [carId]
            );
            return rows;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—é:', error);
            return [];
        }
    }

    async getInvitationsByCarNumber(regNumber) {
        if (!this.checkConnection()) return [];
        
        try {
            const [rows] = await this.connection.execute(
                `SELECT i.*, m.first_name, m.last_name, m.nickname, c.reg_number, c.brand, c.model
                 FROM invitations i
                 LEFT JOIN members m ON i.inviter_member_id = m.id
                 INNER JOIN cars c ON i.car_id = c.id
                 WHERE c.reg_number = ?
                 ORDER BY i.invitation_date DESC`,
                [regNumber]
            );
            return rows;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –ø–æ –Ω–æ–º–µ—Ä—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', error);
            return [];
        }
    }

    async updateInvitation(invitationId, updates) {
        if (!this.checkConnection()) return { affectedRows: 0 };
        
        try {
            const fields = Object.keys(updates);
            const values = Object.values(updates);
            const setClause = fields.map(field => `${field} = ?`).join(', ');

            const [result] = await this.connection.execute(
                `UPDATE invitations SET ${setClause} WHERE id = ?`,
                [...values, invitationId]
            );

            return { affectedRows: result.affectedRows };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', error);
            return { affectedRows: 0 };
        }
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    async getStats() {
        const defaultStats = {
            totalMembers: 0,
            activeMembers: 0,
            totalCars: 0,
            totalInvitations: 0,
            successfulInvitations: 0,
            leftMembers: 0,
            leftCars: 0
        };

        if (!this.checkConnection()) {
            return defaultStats;
        }
        
        try {
            const queries = [
                'SELECT COUNT(*) as count FROM members WHERE status != "–≤—ã—à–µ–ª"', // –ò—Å–∫–ª—é—á–∞–µ–º –≤—ã—à–µ–¥—à–∏—Ö
                'SELECT COUNT(*) as count FROM members WHERE status = "–∞–∫—Ç–∏–≤–Ω—ã–π"',
                'SELECT COUNT(*) as count FROM cars WHERE status != "–≤—ã—à–µ–ª" AND member_id IS NOT NULL', // –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ —Å –≤–ª–∞–¥–µ–ª—å—Ü–∞–º–∏
                'SELECT COUNT(*) as count FROM invitations',
                'SELECT COUNT(*) as count FROM invitations WHERE status = "–≤—Å—Ç—É–ø–∏–ª –≤ –∫–ª—É–±"',
                'SELECT COUNT(*) as count FROM members WHERE status = "–≤—ã—à–µ–ª"', // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—à–µ–¥—à–∏—Ö
                'SELECT COUNT(*) as count FROM cars WHERE status = "–≤—ã—à–µ–ª" AND member_id IS NOT NULL' // –ê–≤—Ç–æ –≤—ã—à–µ–¥—à–∏—Ö —Å –≤–ª–∞–¥–µ–ª—å—Ü–∞–º–∏
            ];

            const results = await Promise.all(
                queries.map(query => this.connection.execute(query))
            );

            return {
                totalMembers: results[0][0][0].count, // –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏
                activeMembers: results[1][0][0].count,
                totalCars: results[2][0][0].count, // –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ —Å –≤–ª–∞–¥–µ–ª—å—Ü–∞–º–∏ (–∏—Å–∫–ª—é—á–∞—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è)
                totalInvitations: results[3][0][0].count,
                successfulInvitations: results[4][0][0].count,
                leftMembers: results[5][0][0].count, // –í—ã—à–µ–¥—à–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏
                leftCars: results[6][0][0].count // –ê–≤—Ç–æ –≤—ã—à–µ–¥—à–∏—Ö —Å –≤–ª–∞–¥–µ–ª—å—Ü–∞–º–∏
            };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            
            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
            if (error.code === 'ECONNRESET' || error.code === 'PROTOCOL_CONNECTION_LOST' || error.code === 'ENOTFOUND') {
                console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
                try {
                    await this.init();
                    if (this.isConnected) {
                        console.log('‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
                        return await this.getStats(); // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                    }
                } catch (reconnectError) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', reconnectError);
                }
            }
            
            return defaultStats;
        }
    }

    // –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
    async getCarsByRegNumber(regNumber) {
        if (!this.checkConnection()) return [];
        
        try {
            const [rows] = await this.connection.execute(
                'SELECT * FROM cars WHERE reg_number = ? ORDER BY created_at DESC',
                [regNumber]
            );
            return rows;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ –Ω–æ–º–µ—Ä—É:', error);
            return [];
        }
    }

    // –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –Ω–æ–º–µ—Ä–∞
    async searchCarsByRegNumber(partialRegNumber) {
        if (!this.checkConnection()) return [];
        
        try {
            const searchPattern = `%${partialRegNumber.toUpperCase()}%`;
            const [rows] = await this.connection.execute(
                'SELECT * FROM cars WHERE reg_number LIKE ? AND status IN ("–∞–∫—Ç–∏–≤–Ω—ã–π", "–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ", "–Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏") ORDER BY created_at DESC',
                [searchPattern]
            );
            return rows;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É –Ω–æ–º–µ—Ä—É:', error);
            return [];
        }
    }

    // –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –±–µ–∑ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
    async getCarsWithoutOwner() {
        if (!this.checkConnection()) return [];
        
        try {
            const [rows] = await this.connection.execute(
                'SELECT * FROM cars WHERE member_id IS NULL AND status = "–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ" ORDER BY created_at DESC'
            );
            return rows;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –±–µ–∑ –≤–ª–∞–¥–µ–ª—å—Ü–∞:', error);
            return [];
        }
    }

	/**
	 * –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
	 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	 */
	async close() {
		if (this.connection && this.isConnected) {
			try {
				// –ó–∞–∫—Ä—ã–≤–∞–µ–º –í–°–ï —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ –ø—É–ª–µ
				// end() –∂–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
				await this.connection.end();
				console.log('‚úÖ –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∑–∞–∫—Ä—ã—Ç');
				this.isConnected = false;  // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è
			} catch (error) {
				console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—É–ª–∞:', error.message);
			}
		}
	}

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è API
    async getAllMembers() {
        console.log('üîç getAllMembers: isConnected =', this.isConnected);
        
        if (!this.checkConnection()) {
            console.log('‚ö†Ô∏è getAllMembers: checkConnection –≤–µ—Ä–Ω—É–ª false');
            return [];
        }
        
        try {
            console.log('üîç getAllMembers: –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ë–î');
            const [rows] = await this.connection.execute(`
                SELECT m.*, 
                       c.id as car_id, c.brand, c.model, c.reg_number, c.photos as car_photos
                FROM members m 
                LEFT JOIN cars c ON m.id = c.member_id 
                ORDER BY m.join_date DESC, c.created_at DESC
            `);
            console.log('‚úÖ getAllMembers: –ø–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:', rows.length);
            
            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
            const membersMap = new Map();
            
            rows.forEach(row => {
                const memberId = row.id;
                
                if (!membersMap.has(memberId)) {
                    membersMap.set(memberId, {
                        id: row.id,
                        telegram_id: row.telegram_id,
                        first_name: row.first_name,
                        last_name: row.last_name,
                        nickname: row.nickname,
                        city: row.city,
                        photo_url: row.photo_url,
                        status: row.status,
                        join_date: row.join_date,
                        left_date: row.left_date,
                        cars: []
                    });
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                if (row.car_id) {
                    membersMap.get(memberId).cars.push({
                        id: row.car_id,
                        brand: row.brand,
                        model: row.model,
                        reg_number: row.reg_number,
                        photos: row.car_photos
                    });
                }
            });
            
            return Array.from(membersMap.values());
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', error);
            
            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
            if (error.code === 'ECONNRESET' || error.code === 'PROTOCOL_CONNECTION_LOST' || error.code === 'ENOTFOUND') {
                console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
                try {
                    await this.init();
                    if (this.isConnected) {
                        console.log('‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');
                        const [rows] = await this.connection.execute(`
                            SELECT m.*, 
                                   c.id as car_id, c.brand, c.model, c.reg_number, c.photos as car_photos
                            FROM members m 
                            LEFT JOIN cars c ON m.id = c.member_id 
                            ORDER BY m.join_date DESC, c.created_at DESC
                        `);
                        
                        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
                        const membersMap = new Map();
                        
                        rows.forEach(row => {
                            const memberId = row.id;
                            
                            if (!membersMap.has(memberId)) {
                                membersMap.set(memberId, {
                                    id: row.id,
                                    telegram_id: row.telegram_id,
                                    first_name: row.first_name,
                                    last_name: row.last_name,
                                    nickname: row.nickname,
                                    city: row.city,
                                    photo_url: row.photo_url,
                                    status: row.status,
                                    join_date: row.join_date,
                                    left_date: row.left_date,
                                    cars: []
                                });
                            }
                            
                            // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                            if (row.car_id) {
                                membersMap.get(memberId).cars.push({
                                    id: row.car_id,
                                    brand: row.brand,
                                    model: row.model,
                                    reg_number: row.reg_number,
                                    photos: row.car_photos
                                });
                            }
                        });
                        
                        return Array.from(membersMap.values());
                    }
                } catch (reconnectError) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', reconnectError);
                }
            }
            
            return [];
        }
    }

    async getAllCars() {
        if (!this.checkConnection()) return [];
        
        try {
            const [rows] = await this.connection.execute(`
                SELECT c.*, m.first_name, m.last_name, m.nickname, m.photo_url 
                FROM cars c 
                LEFT JOIN members m ON c.member_id = m.id 
                ORDER BY c.created_at DESC
            `);
            return rows;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:', error);
            
            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
            if (error.code === 'ECONNRESET' || error.code === 'PROTOCOL_CONNECTION_LOST' || error.code === 'ENOTFOUND') {
                console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
                try {
                    await this.init();
                    if (this.isConnected) {
                        console.log('‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π');
                        const [rows] = await this.connection.execute(`
                            SELECT c.*, m.first_name, m.last_name, m.nickname, m.photo_url 
                            FROM cars c 
                            LEFT JOIN members m ON c.member_id = m.id 
                            ORDER BY c.created_at DESC
                        `);
                        return rows;
                    }
                } catch (reconnectError) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', reconnectError);
                }
            }
            
            return [];
        }
    }

    async getAllInvitations() {
        if (!this.checkConnection()) return [];
        
        try {
            const [rows] = await this.connection.execute(`
                SELECT i.*, c.brand, c.model, c.reg_number, m.first_name, m.last_name 
                FROM invitations i 
                LEFT JOIN cars c ON i.car_id = c.id 
                LEFT JOIN members m ON i.inviter_member_id = m.id 
                ORDER BY i.invitation_date DESC
            `);
            return rows;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π:', error);
            
            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
            if (error.code === 'ECONNRESET' || error.code === 'PROTOCOL_CONNECTION_LOST' || error.code === 'ENOTFOUND') {
                console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
                try {
                    await this.init();
                    if (this.isConnected) {
                        console.log('‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π');
                        const [rows] = await this.connection.execute(`
                            SELECT i.*, c.brand, c.model, c.reg_number, m.first_name, m.last_name 
                            FROM invitations i 
                            LEFT JOIN cars c ON i.car_id = c.id 
                            LEFT JOIN members m ON i.inviter_member_id = m.id 
                            ORDER BY i.invitation_date DESC
                        `);
                        return rows;
                    }
                } catch (reconnectError) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', reconnectError);
                }
            }
            
            return [];
        }
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–≥–∞–º–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    async logAuthAttempt(authData) {
        if (!this.checkConnection()) {
            console.log('‚ö†Ô∏è –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–ø—É—â–µ–Ω–æ - –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
            return null;
        }
        
        try {
            const {
                telegram_id, username, first_name, last_name,
                is_member, member_id, ip_address, user_agent,
                auth_hash, status, notes
            } = authData;

            const [result] = await this.connection.execute(
                `INSERT INTO auth_log (
                    telegram_id, username, first_name, last_name,
                    is_member, member_id, ip_address, user_agent,
                    auth_hash, status, notes
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
                [
                    telegram_id,
                    username || null,
                    first_name || null,
                    last_name || null,
                    is_member || false,
                    member_id || null,
                    ip_address || null,
                    user_agent || null,
                    auth_hash || null,
                    status || 'success',
                    notes || null
                ]
            );

            console.log(`üìù –ó–∞–ø–∏—Å–∞–Ω –ª–æ–≥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${telegram_id} (${first_name}) - ${status}`);
            return { id: result.insertId, ...authData };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
            return null;
        }
    }

    async getAuthLogs(limit = 100, offset = 0) {
        if (!this.checkConnection()) return [];
        
        try {
            const [rows] = await this.connection.execute(`
                SELECT a.*, m.first_name as member_first_name, m.last_name as member_last_name
                FROM auth_log a
                LEFT JOIN members m ON a.member_id = m.id
                ORDER BY a.auth_date DESC
                LIMIT ? OFFSET ?
            `, [limit, offset]);
            return rows;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
            return [];
        }
    }

    async getAuthLogsByTelegramId(telegramId, limit = 50) {
        if (!this.checkConnection()) return [];
        
        try {
            const [rows] = await this.connection.execute(`
                SELECT a.*, m.first_name as member_first_name, m.last_name as member_last_name
                FROM auth_log a
                LEFT JOIN members m ON a.member_id = m.id
                WHERE a.telegram_id = ?
                ORDER BY a.auth_date DESC
                LIMIT ?
            `, [telegramId, limit]);
            return rows;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ Telegram ID:', error);
            return [];
        }
    }

    async getAuthStats() {
        if (!this.checkConnection()) return {
            totalAttempts: 0,
            successfulAttempts: 0,
            failedAttempts: 0,
            memberAttempts: 0,
            nonMemberAttempts: 0,
            uniqueUsers: 0
        };
        
        try {
            const queries = [
                'SELECT COUNT(*) as count FROM auth_log',
                'SELECT COUNT(*) as count FROM auth_log WHERE status = "success"',
                'SELECT COUNT(*) as count FROM auth_log WHERE status IN ("failed", "denied")',
                'SELECT COUNT(*) as count FROM auth_log WHERE is_member = true',
                'SELECT COUNT(*) as count FROM auth_log WHERE is_member = false',
                'SELECT COUNT(DISTINCT telegram_id) as count FROM auth_log'
            ];

            const results = await Promise.all(
                queries.map(query => this.connection.execute(query))
            );

            return {
                totalAttempts: results[0][0][0].count,
                successfulAttempts: results[1][0][0].count,
                failedAttempts: results[2][0][0].count,
                memberAttempts: results[3][0][0].count,
                nonMemberAttempts: results[4][0][0].count,
                uniqueUsers: results[5][0][0].count
            };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
            return {
                totalAttempts: 0,
                successfulAttempts: 0,
                failedAttempts: 0,
                memberAttempts: 0,
                nonMemberAttempts: 0,
                uniqueUsers: 0
            };
        }
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥—Å—á–µ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π —É–¥–∞–ª–µ–Ω—ã - —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ "—É—á–∞—Å—Ç–Ω–∏–∫" –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    async checkAndUpdateCandidateStatus(telegramId) {
        if (!this.checkConnection()) return { success: false };
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            const [memberRows] = await this.connection.execute(
                'SELECT * FROM members WHERE telegram_id = ?',
                [telegramId]
            );
            
            if (memberRows.length === 0) {
                return { success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' };
            }
            
            const member = memberRows[0];
            
            // –ò–ï–†–ê–†–•–ò–Ø –°–¢–ê–¢–£–°–û–í - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–µ–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ "—Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö":
            // üÜï –Ω–æ–≤—ã–π ‚Üí ‚ö™ –±–µ–∑ –∞–≤—Ç–æ ‚Üí ‚ö™ —É—á–∞—Å—Ç–Ω–∏–∫
            // ‚úÖ –∞–∫—Ç–∏–≤–Ω—ã–π –∏ üö´ –±–∞–Ω –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã
            // üö´ –≤—ã—à–µ–ª - –æ—Å–æ–±—ã–π —Å–ª—É—á–∞–π (–ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º)
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:
            // 1. –°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "–Ω–æ–≤—ã–π" –∏–ª–∏ "–±–µ–∑ –∞–≤—Ç–æ" (–º–æ–∂–Ω–æ –ø–æ–≤—ã—à–∞—Ç—å)
            // 2. –ï—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å
            const canAutoUpgrade = ['–Ω–æ–≤—ã–π', '–±–µ–∑ –∞–≤—Ç–æ'].includes(member.status);
            
            if (!canAutoUpgrade) {
                console.log(`‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å "${member.status}" –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ "—É—á–∞—Å—Ç–Ω–∏–∫" –¥–ª—è ${member.first_name} (${telegramId})`);
                return { success: true, statusChanged: false };
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
            const [carRows] = await this.connection.execute(
                'SELECT COUNT(*) as car_count FROM cars WHERE member_id = ? AND status != "–≤—ã—à–µ–ª"',
                [member.id]
            );
            
            const carCount = carRows[0].car_count;
            
            if (carCount === 0) {
                return { success: true, statusChanged: false };
            }
            
            // –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "—É—á–∞—Å—Ç–Ω–∏–∫"
            const [updateResult] = await this.connection.execute(
                'UPDATE members SET status = ? WHERE telegram_id = ?',
                ['—É—á–∞—Å—Ç–Ω–∏–∫', telegramId]
            );
            
            if (updateResult.affectedRows > 0) {
                console.log(`üöó –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞: ${member.first_name} (${telegramId}) ${member.status} ‚Üí —É—á–∞—Å—Ç–Ω–∏–∫`);
                
                return {
                    success: true,
                    statusChanged: true,
                    member: {
                        ...member,
                        car_count: carCount,
                        old_status: member.status,
                        new_status: '—É—á–∞—Å—Ç–Ω–∏–∫'
                    }
                };
            }
            
            return { success: false, message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å' };
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
            return { success: false, message: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' };
        }
    }

    // –ê–ö–¢–ò–í–ù–´–ô —Å—Ç–∞—Ç—É—Å –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –≤—Ä—É—á–Ω—É—é
    async checkAndUpdateActiveStatus(telegramId) {
        if (!this.checkConnection()) return null;
        
        try {
            // –í –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ —Å—Ç–∞—Ç—É—Å "–∞–∫—Ç–∏–≤–Ω—ã–π" –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º–∏
            // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–∞—Ü–∏—é
            console.log(`‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å "–∞–∫—Ç–∏–≤–Ω—ã–π" –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}`);
            return { success: true, statusChanged: false };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error);
            return null;
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –Ω–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–∞–º
    async getExtendedStats() {
        if (!this.checkConnection()) return null;
        
        try {
            const stats = {};
            
            // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            const [statusRows] = await this.connection.execute(`
                SELECT status, COUNT(*) as count 
                FROM members 
                WHERE status NOT IN ('–≤—ã—à–µ–ª', '–±–∞–Ω')
                GROUP BY status
            `);
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã –Ω—É–ª—è–º–∏
            stats.–Ω–æ–≤—ã–π = 0;
            stats.–±–µ–∑_–∞–≤—Ç–æ = 0;
            stats.—É—á–∞—Å—Ç–Ω–∏–∫ = 0;
            stats.–∞–∫—Ç–∏–≤–Ω—ã–π = 0;
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            statusRows.forEach(row => {
                const status = row.status.replace(' ', '_'); // "–±–µ–∑ –∞–≤—Ç–æ" -> "–±–µ–∑_–∞–≤—Ç–æ"
                if (stats.hasOwnProperty(status)) {
                    stats[status] = row.count;
                }
            });
            
            // –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º
            const [restrictedRows] = await this.connection.execute(`
                SELECT status, COUNT(*) as count 
                FROM members 
                WHERE status IN ('–≤—ã—à–µ–ª', '–±–∞–Ω')
                GROUP BY status
            `);
            
            stats.–≤—ã—à–µ–ª = 0;
            stats.–±–∞–Ω = 0;
            
            restrictedRows.forEach(row => {
                stats[row.status] = row.count;
            });
            
            // –û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            stats.totalActiveMembers = stats.–Ω–æ–≤—ã–π + stats.–±–µ–∑_–∞–≤—Ç–æ + stats.—É—á–∞—Å—Ç–Ω–∏–∫ + stats.–∞–∫—Ç–∏–≤–Ω—ã–π;
            stats.totalRestrictedMembers = stats.–≤—ã—à–µ–ª + stats.–±–∞–Ω;
            stats.totalMembers = stats.totalActiveMembers + stats.totalRestrictedMembers;
            
            // –ê–≤—Ç–æ–º–æ–±–∏–ª–∏ (—Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)
            const [carsRows] = await this.connection.execute(`
                SELECT COUNT(*) as count 
                FROM cars c 
                INNER JOIN members m ON c.member_id = m.id 
                WHERE m.status NOT IN ('–≤—ã—à–µ–ª', '–±–∞–Ω') AND c.status != '–≤—ã—à–µ–ª'
            `);
            stats.totalCars = carsRows[0].count;
            
            // –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
            const [invitationsRows] = await this.connection.execute(`
                SELECT COUNT(*) as count FROM invitations
            `);
            stats.totalInvitations = invitationsRows[0].count;
            
            return stats;
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            return null;
        }
    }



    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram username
    async getMemberByUsername(username) {
        if (!this.checkConnection()) return null;
        
        try {
            // –£–±–∏—Ä–∞–µ–º @ –∏–∑ –Ω–∞—á–∞–ª–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            const cleanUsername = username.replace(/^@/, '');
            
            const [rows] = await this.connection.execute(
                'SELECT * FROM members WHERE nickname = ? AND status NOT IN ("–≤—ã—à–µ–ª", "–±–∞–Ω")',
                [cleanUsername]
            );
            
            return rows.length > 0 ? rows[0] : null;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username:', error);
            return null;
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async updateCarStatusesByMemberStatus(memberId, memberStatus) {
        if (!this.checkConnection()) return { success: false, message: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞' };
        
        try {
            let newCarStatus = null;
            let whereClause = 'WHERE member_id = ?';
            let params = [memberId];
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (memberStatus === '–∞–∫—Ç–∏–≤–Ω—ã–π') {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–ª –∞–∫—Ç–∏–≤–Ω—ã–º ‚Üí –≤—Å–µ –µ–≥–æ –∞–≤—Ç–æ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏
                newCarStatus = '–∞–∫—Ç–∏–≤–Ω—ã–π';
                whereClause += ' AND status IN ("–Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏", "–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π")'; // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å
            } else if (memberStatus === '–≤—ã—à–µ–ª') {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª ‚Üí –≤—Å–µ –µ–≥–æ –∞–≤—Ç–æ –≤ —Å—Ç–∞—Ç—É—Å "–≤—ã—à–µ–ª"
                newCarStatus = '–≤—ã—à–µ–ª';
                whereClause += ' AND status != "–≤—ã—à–µ–ª"'; // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —É–∂–µ –≤—ã—à–µ–¥—à–∏—Ö
            } else if (memberStatus === '—É—á–∞—Å—Ç–Ω–∏–∫' || memberStatus === '–±–µ–∑ –∞–≤—Ç–æ') {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª—Å—è ‚Üí –≤—Å–µ –µ–≥–æ –∞–≤—Ç–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
                newCarStatus = '–Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏';
                whereClause += ' AND status = "–≤—ã—à–µ–ª"'; // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤—ã—à–µ–¥—à–∏–µ –∞–≤—Ç–æ
            }
            
            if (!newCarStatus) {
                return { success: true, updatedCars: 0 }; // –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
            }
            
            const [result] = await this.connection.execute(
                `UPDATE cars SET status = ? ${whereClause}`,
                [newCarStatus, ...params]
            );
            
            console.log(`üöó –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç—É—Å–æ–≤ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: ${result.affectedRows} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${memberId}, —Å—Ç–∞—Ç—É—Å: ${memberStatus} ‚Üí –∞–≤—Ç–æ: ${newCarStatus})`);
            
            return {
                success: true,
                updatedCars: result.affectedRows,
                newCarStatus: newCarStatus
            };
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:', error);
            return { success: false, message: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' };
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
    async updateMemberStatus(telegramId, newStatus, adminId = null) {
        if (!this.checkConnection()) return { success: false, message: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞' };
        
        try {
            // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            const member = await this.getMemberByTelegramId(telegramId);
            if (!member) {
                return { success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' };
            }

            const oldStatus = member.status;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è
            if (oldStatus === newStatus) {
                return { 
                    success: false, 
                    message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å "${newStatus}"` 
                };
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            const [result] = await this.connection.execute(
                'UPDATE members SET status = ? WHERE telegram_id = ?',
                [newStatus, telegramId]
            );

            if (result.affectedRows > 0) {
                console.log(`üîÑ –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${member.first_name} (${telegramId}) –∏–∑–º–µ–Ω–µ–Ω: ${oldStatus} ‚Üí ${newStatus} (–∞–¥–º–∏–Ω: ${adminId})`);
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
                const carUpdateResult = await this.updateCarStatusesByMemberStatus(member.id, newStatus);
                
                return {
                    success: true,
                    member: {
                        id: member.id,
                        telegram_id: telegramId,
                        first_name: member.first_name,
                        last_name: member.last_name,
                        nickname: member.nickname,
                        old_status: oldStatus,
                        new_status: newStatus
                    },
                    carUpdate: carUpdateResult
                };
            } else {
                return { success: false, message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å' };
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            return { success: false, message: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' };
        }
    }
    // =====================================================
    // üéâ –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–±—ã—Ç–∏—è–º–∏ (events)
    // =====================================================

    async getAllEvents() {
        if (!this.checkConnection()) return [];
        
        try {
            const [rows] = await this.connection.execute(`
                SELECT e.*, m.first_name, m.last_name, m.nickname
                FROM events e
                LEFT JOIN members m ON e.organizer_id = m.id
                ORDER BY e.event_date DESC, e.event_time DESC
            `);
            return rows;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π:', error);
            return [];
        }
    }

    async getEventById(eventId) {
        if (!this.checkConnection()) return null;
        
        try {
            const [rows] = await this.connection.execute(`
                SELECT e.*, m.first_name, m.last_name, m.nickname
                FROM events e
                LEFT JOIN members m ON e.organizer_id = m.id
                WHERE e.id = ?
            `, [eventId]);
            return rows.length > 0 ? rows[0] : null;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –ø–æ ID:', error);
            return null;
        }
    }

    async getEventsByOrganizer(organizerId) {
        if (!this.checkConnection()) return [];
        
        try {
            const [rows] = await this.connection.execute(`
                SELECT e.*, m.first_name, m.last_name, m.nickname
                FROM events e
                LEFT JOIN members m ON e.organizer_id = m.id
                WHERE e.organizer_id = ?
                ORDER BY e.event_date DESC
            `, [organizerId]);
            return rows;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞:', error);
            return [];
        }
    }

    async createEvent(eventData) {
        if (!this.checkConnection()) {
            console.log('‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–æ - –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
            return null;
        }
        
        try {
            const {
                title, description, event_date, event_time, location, city,
                type, status, organizer_id, max_participants, price, photos
            } = eventData;

            const [result] = await this.connection.execute(
                `INSERT INTO events (
                    title, description, event_date, event_time, location, city,
                    type, status, organizer_id, max_participants, price, photos
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
                [
                    title,
                    description || null,
                    event_date,
                    event_time || null,
                    location,
                    city,
                    type || '–≤—Å—Ç—Ä–µ—á–∞',
                    status || '–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ',
                    organizer_id,
                    max_participants || null,
                    price || 0.00,
                    photos || null
                ]
            );

            console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ: ${title} (ID: ${result.insertId})`);
            return { id: result.insertId, ...eventData };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
            return null;
        }
    }

    async updateEvent(eventId, updates) {
        if (!this.checkConnection()) return { affectedRows: 0 };
        
        try {
            const fields = Object.keys(updates);
            const values = Object.values(updates);
            const setClause = fields.map(field => `${field} = ?`).join(', ');

            const [result] = await this.connection.execute(
                `UPDATE events SET ${setClause} WHERE id = ?`,
                [...values, eventId]
            );

            console.log(`üìù –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ ID ${eventId}: ${result.affectedRows} –∑–∞–ø–∏—Å–µ–π`);
            return { affectedRows: result.affectedRows };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
            return { affectedRows: 0 };
        }
    }

    async deleteEvent(eventId) {
        if (!this.checkConnection()) return { affectedRows: 0 };
        
        try {
            const [result] = await this.connection.execute(
                'DELETE FROM events WHERE id = ?',
                [eventId]
            );

            console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ ID ${eventId}: ${result.affectedRows} –∑–∞–ø–∏—Å–µ–π`);
            return { affectedRows: result.affectedRows };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
            return { affectedRows: 0 };
        }
    }

    // =====================================================
    // üîß –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏ (services)
    // =====================================================

    async getAllServices() {
        if (!this.checkConnection()) return [];
        
        try {
            const [rows] = await this.connection.execute(`
                SELECT s.*, m.first_name, m.last_name, m.nickname
                FROM services s
                LEFT JOIN members m ON s.added_by_member_id = m.id
                ORDER BY s.recommendation DESC, s.rating DESC, s.created_at DESC
            `);
            return rows;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤:', error);
            return [];
        }
    }

    async getServiceById(serviceId) {
        if (!this.checkConnection()) return null;
        
        try {
            const [rows] = await this.connection.execute(`
                SELECT s.*, m.first_name, m.last_name, m.nickname
                FROM services s
                LEFT JOIN members m ON s.added_by_member_id = m.id
                WHERE s.id = ?
            `, [serviceId]);
            return rows.length > 0 ? rows[0] : null;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø–æ ID:', error);
            return null;
        }
    }

    async getServicesByCity(city) {
        if (!this.checkConnection()) return [];
        
        try {
            const [rows] = await this.connection.execute(`
                SELECT s.*, m.first_name, m.last_name, m.nickname
                FROM services s
                LEFT JOIN members m ON s.added_by_member_id = m.id
                WHERE s.city = ?
                ORDER BY s.recommendation DESC, s.rating DESC
            `, [city]);
            return rows;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–æ –≥–æ—Ä–æ–¥—É:', error);
            return [];
        }
    }

    async getServicesByType(type) {
        if (!this.checkConnection()) return [];
        
        try {
            const [rows] = await this.connection.execute(`
                SELECT s.*, m.first_name, m.last_name, m.nickname
                FROM services s
                LEFT JOIN members m ON s.added_by_member_id = m.id
                WHERE s.type = ?
                ORDER BY s.recommendation DESC, s.rating DESC
            `, [type]);
            return rows;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–æ —Ç–∏–ø—É:', error);
            return [];
        }
    }

    async createService(serviceData) {
        if (!this.checkConnection()) {
            console.log('‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ–ø—É—â–µ–Ω–æ - –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
            return null;
        }
        
        try {
            const {
                name, description, city, address, phone, website,
                type, recommendation, rating, reviews_count,
                services_list, price_range, working_hours,
                photos, added_by_member_id
            } = serviceData;

            const [result] = await this.connection.execute(
                `INSERT INTO services (
                    name, description, city, address, phone, website,
                    type, recommendation, rating, reviews_count,
                    services_list, price_range, working_hours,
                    photos, added_by_member_id
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
                [
                    name,
                    description || null,
                    city,
                    address || null,
                    phone || null,
                    website || null,
                    type || '–∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å',
                    recommendation || '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ',
                    rating || null,
                    reviews_count || 0,
                    services_list || null,
                    price_range || null,
                    working_hours || null,
                    photos || null,
                    added_by_member_id || null
                ]
            );

            console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Å–µ—Ä–≤–∏—Å: ${name} (ID: ${result.insertId})`);
            return { id: result.insertId, ...serviceData };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞:', error);
            return null;
        }
    }

    async updateService(serviceId, updates) {
        if (!this.checkConnection()) return { affectedRows: 0 };
        
        try {
            const fields = Object.keys(updates);
            const values = Object.values(updates);
            const setClause = fields.map(field => `${field} = ?`).join(', ');

            const [result] = await this.connection.execute(
                `UPDATE services SET ${setClause} WHERE id = ?`,
                [...values, serviceId]
            );

            console.log(`üìù –û–±–Ω–æ–≤–ª–µ–Ω —Å–µ—Ä–≤–∏—Å ID ${serviceId}: ${result.affectedRows} –∑–∞–ø–∏—Å–µ–π`);
            return { affectedRows: result.affectedRows };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞:', error);
            return { affectedRows: 0 };
        }
    }

    async deleteService(serviceId) {
        if (!this.checkConnection()) return { affectedRows: 0 };
        
        try {
            const [result] = await this.connection.execute(
                'DELETE FROM services WHERE id = ?',
                [serviceId]
            );

            console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å–µ—Ä–≤–∏—Å ID ${serviceId}: ${result.affectedRows} –∑–∞–ø–∏—Å–µ–π`);
            return { affectedRows: result.affectedRows };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞:', error);
            return { affectedRows: 0 };
        }
    }
}

module.exports = new Database(); 