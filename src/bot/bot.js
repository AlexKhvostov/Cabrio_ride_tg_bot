const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const path = require('path');
const config = require('../config/config');
const db = require('../database/database');
const { formatDate } = require('../utils/localization');
const { createAPI } = require('../api/api');
const optionsManager = require('../utils/options');
const ADMIN_IDS = process.env.ADMIN_IDS ? process.env.ADMIN_IDS.split(',').map(Number) : [];

// –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω–æ–≤
console.log('üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ADMIN_IDS:');
console.log('   process.env.ADMIN_IDS:', process.env.ADMIN_IDS);
console.log('   ADMIN_IDS –º–∞—Å—Å–∏–≤:', ADMIN_IDS);
console.log('   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–æ–≤:', ADMIN_IDS.length);

// –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new TelegramBot(config.BOT_TOKEN, { 
    polling: true,
    // –ü–æ–¥–∞–≤–ª—è–µ–º deprecation warning –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤
    filepath: false
});

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
const userStates = new Map();

// –°–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
let activePassword = null;
let passwordTimer = null;
const PASSWORD_LIFETIME = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø—É
async function sendGroupNotification(message, options = {}, notificationType = null) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if (notificationType && !optionsManager.isNotificationEnabled(notificationType)) {
        console.log(`üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ "${notificationType}" –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö`);
        return;
    }
    
    try {
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É:', config.CHAT_ID);
        console.log('üìù –°–æ–æ–±—â–µ–Ω–∏–µ:', message.substring(0, 100) + '...');
        
        await bot.sendMessage(config.CHAT_ID, message, {
            parse_mode: 'Markdown',
            ...options
        });
        
        console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É:', error);
        console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.message);
        
        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å —Ç–µ–º, —á—Ç–æ –±–æ—Ç –Ω–µ –≤ –≥—Ä—É–ø–ø–µ
        if (error.response && error.response.body && error.response.body.error_code === 403) {
            console.error('üö´ –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π');
        }
        
        throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
    }
}

async function sendGroupPhoto(photoPath, caption, options = {}, notificationType = null) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if (notificationType && !optionsManager.isNotificationEnabled(notificationType)) {
        console.log(`üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ "${notificationType}" –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö`);
        return;
    }
    
    try {
        console.log('üì∏ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ –≥—Ä—É–ø–ø—É:');
        console.log('   Photo Path:', photoPath);
        console.log('   Caption:', caption);
        console.log('   Chat ID:', config.CHAT_ID);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ photoPath —Ñ–∞–π–ª–æ–º –∏–ª–∏ URL
        let photoSource;
        if (photoPath && photoPath.startsWith('http')) {
            // –≠—Ç–æ URL
            photoSource = photoPath;
            console.log('üì° –ò—Å–ø–æ–ª—å–∑—É–µ–º URL –¥–ª—è —Ñ–æ—Ç–æ:', photoSource);
        } else {
            // –≠—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            const fullPath = path.resolve(photoPath);
            console.log('   –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É:', fullPath);
            console.log('   –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', fs.existsSync(fullPath));
            
            if (!photoPath || !fs.existsSync(fullPath)) {
                console.error('‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:', fullPath);
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ç–æ
                await sendGroupNotification(caption, options, notificationType);
                return;
            }
            
            photoSource = fs.createReadStream(fullPath);
            console.log('üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª:', fullPath);
        }
        
        console.log('   –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ...');
        await bot.sendPhoto(config.CHAT_ID, photoSource, {
            caption: caption,
            parse_mode: 'Markdown',
            contentType: 'image/jpeg',
            ...options
        });
        
        console.log('‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤ –≥—Ä—É–ø–ø—É:');
        console.error('   Photo Path:', photoPath);
        console.error('   Error Message:', error.message);
        console.error('   Full Error:', error);
        
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        try {
            await sendGroupNotification(caption, options, notificationType);
            console.log('‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ');
        } catch (fallbackError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', fallbackError);
        }
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–ª–µ–Ω—Å—Ç–≤–∞ –≤ —á–∞—Ç–µ
// –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–ª–µ–Ω—Å—Ç–≤–∞ –≤ —á–∞—Ç–µ (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
async function checkChatMembership(userId) {
    return await checkUserMembership(userId);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ
async function checkBotGroupStatus() {
    try {
        const botInfo = await bot.getMe();
        const botMember = await bot.getChatMember(config.CHAT_ID, botInfo.id);
        return {
            isInGroup: ['member', 'administrator', 'creator'].includes(botMember.status),
            status: botMember.status,
            canSendMessages: botMember.status === 'administrator' || botMember.status === 'creator' || 
                           (botMember.status === 'member' && !botMember.is_restricted)
        };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ:', error);
        return {
            isInGroup: false,
            status: 'unknown',
            canSendMessages: false
        };
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–ª–µ–Ω—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ
async function checkUserMembership(userId) {
    try {
        const member = await bot.getChatMember(config.CHAT_ID, userId);
        return ['member', 'administrator', 'creator'].includes(member.status);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–ª–µ–Ω—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ:', error.message);
        
        // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
        if (error.response && error.response.body) {
            const errorBody = error.response.body;
            
            if (errorBody.error_code === 400 && errorBody.description === 'Bad Request: chat not found') {
                console.error('üö´ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:');
                console.error(`   CHAT_ID: ${config.CHAT_ID}`);
                console.error('   –ü—Ä–∏—á–∏–Ω—ã:');
                console.error('   1. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π CHAT_ID –≤ .env —Ñ–∞–π–ª–µ');
                console.error('   2. –ì—Ä—É–ø–ø–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
                console.error('   3. –ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É');
                console.error('   4. –ì—Ä—É–ø–ø–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞');
                console.error('');
                console.error('üí° –†–µ—à–µ–Ω–∏–µ:');
                console.error('   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ CHAT_ID –≤ .env —Ñ–∞–π–ª–µ');
                console.error('   2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É');
                console.error('   3. –ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π CHAT_ID –≥—Ä—É–ø–ø—ã');
                
                // –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É
                if (ADMIN_IDS.includes(userId)) {
                    return 'config_error';
                }
                
                return false;
            } else if (errorBody.error_code === 403) {
                console.error('üîí –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –≥—Ä—É–ø–ø—ã');
                return false;
            }
        }
        
        return false;
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function checkDatabaseAccess(chatId) {
    if (!db.isConnected) {
        const errorMessage = 'üö´ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n\n' +
            '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç.\n' +
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.\n\n' +
            'üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: ' + ADMIN_IDS.map(id => `[${id}](tg://user?id=${id})`).join(', ');
        
        await bot.sendMessage(chatId, errorMessage, { parse_mode: 'Markdown' });
        return false;
    }
    return true;
}

// –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
async function ensureUserExists(msg) {
    const userId = msg.from.id;
    const firstName = msg.from.first_name;
    const lastName = msg.from.last_name;
    const username = msg.from.username;
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        const existingMember = await db.getMemberByTelegramId(userId);
        
        if (!existingMember) {
            // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Telegram
            const newMemberData = {
                telegram_id: userId,
                first_name: firstName, // –ò–º—è –∏–∑ Telegram (–º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω–æ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
                nickname: username || null,
                status: '–Ω–æ–≤—ã–π', // –°—Ç–∞—Ç—É—Å "–Ω–æ–≤—ã–π" - –æ–±—Ä–∞—Ç–∏–ª—Å—è –∫ –±–æ—Ç—É, –Ω–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
                join_date: new Date().toISOString().split('T')[0]
            };
            
            // –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –∏ last_name –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ "–Ω–æ–≤—ã–π"
            // –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            
            const createdMember = await db.createMember(newMemberData);
            if (createdMember) {
                console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${firstName} (${userId}) —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–Ω–æ–≤—ã–π"`);
                return createdMember;
            }
        }
        
        return existingMember;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        return null;
    }
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ —á–ª–µ–Ω—Å—Ç–≤–æ –≤ –≥—Ä—É–ø–ø–µ) + –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
async function checkAccess(msg) {
    const userId = msg.from.id;
    const membershipResult = await checkUserMembership(userId);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if (membershipResult === 'config_error') {
        bot.sendMessage(msg.chat.id, 
            'üö´ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò\n\n' +
            '‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (chat not found)\n\n' +
            '–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n' +
            `‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π CHAT_ID: \`${config.CHAT_ID}\`\n` +
            '‚Ä¢ –ì—Ä—É–ø–ø–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞\n' +
            '‚Ä¢ –ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É\n\n' +
            '–ß—Ç–æ –¥–µ–ª–∞—Ç—å:\n' +
            '1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å CHAT_ID –≤ .env —Ñ–∞–π–ª–µ\n' +
            '2Ô∏è‚É£ –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n' +
            '3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π CHAT_ID –≥—Ä—É–ø–ø—ã\n\n' +
            'üîß –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É',
            { parse_mode: 'Markdown' }
        );
        return false;
    }
    
    if (!membershipResult) {
        bot.sendMessage(msg.chat.id, 
            '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!\n\n' +
            '–≠—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–ª—É–±–∞ –∫–∞–±—Ä–∏–æ–ª–µ—Ç–æ–≤.\n\n' +
            'üöó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ:\n' +
            `üë• [${config.CLUB.groupLink}](${config.CLUB.groupLink})\n\n` +
            '–ü–æ—Å–ª–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ —Å—Ç–∞–Ω—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã!',
            { parse_mode: 'Markdown' }
        );
        return false;
    }
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≥—Ä—É–ø–ø–µ, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    await ensureUserExists(msg);
    
    return true;
}

// Middleware –¥–ª—è –∫–æ–º–∞–Ω–¥, —Ç—Ä–µ–±—É—é—â–∏—Ö –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É
async function checkGroupAccess(msg) {
    const userId = msg.from.id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–ª–µ–Ω—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const membershipResult = await checkUserMembership(userId);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if (membershipResult === 'config_error') {
        bot.sendMessage(msg.chat.id, 
            'üö´ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò\n\n' +
            '‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (chat not found)\n\n' +
            '–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n' +
            `‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π CHAT_ID: \`${config.CHAT_ID}\`\n` +
            '‚Ä¢ –ì—Ä—É–ø–ø–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞\n' +
            '‚Ä¢ –ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É\n\n' +
            '–ß—Ç–æ –¥–µ–ª–∞—Ç—å:\n' +
            '1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å CHAT_ID –≤ .env —Ñ–∞–π–ª–µ\n' +
            '2Ô∏è‚É£ –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n' +
            '3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π CHAT_ID –≥—Ä—É–ø–ø—ã\n\n' +
            'üîß –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É',
            { parse_mode: 'Markdown' }
        );
        return false;
    }
    
    if (!membershipResult) {
        bot.sendMessage(msg.chat.id, 
            '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!\n\n' +
            '–≠—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–ª—É–±–∞ –∫–∞–±—Ä–∏–æ–ª–µ—Ç–æ–≤.\n\n' +
            'üöó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ:\n' +
            `üë• [${config.CLUB.groupLink}](${config.CLUB.groupLink})\n\n` +
            '–ü–æ—Å–ª–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ —Å—Ç–∞–Ω—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã!',
            { parse_mode: 'Markdown' }
        );
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ
    const botStatus = await checkBotGroupStatus();
    if (!botStatus.isInGroup || !botStatus.canSendMessages) {
        bot.sendMessage(msg.chat.id, 
            '‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª\n\n' +
            '–ë–æ—Ç –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≥—Ä—É–ø–ø–µ –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π.\n' +
            '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–µ –±—É–¥—É—Ç.\n\n' +
            'üîß –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º—ã.',
            { parse_mode: 'Markdown' }
        );
        return 'limited'; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    }
    
    return true;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
function createUploadDirs() {
    const dirs = [
        config.UPLOADS.membersPath,
        config.UPLOADS.carsPath
    ];
    
    dirs.forEach(dir => {
        if (!fs.existsSync(dir)) {
            fs.mkdirSync(dir, { recursive: true });
            console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:', dir);
        }
    });
}


// —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞ 
function isAdmin(userId) {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤ –¥–ª—è ID: ${userId}`);
    console.log(`üîß –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤: [${ADMIN_IDS.join(', ')}]`);
    const isAdminUser = ADMIN_IDS.includes(userId);
    console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: ${isAdminUser}`);
    return isAdminUser;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" –∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
function addBackToMenuButton(keyboard) {
    if (!keyboard) {
        keyboard = { reply_markup: { inline_keyboard: [] } };
    }
    if (!keyboard.reply_markup) {
        keyboard.reply_markup = { inline_keyboard: [] };
    }
    if (!keyboard.reply_markup.inline_keyboard) {
        keyboard.reply_markup.inline_keyboard = [];
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä—è–¥
    keyboard.reply_markup.inline_keyboard.push([
        { text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }
    ]);
    
    return keyboard;
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–æ–ª—è–º–∏
function setActivePassword(password) {
    activePassword = password;
    console.log('üîê –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞');
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (passwordTimer) {
        clearTimeout(passwordTimer);
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –Ω–∞ 10 –º–∏–Ω—É—Ç
    passwordTimer = setTimeout(() => {
        activePassword = null;
        passwordTimer = null;
        console.log('‚è∞ –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏—Å—Ç—ë–∫ –∏ –±—ã–ª —É–¥–∞–ª—ë–Ω');
    }, PASSWORD_LIFETIME);
    
    console.log('‚è∞ –ü–∞—Ä–æ–ª—å –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω 10 –º–∏–Ω—É—Ç');
}

function clearActivePassword() {
    activePassword = null;
    if (passwordTimer) {
        clearTimeout(passwordTimer);
        passwordTimer = null;
    }
    console.log('üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –æ—á–∏—â–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');
}

function isPasswordActive() {
    return activePassword !== null;
}

function checkPassword(inputPassword) {
    return activePassword && activePassword === inputPassword;
}

function getPasswordTimeLeft() {
    if (!passwordTimer) return 0;
    // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è, —Ç–∞–∫ –∫–∞–∫ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è —Å–ª–æ–∂–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å
    return Math.ceil(PASSWORD_LIFETIME / 60000); // –≤ –º–∏–Ω—É—Ç–∞—Ö
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, async (msg) => {
    if (!await checkAccess(msg)) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ë–î
    if (!await checkDatabaseAccess(msg.chat.id)) return;
    
    const userId = msg.from.id;
    const firstName = msg.from.first_name;
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ checkAccess)
        const existingMember = await db.getMemberByTelegramId(userId);
        
        if (existingMember) {
            if (existingMember.status === '–Ω–æ–≤—ã–π') {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ø–µ—Ä–≤—ã–µ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ –±–æ—Ç—É
                bot.sendMessage(msg.chat.id, 
                    `üöó ${config.CLUB.welcomeMessage}\n\n` +
                    `–ü—Ä–∏–≤–µ—Ç, ${firstName}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª—É–± –∫–∞–±—Ä–∏–æ–ª–µ—Ç–æ–≤!\n\n` +
                    `üìä –í–∞—à —Å—Ç–∞—Ç—É—Å: ${existingMember.status}\n\n` +
                    '–î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–∏—è –≤ –∫–ª—É–±–µ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:\n' +
                    'üëá –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã.'
                );
            } else {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
                bot.sendMessage(msg.chat.id, 
                    `üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${existingMember.first_name}!\n\n` +
                    `üìä –°—Ç–∞—Ç—É—Å: ${existingMember.status}\n` +
                    `üìÖ –î–∞—Ç–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è: ${formatDate(existingMember.join_date)}\n\n` +
                    '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.'
                );
            }
        } else {
            // –†–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ª—É—á–∞–π - –µ—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ
            bot.sendMessage(msg.chat.id, 
                `üöó ${config.CLUB.welcomeMessage}\n\n` +
                `–ü—Ä–∏–≤–µ—Ç, ${firstName}! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏.\n` +
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
            );
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start:', error);
        bot.sendMessage(msg.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

const os = require('os'); // –î–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)

// –ö–æ–º–∞–Ω–¥–∞ /status - —Å–∏—Å—Ç–µ–º–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
bot.onText(/\/status/, async (msg) => {
    const userId = msg.from.id;
    
    // –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤, –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä—É–ø–ø—ã
    if (!isAdmin(userId)) {
        bot.sendMessage(msg.chat.id, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω! –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.');
        return;
    }
    
    try {
        let statusMessage = 'üîß –°–∏—Å—Ç–µ–º–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n\n';
        
        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        statusMessage += '‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:\n';
        statusMessage += `‚Ä¢ BOT_TOKEN: ${process.env.BOT_TOKEN ? '‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}\n`;
        statusMessage += `‚Ä¢ CHAT_ID: ${process.env.CHAT_ID ? `‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω (${process.env.CHAT_ID})` : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}\n`;
        statusMessage += `‚Ä¢ DB_HOST: ${process.env.DB_HOST ? '‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}\n`;
        statusMessage += `‚Ä¢ ADMIN_IDS: ${process.env.ADMIN_IDS ? `‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω (${ADMIN_IDS.length} –∞–¥–º–∏–Ω–æ–≤)` : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}\n\n`;
        
        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        statusMessage += 'üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:\n';
        statusMessage += `‚Ä¢ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: ${db.isConnected ? '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}\n`;
        statusMessage += `‚Ä¢ –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${db.connection ? '‚úÖ –°–æ–∑–¥–∞–Ω' : '‚ùå –ù–µ —Å–æ–∑–¥–∞–Ω'}\n`;
        
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
        try {
            const stats = await db.getStats();
            if (stats) {
                // –§—É–Ω–∫—Ü–∏—è getStats() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª—è–º–∏ totalMembers, totalCars –∏ —Ç.–¥.
                const totalMembers = stats.totalMembers || 0;
                const totalCars = stats.totalCars || 0;
                statusMessage += `‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≤ –ë–î: ‚úÖ ${totalMembers}\n`;
                statusMessage += `‚Ä¢ –ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –≤ –ë–î: ‚úÖ ${totalCars}\n`;
            } else {
                statusMessage += `‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î: ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n`;
            }
        } catch (dbError) {
            statusMessage += `‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î: ‚ùå –û—à–∏–±–∫–∞ (${dbError.message})\n`;
        }
        
        statusMessage += '\n';
        
        // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram API
        statusMessage += 'üì± Telegram API:\n';
        try {
            const me = await bot.getMe();
            statusMessage += `‚Ä¢ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: ‚úÖ @${me.username}\n`;
            statusMessage += `‚Ä¢ ID –±–æ—Ç–∞: ${me.id}\n`;
        } catch (telegramError) {
            statusMessage += `‚Ä¢ Telegram API: ‚ùå –û—à–∏–±–∫–∞ (${telegramError.message})\n`;
        }
        
        // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–ª–µ–Ω—Å—Ç–≤–∞ –≤ –≥—Ä—É–ø–ø–µ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ CHAT_ID
        statusMessage += `‚Ä¢ CHAT_ID –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ${config.CHAT_ID}\n`;
        try {
            const botMember = await bot.getChatMember(config.CHAT_ID, (await bot.getMe()).id);
            statusMessage += `‚Ä¢ –°—Ç–∞—Ç—É—Å –≤ –≥—Ä—É–ø–ø–µ: ${botMember.status === 'administrator' ? '‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : 
                                                botMember.status === 'member' ? '‚ö†Ô∏è –£—á–∞—Å—Ç–Ω–∏–∫ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∞–¥–º–∏–Ω)' : 
                                                '‚ùå ' + botMember.status}\n`;
        } catch (groupError) {
            statusMessage += `‚Ä¢ –°—Ç–∞—Ç—É—Å –≤ –≥—Ä—É–ø–ø–µ: ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ (${groupError.message})\n`;
            
            // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–∫–∏ CHAT_ID
            if (groupError.response && groupError.response.body) {
                const errorBody = groupError.response.body;
                if (errorBody.error_code === 400 && errorBody.description === 'Bad Request: chat not found') {
                    statusMessage += `‚Ä¢ ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ì—Ä—É–ø–ø–∞ —Å ID ${config.CHAT_ID} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!\n`;
                    statusMessage += `‚Ä¢ üí° –†–µ—à–µ–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ CHAT_ID –≤ .env —Ñ–∞–π–ª–µ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É\n`;
                }
            }
        }
        
        statusMessage += '\n';
        
        // 5. –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        statusMessage += 'üíª –°–∏—Å—Ç–µ–º–∞:\n';
        statusMessage += `‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${Math.floor(process.uptime())} —Å–µ–∫\n`;
        statusMessage += `‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${Math.round(process.memoryUsage().heapUsed / 1024 / 1024)} MB\n`;
        statusMessage += `‚Ä¢ Node.js –≤–µ—Ä—Å–∏—è: ${process.version}\n`;
        statusMessage += `‚Ä¢ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${process.platform}\n\n`;
        
        // 6. –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        statusMessage += 'üìÅ –§–∞–π–ª—ã:\n';
        const fs = require('fs');
        const membersDir = config.UPLOADS.membersPath;
        const carsDir = config.UPLOADS.carsPath;
        
        statusMessage += `‚Ä¢ –ü–∞–ø–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${fs.existsSync(membersDir) ? '‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞'}\n`;
        statusMessage += `‚Ä¢ –ü–∞–ø–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: ${fs.existsSync(carsDir) ? '‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞'}\n`;
        statusMessage += `‚Ä¢ –ü—É—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${membersDir}\n`;
        statusMessage += `‚Ä¢ –ü—É—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: ${carsDir}\n`;
        
        if (fs.existsSync(membersDir)) {
            const memberFiles = fs.readdirSync(membersDir).length;
            statusMessage += `‚Ä¢ –§–æ—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${memberFiles} —Ñ–∞–π–ª–æ–≤\n`;
        }
        
        if (fs.existsSync(carsDir)) {
            const carFiles = fs.readdirSync(carsDir).length;
            statusMessage += `‚Ä¢ –§–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: ${carFiles} —Ñ–∞–π–ª–æ–≤\n`;
        }
        
        statusMessage += '\n';
        
        // 7. –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        statusMessage += 'üë• –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:\n';
        statusMessage += `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π: ${userStates.size}\n`;
        statusMessage += `‚Ä¢ –ó–∞–ø—Ä–æ—Å –æ—Ç –∞–¥–º–∏–Ω–∞: ‚úÖ ${msg.from.first_name} (ID: ${userId})\n`;
        
        statusMessage += `\nüìÖ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ${new Date().toLocaleString('ru-RU')}`;
        
        const statusKeyboard = addBackToMenuButton({});
        bot.sendMessage(msg.chat.id, statusMessage, { 
            parse_mode: 'Markdown',
            ...statusKeyboard 
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /status:', error);
        bot.sendMessage(msg.chat.id, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã: ${error.message}`);
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /setpass - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
bot.onText(/\/setpass/, async (msg) => {
    const userId = msg.from.id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
    if (!isAdmin(userId)) {
        bot.sendMessage(msg.chat.id, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω! –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.');
        return;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
    userStates.set(userId, { 
        state: 'setting_password', 
        step: 'enter_password',
        data: {}
    });
    
    const currentStatus = isPasswordActive() ? 
        `\nüîê –¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –∞–∫—Ç–∏–≤–µ–Ω (‚âà${getPasswordTimeLeft()} –º–∏–Ω. –æ—Å—Ç–∞–ª–æ—Å—å)` : 
        '\n‚ö™ –ü–∞—Ä–æ–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
    
    bot.sendMessage(msg.chat.id, 
        'üîê –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è\n\n' +
        'üìã –≠—Ç–æ—Ç –ø–∞—Ä–æ–ª—å –ø–æ–∑–≤–æ–ª–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å "–∞–∫—Ç–∏–≤–Ω—ã–π" —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.\n\n' +
        '‚ö° –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞—Ä–æ–ª—é:\n' +
        '‚Ä¢ –ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤\n' +
        '‚Ä¢ –í—Ä–µ–º—è –∂–∏–∑–Ω–∏: 10 –º–∏–Ω—É—Ç\n' +
        '‚Ä¢ –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "—É—á–∞—Å—Ç–Ω–∏–∫" –∏–ª–∏ "–±–µ–∑ –∞–≤—Ç–æ"\n\n' +
        currentStatus + '\n\n' +
        '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:',
        { parse_mode: 'Markdown' }
    );
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
bot.onText(/\/admintest/, async (msg) => {
    // –î–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–ø–ø—ã
    
    const userId = msg.from.id;
    
    if (!isAdmin(userId)) {
        bot.sendMessage(msg.chat.id, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω! –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.');
        return;
    }
    
    const adminTestKeyboard = addBackToMenuButton({});
    bot.sendMessage(msg.chat.id, 
        `‚úÖ –ê–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã!\n\n` +
        `üë§ –í–∞—à ID: ${userId}\n` +
        `üîß –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤: ${ADMIN_IDS.join(', ')}\n` +
        `üìä –°—Ç–∞—Ç—É—Å: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä`,
        { 
            parse_mode: 'Markdown',
            ...adminTestKeyboard 
        }
    );
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
bot.onText(/\/authlogs/, async (msg) => {
    const userId = msg.from.id;
    
    if (!isAdmin(userId)) {
        bot.sendMessage(msg.chat.id, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω! –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.');
        return;
    }
    
    try {
        const authStats = await db.getAuthStats();
        
        let logText = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ\n\n`;
        logText += `üìà –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: ${authStats.totalAttempts}\n`;
        logText += `‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: ${authStats.successfulAttempts}\n`;
        logText += `‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${authStats.failedAttempts}\n`;
        logText += `üë• –û—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${authStats.memberAttempts}\n`;
        logText += `üë§ –û—Ç –Ω–µ-—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${authStats.nonMemberAttempts}\n`;
        logText += `üî¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${authStats.uniqueUsers}\n\n`;
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ª–æ–≥–æ–≤
        const recentLogs = await db.getAuthLogs(10);
        
        if (recentLogs.length > 0) {
            logText += `üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏:\n\n`;
            
            recentLogs.forEach((log, index) => {
                const date = new Date(log.auth_date).toLocaleString('ru-RU');
                const statusIcon = log.status === 'success' ? '‚úÖ' : '‚ùå';
                const memberIcon = log.is_member ? 'üë•' : 'üë§';
                
                logText += `${index + 1}. ${statusIcon} ${memberIcon} `;
                logText += `${log.first_name || 'N/A'}`;
                if (log.username) logText += ` (@${log.username})`;
                logText += `\n   üìÖ ${date}`;
                if (log.notes) logText += `\n   üìù ${log.notes}`;
                logText += `\n\n`;
            });
        } else {
            logText += `üìù –õ–æ–≥–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç.\n\n`;
        }
        
        logText += `üåê –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: https://c.cabrioride.by/backend/log_auth.php`;
        
        const authLogsKeyboard = addBackToMenuButton({});
        bot.sendMessage(msg.chat.id, logText, { 
            parse_mode: 'Markdown',
            ...authLogsKeyboard 
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /messages —É–¥–∞–ª–µ–Ω–∞ - –ø–æ–¥—Å—á–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
bot.onText(/\/setuserstatus/, async (msg) => {
    const userId = msg.from.id;
    
    if (!isAdmin(userId)) {
        bot.sendMessage(msg.chat.id, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω! –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ë–î
    if (!await checkDatabaseAccess(msg.chat.id)) return;
    
    try {
        // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        userStates.set(userId, { 
            state: 'setting_user_status', 
            step: 'select_status',
            data: {}
        });
        
        const statusKeyboard = {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üÜï –ù–æ–≤—ã–π', callback_data: 'status_–Ω–æ–≤—ã–π' },
                        { text: '‚ö™ –ë–µ–∑ –∞–≤—Ç–æ', callback_data: 'status_–±–µ–∑ –∞–≤—Ç–æ' }
                    ],
                    [
                        { text: '‚ö™ –£—á–∞—Å—Ç–Ω–∏–∫', callback_data: 'status_—É—á–∞—Å—Ç–Ω–∏–∫' },
                        { text: '‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π', callback_data: 'status_–∞–∫—Ç–∏–≤–Ω—ã–π' }
                    ],
                    [
                        { text: 'üö´ –í—ã—à–µ–ª', callback_data: 'status_–≤—ã—à–µ–ª' },
                        { text: 'üö´ –ë–ê–ù', callback_data: 'status_–±–∞–Ω' }
                    ],
                    [
                        { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_status_change' }
                    ]
                ]
            }
        };
        
        bot.sendMessage(msg.chat.id, 
            'üîß –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n' +
            'üìã –®–∞–≥ 1 –∏–∑ 2: –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:\n\n' +
            'üÜï **–ù–æ–≤—ã–π** - –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –∫–ª—É–±–∞ (–Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω)\n' +
            '‚ö™ **–ë–µ–∑ –∞–≤—Ç–æ** - –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–æ –±–µ–∑ –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n' +
            '‚ö™ **–£—á–∞—Å—Ç–Ω–∏–∫** - –µ—Å—Ç—å –∞–≤—Ç–æ, –Ω–æ –Ω–µ –±—ã–ª –Ω–∞ –≤—Å—Ç—Ä–µ—á–∞—Ö\n' +
            '‚úÖ **–ê–∫—Ç–∏–≤–Ω—ã–π** - —É—á–∞—Å—Ç–≤—É–µ—Ç –≤–æ –≤—Å—Ç—Ä–µ—á–∞—Ö –∫–ª—É–±–∞\n' +
            'üö´ **–í—ã—à–µ–ª** - –ø–æ–∫–∏–Ω—É–ª –∫–ª—É–±\n' +
            'üö´ **–ë–ê–ù** - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –∫–ª—É–±–µ\n\n' +
            'üëá –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å:', 
            { 
                parse_mode: 'Markdown',
                ...statusKeyboard 
            }
        );
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /setuserstatus:', error);
        bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ (–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ CHAT_ID)
bot.onText(/\/getchatid/, async (msg) => {
    const userId = msg.from.id;
    
    // –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if (!isAdmin(userId)) {
        bot.sendMessage(msg.chat.id, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω! –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.');
        return;
    }
    
    let infoMessage = 'üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Chat ID\n\n';
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
    infoMessage += `üí¨ –¢–µ–∫—É—â–∏–π —á–∞—Ç:\n`;
    infoMessage += `‚Ä¢ ID: \`${msg.chat.id}\`\n`;
    infoMessage += `‚Ä¢ –¢–∏–ø: ${msg.chat.type}\n`;
    if (msg.chat.title) infoMessage += `‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: ${msg.chat.title}\n`;
    if (msg.chat.username) infoMessage += `‚Ä¢ Username: @${msg.chat.username}\n`;
    
    infoMessage += `\n‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:\n`;
    infoMessage += `‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π CHAT_ID: \`${config.CHAT_ID}\`\n`;
    infoMessage += `‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: ${msg.chat.id.toString() === config.CHAT_ID.toString() ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}\n`;
    
    // –ï—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–∞/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞
    if (msg.chat.type === 'group' || msg.chat.type === 'supergroup') {
        infoMessage += `\nüîß –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n`;
        infoMessage += `1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞: \`${msg.chat.id}\`\n`;
        infoMessage += `2. –û–±–Ω–æ–≤–∏—Ç–µ CHAT_ID –≤ .env —Ñ–∞–π–ª–µ\n`;
        infoMessage += `3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞\n`;
        infoMessage += `4. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã\n`;
    } else {
        infoMessage += `\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ:\n`;
        infoMessage += `–≠—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç. –î–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω—É–∂–Ω–∞ –≥—Ä—É–ø–ø–∞ –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞.\n`;
    }
    
    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ
    if (config.CHAT_ID && config.CHAT_ID !== msg.chat.id.toString()) {
        infoMessage += `\nüéØ –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞:\n`;
        try {
            const chatInfo = await bot.getChat(config.CHAT_ID);
            infoMessage += `‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: ${chatInfo.title || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
            infoMessage += `‚Ä¢ –¢–∏–ø: ${chatInfo.type}\n`;
            if (chatInfo.username) infoMessage += `‚Ä¢ Username: @${chatInfo.username}\n`;
            infoMessage += `‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞\n`;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ
            try {
                const botMember = await bot.getChatMember(config.CHAT_ID, (await bot.getMe()).id);
                infoMessage += `‚Ä¢ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: ${botMember.status}\n`;
            } catch (memberError) {
                infoMessage += `‚Ä¢ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: ‚ùå ${memberError.message}\n`;
            }
        } catch (chatError) {
            infoMessage += `‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚ùå ${chatError.message}\n`;
            if (chatError.response && chatError.response.body && 
                chatError.response.body.description === 'Bad Request: chat not found') {
                infoMessage += `‚Ä¢ ‚ùå –ü—Ä–æ–±–ª–µ–º–∞: –ì—Ä—É–ø–ø–∞ —Å ID ${config.CHAT_ID} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n`;
            }
        }
    }
    
    bot.sendMessage(msg.chat.id, infoMessage, { parse_mode: 'Markdown' });
});

// –ö–æ–º–∞–Ω–¥–∞ /menu
bot.onText(/\/menu/, async (msg) => {
    if (!await checkAccess(msg)) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ë–î
    if (!await checkDatabaseAccess(msg.chat.id)) return;
    
    const userId = msg.from.id;
    const isUserAdmin = isAdmin(userId);
    
    let keyboard = {
        reply_markup: {
            inline_keyboard: [
                // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É)
                [
                    { text: 'üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', callback_data: 'category_profile' }
                ],
                [
                    { text: 'üéØ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–ª—É–±–∞', callback_data: 'category_activities' }
                ],
                [
                    { text: 'üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', callback_data: 'category_info' }
                ]
            ]
        }
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
    if (isUserAdmin) {
        keyboard.reply_markup.inline_keyboard.push([
            { text: 'üîí –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ', callback_data: 'category_admin' }
        ]);
    }
    
    let menuText = 'üöó –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é Cabrio Club\n\n' +
        'üë§ **–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç** - –ø—Ä–æ—Ñ–∏–ª—å, –∞–≤—Ç–æ–º–æ–±–∏–ª–∏\n' +
        'üéØ **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–ª—É–±–∞** - –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è, –ø–æ–∏—Å–∫\n' +
        'üìä **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è** - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, —Å–∞–π—Ç, –ø–æ–º–æ—â—å\n';
    
    if (isUserAdmin) {
        menuText += 'üîí **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ** - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º\n';
    }
    
    menuText += '\nüëá –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:';
    
    bot.sendMessage(msg.chat.id, menuText, { parse_mode: 'Markdown', ...keyboard });
});

// –ö–æ–º–∞–Ω–¥–∞ /register
bot.onText(/\/register/, async (msg) => {
    const groupAccess = await checkGroupAccess(msg);
    if (!groupAccess) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ë–î
    if (!await checkDatabaseAccess(msg.chat.id)) return;
    
    const userId = msg.from.id;
    
    try {
        const existingMember = await db.getMemberByTelegramId(userId);
        
        if (existingMember) {
            if (existingMember.status === '–Ω–æ–≤—ã–π') {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–Ω–æ–≤—ã–π" –º–æ–∂–µ—Ç –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–µ –∫ –≥—Ä—É–ø–ø–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                const canSendToGroup = groupAccess === true;
                
                // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                userStates.set(userId, { 
                    state: 'registration', 
                    step: 'name',
                    groupAccess: canSendToGroup 
                });
                
                bot.sendMessage(msg.chat.id, 
                    'üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ Cabrio Club\n\n' +
                    '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–∏—è –≤ –∫–ª—É–±–µ.\n\n' +
                    'üë§ –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è)',
                    { parse_mode: 'Markdown' }
                );
            } else {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–æ—à–µ–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
                bot.sendMessage(msg.chat.id, 
                    '‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!\n\n' +
                    `üìä –í–∞—à —Å—Ç–∞—Ç—É—Å: ${existingMember.status}\n` +
                    `üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${formatDate(existingMember.join_date)}\n\n` +
                    '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞.'
                );
            }
            return;
        }
        
        // –†–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ª—É—á–∞–π - –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ (–Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å)
        bot.sendMessage(msg.chat.id, 
            '‚ùå –û—à–∏–±–∫–∞: –í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n' +
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /start —Å–Ω–∞—á–∞–ª–∞.'
        );
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /skip
bot.onText(/\/skip/, async (msg) => {
    if (!await checkAccess(msg)) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ë–î
    if (!await checkDatabaseAccess(msg.chat.id)) return;
    
    const userId = msg.from.id;
    const userState = userStates.get(userId);
    
    if (!userState) {
        bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞.');
        return;
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º "/skip"
    if (userState.state === 'registration') {
        await handleRegistration(msg, userId, userState);
    } else if (userState.state === 'adding_car') {
        bot.sendMessage(msg.chat.id, '‚ùå –í –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–µ–ª—å–∑—è –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –ø–æ–ª—è.');
    } else {
        bot.sendMessage(msg.chat.id, '‚ùå –ö–æ–º–∞–Ω–¥–∞ /skip –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.onText(/\/help/, async (msg) => {
    if (!await checkAccess(msg)) return;
    
    showHelp(msg);
});

// –ö–æ–º–∞–Ω–¥–∞ /cancel - –æ—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
bot.onText(/\/cancel/, async (msg) => {
    const userId = msg.from.id;
    const userState = userStates.get(userId);
    
    if (!userState) {
        bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.');
        return;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    let operationName = '';
    switch (userState.state) {
        case 'registration':
            operationName = '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è';
            break;
        case 'adding_car':
            operationName = '–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è';
            break;
        case 'creating_invitation':
            operationName = '—Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è';
            break;
        case 'searching':
            operationName = '–ø–æ–∏—Å–∫';
            break;
        case 'setting_user_status':
            operationName = '–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
            break;
        default:
            operationName = '–æ–ø–µ—Ä–∞—Ü–∏—è';
    }
    
    userStates.delete(userId);
    
    const cancelKeyboard = addBackToMenuButton({});
    bot.sendMessage(msg.chat.id, 
        `‚ùå ${operationName.charAt(0).toUpperCase() + operationName.slice(1)} –æ—Ç–º–µ–Ω–µ–Ω–∞\n\n` +
        '–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
        { 
            parse_mode: 'Markdown',
            ...cancelKeyboard 
        }
    );
});

// –ö–æ–º–∞–Ω–¥–∞ /done
bot.onText(/\/done/, async (msg) => {
    if (!await checkAccess(msg)) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ë–î
    if (!await checkDatabaseAccess(msg.chat.id)) return;
    
    const userId = msg.from.id;
    const userState = userStates.get(userId);
    
    if (!userState) {
        bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.');
        return;
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º "/done"
    if (userState.state === 'adding_car' && userState.step === 'photos') {
        await completeAddCar(msg, userId, userState.data);
    } else if (userState.state === 'creating_invitation' && userState.step === 'photos') {
        await completeCreateInvitation(msg, userId, userState.data);
    } else {
        bot.sendMessage(msg.chat.id, '‚ùå –ö–æ–º–∞–Ω–¥–∞ /done –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /search - –ø–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ –Ω–æ–º–µ—Ä—É
bot.onText(/\/search/, async (msg) => {
    if (!await checkAccess(msg)) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ë–î
    if (!await checkDatabaseAccess(msg.chat.id)) return;
    
    await startSearchByNumber(msg, msg.from.id);
});

// –ö–æ–º–∞–Ω–¥–∞ /invite - —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ (—Ç—Ä–µ–±—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É)
bot.onText(/\/invite/, async (msg) => {
    const groupAccess = await checkGroupAccess(msg);
    if (!groupAccess) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ë–î
    if (!await checkDatabaseAccess(msg.chat.id)) return;
    
    await startCreateInvitation(msg, msg.from.id);
});

// –ö–æ–º–∞–Ω–¥–∞ /myinvites - –º–æ–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
bot.onText(/\/myinvites/, async (msg) => {
    if (!await checkAccess(msg)) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ë–î
    if (!await checkDatabaseAccess(msg.chat.id)) return;
    
    await showUserInvitations(msg, msg.from.id);
});

// –ö–æ–º–∞–Ω–¥–∞ /addcar - –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å (—Ç—Ä–µ–±—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É)
bot.onText(/\/addcar/, async (msg) => {
    const groupAccess = await checkGroupAccess(msg);
    if (!groupAccess) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ë–î
    if (!await checkDatabaseAccess(msg.chat.id)) return;
    
    await startAddCar(msg, msg.from.id);
});

// –ö–æ–º–∞–Ω–¥–∞ /profile - –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å
bot.onText(/\/profile/, async (msg) => {
    if (!await checkAccess(msg)) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ë–î
    if (!await checkDatabaseAccess(msg.chat.id)) return;
    
    await showUserProfile(msg, msg.from.id);
});

// –ö–æ–º–∞–Ω–¥–∞ /cars - –º–æ–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏
bot.onText(/\/cars/, async (msg) => {
    if (!await checkAccess(msg)) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ë–î
    if (!await checkDatabaseAccess(msg.chat.id)) return;
    
    await showUserCars(msg, msg.from.id);
});

// –ö–æ–º–∞–Ω–¥–∞ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª—É–±–∞
bot.onText(/\/stats/, async (msg) => {
    if (!await checkAccess(msg)) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ë–î
    if (!await checkDatabaseAccess(msg.chat.id)) return;
    
    await showStats(msg);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á–∞—Ç–∞
bot.onText(/\/chatstats/, async (msg) => {
    if (!await checkAccess(msg)) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ë–î
    if (!await checkDatabaseAccess(msg.chat.id)) return;
    
    const userId = msg.from.id;
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞
        const chatStats = await db.getChatStatistics();
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const topUsers = await db.getTopActiveUsers(10);
        
        let statsMessage = 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á–∞—Ç–∞\n\n';
        
        // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        statsMessage += 'üìà –û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:\n';
        statsMessage += `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${chatStats.total_users || 0}\n`;
        statsMessage += `‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${chatStats.total_messages || 0}\n`;
        statsMessage += `‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ: ${chatStats.total_photos || 0}\n`;
        statsMessage += `‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–∏–¥–µ–æ: ${chatStats.total_videos || 0}\n`;
        statsMessage += `‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: ${chatStats.total_voice || 0}\n`;
        statsMessage += `‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${chatStats.total_documents || 0}\n`;
        
        if (chatStats.avg_messages_per_week) {
            statsMessage += `‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –Ω–µ–¥–µ–ª—é: ${Math.round(chatStats.avg_messages_per_week * 100) / 100}\n`;
        }
        
        if (chatStats.chat_first_message) {
            const firstDate = new Date(chatStats.chat_first_message);
            statsMessage += `‚Ä¢ –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${firstDate.toLocaleDateString('ru-RU')}\n`;
        }
        
        if (chatStats.chat_last_message) {
            const lastDate = new Date(chatStats.chat_last_message);
            statsMessage += `‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${lastDate.toLocaleDateString('ru-RU')}\n`;
        }
        
        // –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if (topUsers.length > 0) {
            statsMessage += '\nüèÜ –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n';
            
            topUsers.forEach((user, index) => {
                const username = user.username ? `@${user.username}` : '';
                const name = user.first_name;
                const displayName = username || name || `ID${user.telegram_id}`;
                
                let userLine = `${index + 1}. ${displayName}: ${user.total_messages} —Å–æ–æ–±—â–µ–Ω–∏–π`;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
                const mediaCount = (user.total_photos || 0) + (user.total_videos || 0) + 
                                 (user.total_voice || 0) + (user.total_documents || 0);
                if (mediaCount > 0) {
                    userLine += ` (üìé${mediaCount})`;
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤ –Ω–µ–¥–µ–ª—é
                if (user.avg_messages_per_week > 0) {
                    userLine += ` | ${Math.round(user.avg_messages_per_week * 10) / 10}/–Ω–µ–¥`;
                }
                
                statsMessage += userLine + '\n';
            });
        }
        
        statsMessage += '\nüìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è —Å –º–æ–º–µ–Ω—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É.';
        
        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const keyboard = {
            inline_keyboard: [
                [
                    { text: 'üë§ –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'my_stats' },
                    { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'refresh_stats' }
                ],
                [
                    { text: 'üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'detailed_stats' }
                ]
            ]
        };
        
        bot.sendMessage(msg.chat.id, statsMessage, { 
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–∞:', error);
        bot.sendMessage(msg.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–∞.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
// Middleware –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —É–¥–∞–ª–µ–Ω - —Å—Ç–∞—Ç—É—Å "–∞–∫—Ç–∏–≤–Ω—ã–π" –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º–∏

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async (callbackQuery) => {
    const msg = callbackQuery.message;
    const data = callbackQuery.data;
    const userId = callbackQuery.from.id;
    
    // –ò—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
    if (data === 'admin_status') {
        if (!isAdmin(userId)) {
            bot.answerCallbackQuery(callbackQuery.id, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
            return;
        }
    } else if (data === 'admin_test') {
        if (!isAdmin(userId)) {
            bot.answerCallbackQuery(callbackQuery.id, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
            return;
        }
    } else {
        // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–ª–µ–Ω—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–µ
        if (!await checkUserMembership(userId)) {
            bot.answerCallbackQuery(callbackQuery.id, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
            return;
        }
    }
    
    try {
        switch (data) {
            case 'my_profile':
                await showUserProfile(msg, userId);
                break;
                
            case 'my_cars':
                await showUserCars(msg, userId);
                break;
                
            case 'add_car':
                await startAddCar(msg, userId);
                break;
                
            case 'my_invitations':
                await showUserInvitations(msg, userId);
                break;
                
            case 'create_invitation':
                await startCreateInvitation(msg, userId);
                break;
                
            case 'stats':
                await showStats(msg);
                break;
                
            case 'web_dashboard':
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–µ–±-–¥–∞—à–±–æ—Ä–¥—É
                try {
                    const member = await db.getMemberByTelegramId(userId);
                    
                    if (!member) {
                        bot.answerCallbackQuery(callbackQuery.id, '‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∫–ª—É–±–µ');
                        
                        const notRegisteredKeyboard = {
                            reply_markup: {
                                inline_keyboard: [
                                    [{ text: 'üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data: 'register' }],
                                    [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
                                ]
                            }
                        };
                        
                        bot.sendMessage(msg.chat.id, 
                            '‚ùå –î–æ—Å—Ç—É–ø –∫ –≤–µ–±-–¥–∞—à–±–æ—Ä–¥—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω\n\n' +
                            'üîê –í–µ–±-–¥–∞—à–±–æ—Ä–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–ª—É–±–∞.\n\n' +
                            '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n' +
                            '1Ô∏è‚É£ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∫–ª—É–±–µ\n' +
                            '2Ô∏è‚É£ –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å\n' +
                            '3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å "–∞–∫—Ç–∏–≤–Ω—ã–π" –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n' +
                            'üëá –ù–∞—á–Ω–∏—Ç–µ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:',
                            { 
                                parse_mode: 'Markdown',
                                ...notRegisteredKeyboard 
                            }
                        );
                        return;
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    if (member.status !== '–∞–∫—Ç–∏–≤–Ω—ã–π') {
                        bot.answerCallbackQuery(callbackQuery.id, '‚ùå –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω');
                        
                        const statusIcon = member.status === '–Ω–æ–≤—ã–π' ? 'üÜï' : 
                                         member.status === '–±–µ–∑ –∞–≤—Ç–æ' ? '‚ö™' : 
                                         member.status === '—É—á–∞—Å—Ç–Ω–∏–∫' ? '‚ö™' : 
                                         member.status === '–≤—ã—à–µ–ª' ? 'üö´' : 
                                         member.status === '–±–∞–Ω' ? 'üö´' : '‚ùì';
                        
                        const restrictedKeyboard = {
                            reply_markup: {
                                inline_keyboard: [
                                    [{ text: 'üìä –û–±—ã—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' }],
                                    [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
                                ]
                            }
                        };
                        
                        bot.sendMessage(msg.chat.id, 
                            'üîê –î–æ—Å—Ç—É–ø –∫ –≤–µ–±-–¥–∞—à–±–æ—Ä–¥—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω\n\n' +
                            `üë§ –í–∞—à —Å—Ç–∞—Ç—É—Å: ${statusIcon} **${member.status}**\n\n` +
                            'üéØ –í–µ–±-–¥–∞—à–±–æ—Ä–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ **–∞–∫—Ç–∏–≤–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º** –∫–ª—É–±–∞.\n\n' +
                            'üöó –°—Ç–∞—Ç—É—Å "–∞–∫—Ç–∏–≤–Ω—ã–π" –ø–æ–ª—É—á–∞—é—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ:\n' +
                            '‚Ä¢ –ü—Ä–∏–µ–∑–∂–∞—é—Ç –Ω–∞ –≤—Å—Ç—Ä–µ—á–∏ –∫–ª—É–±–∞\n' +
                            '‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ –∂–∏–∑–Ω–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞\n' +
                            '‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—Ç —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n' +
                            'üìä –ü–æ–∫–∞ —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—ã—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n' +
                            'üí¨ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ –æ –≤—Å—Ç—Ä–µ—á–∞—Ö –≤ –≥—Ä—É–ø–ø–µ!',
                            { 
                                parse_mode: 'Markdown',
                                ...restrictedKeyboard 
                            }
                        );
                        return;
                    }
                    
                    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–Ω—ã–π - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –≤–µ–±-–¥–∞—à–±–æ—Ä–¥—É
                    await handleWebDashboard(msg, userId);
                    
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–µ–±-–¥–∞—à–±–æ—Ä–¥—É:', error);
                    bot.answerCallbackQuery(callbackQuery.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞');
                    
                    const errorKeyboard = addBackToMenuButton({});
                    bot.sendMessage(msg.chat.id, 
                        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–µ–±-–¥–∞—à–±–æ—Ä–¥—É.\n\n' +
                        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
                        { 
                            parse_mode: 'Markdown',
                            ...errorKeyboard 
                        }
                    );
                }
                break;
                
            case 'help':
                await showHelp(msg);
                break;
                
            case 'search_by_number':
                await startSearchByNumber(msg, userId);
                break;
                
            case 'register':
                // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                const newUserState = { 
                    state: 'registration', 
                    step: 'name',
                    data: {}
                };
                userStates.set(userId, newUserState);
                
                console.log(`üîß –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, newUserState);
                console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:`, userStates.get(userId));
                
                bot.sendMessage(msg.chat.id, 
                    'üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –∫–ª—É–±–µ –∫–∞–±—Ä–∏–æ–ª–µ—Ç–æ–≤\n\n' +
                    'üöó –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–∞—Å –≤ –Ω–∞—à–µ–º –∫–ª—É–±–µ.\n\n' +
                    'üìã **–ß—Ç–æ –º—ã —Å–ø—Ä–æ—Å–∏–º:**\n' +
                    '‚Ä¢ –ò–º—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n' +
                    '‚Ä¢ –§–∞–º–∏–ª–∏—é\n' +
                    '‚Ä¢ –î–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è\n' +
                    '‚Ä¢ –ì–æ—Ä–æ–¥ –∏ —Å—Ç—Ä–∞–Ω—É\n' +
                    '‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n' +
                    '‚Ä¢ –†–∞—Å—Å–∫–∞–∑ –æ —Å–µ–±–µ\n' +
                    '‚Ä¢ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è\n\n' +
                    '‚ú® –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ç–æ–ª—å–∫–æ –∏–º—è, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –ø–æ –∂–µ–ª–∞–Ω–∏—é!\n\n' +
                    'üë§ –®–∞–≥ 1 –∏–∑ 8: –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:', 
                    { parse_mode: 'Markdown' }
                );
                break;
                
            case 'skip_step':
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–ø—É—Å–∫ —à–∞–≥–∞
                const userStateForSkip = userStates.get(userId);
                if (userStateForSkip) {
                    if (userStateForSkip.state === 'registration') {
                        await handleRegistrationSkip(msg, userId, userStateForSkip);
                    } else if (userStateForSkip.state === 'adding_car') {
                        if (userStateForSkip.step === 'reg_number') {
                            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
                            userStateForSkip.step = 'photos';
                            userStates.set(userId, userStateForSkip);
                            
                            const carPhotosKeyboard = {
                                reply_markup: {
                                    inline_keyboard: [
                                        [
                                            { text: '‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å', callback_data: 'finish_photos' },
                                            { text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ', callback_data: 'skip_step' }
                                        ]
                                    ]
                                }
                            };
                            
                            bot.sendMessage(msg.chat.id, 
                                'üì∏ –®–∞–≥ 5/5: –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è!\n' +
                                '–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –ø–æ–¥—Ä—è–¥.', 
                                { 
                                    parse_mode: 'Markdown',
                                    ...carPhotosKeyboard 
                                }
                            );
                        } else if (userStateForSkip.step === 'photos') {
                            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–æ—Ç–æ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
                            await completeAddCar(msg, userId, userStateForSkip.data);
                        } else {
                            bot.sendMessage(msg.chat.id, '‚ùå –í –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∏ —Ñ–æ—Ç–æ.');
                        }
                    } else if (userStateForSkip.state === 'creating_invitation') {
                        await handleInvitationSkip(msg, userId, userStateForSkip);
                    }
                }
                break;
                
            case 'finish_photos':
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ
                const userStateForFinish = userStates.get(userId);
                if (userStateForFinish) {
                    if (userStateForFinish.state === 'adding_car' && userStateForFinish.step === 'photos') {
                        await completeAddCar(msg, userId, userStateForFinish.data);
                    } else if (userStateForFinish.state === 'creating_invitation' && userStateForFinish.step === 'photos') {
                        await completeCreateInvitation(msg, userId, userStateForFinish.data);
                    }
                }
                break;
                
            case 'continue_photos':
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ñ–æ—Ç–æ - –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
                const userStateForContinue = userStates.get(userId);
                if (userStateForContinue) {
                    if (userStateForContinue.state === 'adding_car' && userStateForContinue.step === 'photos') {
                        bot.sendMessage(msg.chat.id, 'üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∞–≤—Ç–æ–º–æ–±–∏–ª—è');
                    } else if (userStateForContinue.state === 'creating_invitation' && userStateForContinue.step === 'photos') {
                        bot.sendMessage(msg.chat.id, 'üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∞–≤—Ç–æ–º–æ–±–∏–ª—è');
                    }
                }
                break;
                
            case 'finish_invitation':
                // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
                const userStateForFinishInvitation = userStates.get(userId);
                if (userStateForFinishInvitation && userStateForFinishInvitation.state === 'creating_invitation') {
                    await completeCreateInvitation(msg, userId, userStateForFinishInvitation.data);
                }
                break;
                
            case 'menu':
            case 'back_to_menu':
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
                const isUserAdminCallback = isAdmin(userId);
                
                let menuKeyboard = {
                    reply_markup: {
                        inline_keyboard: [
                            // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É)
                            [
                                { text: 'üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', callback_data: 'category_profile' }
                            ],
                            [
                                { text: 'üéØ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–ª—É–±–∞', callback_data: 'category_activities' }
                            ],
                            [
                                { text: 'üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', callback_data: 'category_info' }
                            ]
                        ]
                    }
                };
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
                if (isUserAdminCallback) {
                    menuKeyboard.reply_markup.inline_keyboard.push([
                        { text: 'üîí –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ', callback_data: 'category_admin' }
                    ]);
                }
                
                let menuTextCallback = 'üöó –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é Cabrio Club\n\n' +
                    'üë§ **–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç** - –ø—Ä–æ—Ñ–∏–ª—å, –∞–≤—Ç–æ–º–æ–±–∏–ª–∏\n' +
                    'üéØ **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–ª—É–±–∞** - –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è, –ø–æ–∏—Å–∫\n' +
                    'üìä **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è** - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, —Å–∞–π—Ç, –ø–æ–º–æ—â—å\n';
                
                if (isUserAdminCallback) {
                    menuTextCallback += 'üîí **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ** - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º\n';
                }
                
                menuTextCallback += '\nüëá –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:';
                
                try {
                    // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await bot.editMessageText(menuTextCallback, {
                        chat_id: msg.chat.id,
                        message_id: msg.message_id,
                        parse_mode: 'Markdown',
                        ...menuKeyboard
                    });
                } catch (editError) {
                    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ:', editError.message);
                    await bot.sendMessage(msg.chat.id, menuTextCallback, {
                        parse_mode: 'Markdown',
                        ...menuKeyboard
                    });
                }
                break;
                
            case 'category_profile':
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–º–µ–Ω—é "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"
                const profileKeyboard = {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'my_profile' },
                                { text: 'üöó –ú–æ–∏ –∞–≤—Ç–æ', callback_data: 'my_cars' }
                            ],
                            [
                                { text: 'üìù –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ', callback_data: 'add_car' }
                            ],
                            [
                                { text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }
                            ]
                        ]
                    }
                };
                
                const profileText = 'üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n\n' +
                    'üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º –∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏:\n\n' +
                    '‚Ä¢ **–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å** - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö\n' +
                    '‚Ä¢ **–ú–æ–∏ –∞–≤—Ç–æ** - —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π\n' +
                    '‚Ä¢ **–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ** - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n\n' +
                    'üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';
                
                try {
                    await bot.editMessageText(profileText, {
                        chat_id: msg.chat.id,
                        message_id: msg.message_id,
                        parse_mode: 'Markdown',
                        ...profileKeyboard
                    });
                } catch (editError) {
                    await bot.sendMessage(msg.chat.id, profileText, {
                        parse_mode: 'Markdown',
                        ...profileKeyboard
                    });
                }
                break;
                
            case 'category_activities':
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–º–µ–Ω—é "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–ª—É–±–∞"
                const activitiesKeyboard = {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: 'üéâ –°–æ–±—ã—Ç–∏—è –∫–ª—É–±–∞', callback_data: 'events_menu' },
                                { text: 'üîß –°–µ—Ä–≤–∏—Å—ã', callback_data: 'services_menu' }
                            ],
                            [
                                { text: 'üéØ –û—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ', callback_data: 'create_invitation' },
                                { text: 'üîç –ü–æ–∏—Å–∫ –∞–≤—Ç–æ', callback_data: 'search_by_number' }
                            ],
                            [
                                { text: 'üìÆ –ú–æ–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è', callback_data: 'my_invitations' }
                            ],
                            [
                                { text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }
                            ]
                        ]
                    }
                };
                
                const activitiesText = 'üéØ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–ª—É–±–∞\n\n' +
                    'üöó –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏:\n\n' +
                    '‚Ä¢ **–°–æ–±—ã—Ç–∏—è –∫–ª—É–±–∞** - –∑–∞–µ–∑–¥—ã, –≤—Å—Ç—Ä–µ—á–∏, —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–∏\n' +
                    '‚Ä¢ **–°–µ—Ä–≤–∏—Å—ã** - –∫–∞—Ç–∞–ª–æ–≥ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–æ–≤ —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏\n\n' +
                    'üì® **–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:**\n' +
                    '‚Ä¢ **–û—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ** - –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –∫–ª—É–±\n' +
                    '‚Ä¢ **–ü–æ–∏—Å–∫ –∞–≤—Ç–æ** - –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –ø–æ –Ω–æ–º–µ—Ä—É\n' +
                    '‚Ä¢ **–ú–æ–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è** - –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π\n\n' +
                    'üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';
                
                try {
                    await bot.editMessageText(activitiesText, {
                        chat_id: msg.chat.id,
                        message_id: msg.message_id,
                        parse_mode: 'Markdown',
                        ...activitiesKeyboard
                    });
                } catch (editError) {
                    await bot.sendMessage(msg.chat.id, activitiesText, {
                        parse_mode: 'Markdown',
                        ...activitiesKeyboard
                    });
                }
                break;
                
            case 'category_info':
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–º–µ–Ω—é "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
                const infoKeyboard = {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: 'üè† –°–∞–π—Ç –∫–ª—É–±–∞', url: 'https://cabrioride.by' }
                            ],
                            [
                                { text: 'üåê –í–µ–±-–¥–∞—à–±–æ—Ä–¥', callback_data: 'web_dashboard' }
                            ],
                            [
                                { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª—É–±–∞', callback_data: 'stats' }
                            ],
                            [
                                { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' }
                            ],
                            [
                                { text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }
                            ]
                        ]
                    }
                };
                
                const infoText = 'üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n' +
                    'üìà –î–∞–Ω–Ω—ã–µ –∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n' +
                    '‚Ä¢ **–°–∞–π—Ç –∫–ª—É–±–∞** - –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç cabrioride.by\n' +
                    '‚Ä¢ **–í–µ–±-–¥–∞—à–±–æ—Ä–¥** - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ\n' +
                    '‚Ä¢ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª—É–±–∞** - –æ–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n' +
                    '‚Ä¢ **–ü–æ–º–æ—â—å** - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n\n' +
                    'üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';
                
                try {
                    await bot.editMessageText(infoText, {
                        chat_id: msg.chat.id,
                        message_id: msg.message_id,
                        parse_mode: 'Markdown',
                        ...infoKeyboard
                    });
                } catch (editError) {
                    await bot.sendMessage(msg.chat.id, infoText, {
                        parse_mode: 'Markdown',
                        ...infoKeyboard
                    });
                }
                break;
                
            case 'category_admin':
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
                if (!isAdmin(userId)) {
                    bot.answerCallbackQuery(callbackQuery.id, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
                    return;
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–º–µ–Ω—é "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ"
                const adminKeyboard = {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: 'üîß –°–∏—Å—Ç–µ–º–Ω—ã–π —Å—Ç–∞—Ç—É—Å', callback_data: 'admin_status' },
                                { text: 'üîê –¢–µ—Å—Ç –∞–¥–º–∏–Ω–∞', callback_data: 'admin_test' }
                            ],
                            [
                                { text: 'üîï –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', callback_data: 'notification_settings' },
                                { text: 'üìä –õ–æ–≥–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', callback_data: 'auth_logs' }
                            ],
                            [
                                { text: 'üîß –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å', callback_data: 'start_setuserstatus' },
                                { text: 'üîê –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å', callback_data: 'admin_setpass' }
                            ],
                            [
                                { text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }
                            ]
                        ]
                    }
                };
                
                const passwordStatus = isPasswordActive() ? 
                    `\nüîê **–ü–∞—Ä–æ–ª—å –∞–∫—Ç–∏–≤–µ–Ω** (‚âà${getPasswordTimeLeft()} –º–∏–Ω. –æ—Å—Ç–∞–ª–æ—Å—å)` : 
                    '\n‚ö™ **–ü–∞—Ä–æ–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω**';
                
                const adminText = 'üîí –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n' +
                    '‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏:\n\n' +
                    '‚Ä¢ **–°–∏—Å—Ç–µ–º–Ω—ã–π —Å—Ç–∞—Ç—É—Å** - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n' +
                    '‚Ä¢ **–¢–µ—Å—Ç –∞–¥–º–∏–Ω–∞** - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞\n' +
                    '‚Ä¢ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π** - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏\n' +
                    '‚Ä¢ **–õ–æ–≥–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏** - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ö–æ–¥–æ–≤ –Ω–∞ —Å–∞–π—Ç\n' +
                    '‚Ä¢ **–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å** - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n' +
                    '‚Ä¢ **–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å** - –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞\n' +
                    passwordStatus + '\n\n' +
                    'üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';
                
                try {
                    await bot.editMessageText(adminText, {
                        chat_id: msg.chat.id,
                        message_id: msg.message_id,
                        parse_mode: 'Markdown',
                        ...adminKeyboard
                    });
                } catch (editError) {
                    await bot.sendMessage(msg.chat.id, adminText, {
                        parse_mode: 'Markdown',
                        ...adminKeyboard
                    });
                }
                break;

            // =====================================================
            // üéâ –°–æ–±—ã—Ç–∏—è –∫–ª—É–±–∞
            // =====================================================
            
            case 'events_menu':
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å–æ–±—ã—Ç–∏–π
                const eventsKeyboard = {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: 'üìÖ –í—Å–µ —Å–æ–±—ã—Ç–∏—è', callback_data: 'view_all_events' },
                                { text: '‚ûï –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ', callback_data: 'create_event' }
                            ],
                            [
                                { text: 'üìã –ú–æ–∏ —Å–æ–±—ã—Ç–∏—è', callback_data: 'my_events' }
                            ],
                            [
                                { text: 'üîô –ù–∞–∑–∞–¥ –∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º', callback_data: 'category_activities' }
                            ]
                        ]
                    }
                };
                
                const eventsText = 'üéâ –°–æ–±—ã—Ç–∏—è –∫–ª—É–±–∞\n\n' +
                    'üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏ –∫–ª—É–±–∞:\n\n' +
                    '‚Ä¢ **–í—Å–µ —Å–æ–±—ã—Ç–∏—è** - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n' +
                    '‚Ä¢ **–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ** - –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ\n' +
                    '‚Ä¢ **–ú–æ–∏ —Å–æ–±—ã—Ç–∏—è** - —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –æ—Ä–≥–∞–Ω–∏–∑—É–µ—Ç–µ\n\n' +
                    'üéØ –¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π: –∑–∞–µ–∑–¥—ã, –≤—Å—Ç—Ä–µ—á–∏, —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–∏, –ø–æ–µ–∑–¥–∫–∏, –±–∞–Ω–∫–µ—Ç—ã\n\n' +
                    'üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';
                
                try {
                    await bot.editMessageText(eventsText, {
                        chat_id: msg.chat.id,
                        message_id: msg.message_id,
                        parse_mode: 'Markdown',
                        ...eventsKeyboard
                    });
                } catch (editError) {
                    await bot.sendMessage(msg.chat.id, eventsText, {
                        parse_mode: 'Markdown',
                        ...eventsKeyboard
                    });
                }
                break;

            case 'services_menu':
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å–µ—Ä–≤–∏—Å–æ–≤
                const servicesKeyboard = {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: 'üè™ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã', callback_data: 'view_all_services' },
                                { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å', callback_data: 'add_service' }
                            ],
                            [
                                { text: '‚≠ê –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ', callback_data: 'recommended_services' },
                                { text: 'üèôÔ∏è –ü–æ –≥–æ—Ä–æ–¥–∞–º', callback_data: 'services_by_city' }
                            ],
                            [
                                { text: 'üîß –ü–æ —Ç–∏–ø–∞–º', callback_data: 'services_by_type' }
                            ],
                            [
                                { text: 'üîô –ù–∞–∑–∞–¥ –∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º', callback_data: 'category_activities' }
                            ]
                        ]
                    }
                };
                
                const servicesText = 'üîß –ö–∞—Ç–∞–ª–æ–≥ —Å–µ—Ä–≤–∏—Å–æ–≤\n\n' +
                    'üè™ –ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å—ã —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –∫–ª—É–±–∞:\n\n' +
                    '‚Ä¢ **–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã** - –ø–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–æ–≤\n' +
                    '‚Ä¢ **–î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å** - –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å\n' +
                    '‚Ä¢ **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ** - —Å–µ—Ä–≤–∏—Å—ã, –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∫–ª—É–±–æ–º\n' +
                    '‚Ä¢ **–ü–æ –≥–æ—Ä–æ–¥–∞–º** - –ø–æ–∏—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ\n' +
                    '‚Ä¢ **–ü–æ —Ç–∏–ø–∞–º** - –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å, –¥–µ—Ç–µ–π–ª–∏–Ω–≥, —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂ –∏ –¥—Ä.\n\n' +
                    '‚≠ê –†–µ–π—Ç–∏–Ω–≥–∏ –∏ –æ—Ç–∑—ã–≤—ã –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª—É–±–∞\n\n' +
                    'üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';
                
                try {
                    await bot.editMessageText(servicesText, {
                        chat_id: msg.chat.id,
                        message_id: msg.message_id,
                        parse_mode: 'Markdown',
                        ...servicesKeyboard
                    });
                } catch (editError) {
                    await bot.sendMessage(msg.chat.id, servicesText, {
                        parse_mode: 'Markdown',
                        ...servicesKeyboard
                    });
                }
                break;

            case 'view_all_events':
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
                await showAllEvents(msg, userId);
                break;

            case 'view_all_services':
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
                await showAllServices(msg, userId);
                break;

            case 'create_event':
                // –ó–∞–≥–ª—É—à–∫–∞ - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
                bot.answerCallbackQuery(callbackQuery.id, 'üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
                bot.sendMessage(msg.chat.id, 
                    'üöß **–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ**\n\n' +
                    '‚ö° –§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.\n' +
                    'üìÖ –°–∫–æ—Ä–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –∫–ª—É–±–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞!\n\n' +
                    'üí¨ –ü–æ–∫–∞ —á—Ç–æ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.',
                    { 
                        parse_mode: 'Markdown',
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —Å–æ–±—ã—Ç–∏—è–º', callback_data: 'events_menu' }]
                            ]
                        }
                    }
                );
                break;

            case 'add_service':
                // –ó–∞–≥–ª—É—à–∫–∞ - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
                bot.answerCallbackQuery(callbackQuery.id, 'üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
                bot.sendMessage(msg.chat.id, 
                    'üöß **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ**\n\n' +
                    '‚ö° –§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.\n' +
                    'üîß –°–∫–æ—Ä–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å—ã –≤ –∫–∞—Ç–∞–ª–æ–≥!\n\n' +
                    'üí¨ –ü–æ–∫–∞ —á—Ç–æ —Å–æ–æ–±—â–∞–π—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö.',
                    { 
                        parse_mode: 'Markdown',
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —Å–µ—Ä–≤–∏—Å–∞–º', callback_data: 'services_menu' }]
                            ]
                        }
                    }
                );
                break;

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
            case 'my_events':
            case 'recommended_services':
            case 'services_by_city':
            case 'services_by_type':
                bot.answerCallbackQuery(callbackQuery.id, 'üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
                bot.sendMessage(msg.chat.id, 
                    'üöß **–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ**\n\n' +
                    '‚ö° –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.\n' +
                    'üîú –°–∫–æ—Ä–æ –æ–Ω–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!\n\n' +
                    'üí¨ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –±–æ—Ç–∞.',
                    { 
                        parse_mode: 'Markdown',
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
                            ]
                        }
                    }
                );
                break;
                
            case 'get_active_status':
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
                try {
                    const member = await db.getMemberByTelegramId(userId);
                    
                    if (!member) {
                        bot.answerCallbackQuery(callbackQuery.id, '‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∫–ª—É–±–µ');
                        
                        const notRegisteredKeyboard = {
                            reply_markup: {
                                inline_keyboard: [
                                    [{ text: 'üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data: 'register' }],
                                    [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
                                ]
                            }
                        };
                        
                        bot.sendMessage(msg.chat.id, 
                            '‚ùå –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n\n' +
                            'üîê –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤ –∫–ª—É–±–µ.\n\n' +
                            'üëá –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:',
                            { 
                                parse_mode: 'Markdown',
                                ...notRegisteredKeyboard 
                            }
                        );
                        return;
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if (member.status === '–∞–∫—Ç–∏–≤–Ω—ã–π') {
                        bot.answerCallbackQuery(callbackQuery.id, '‚úÖ –í—ã —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫');
                        
                        const alreadyActiveKeyboard = {
                            reply_markup: {
                                inline_keyboard: [
                                    [{ text: 'üåê –í–µ–±-–¥–∞—à–±–æ—Ä–¥', callback_data: 'web_dashboard' }],
                                    [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
                                ]
                            }
                        };
                        
                        bot.sendMessage(msg.chat.id, 
                            '‚úÖ –í—ã —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫!\n\n' +
                            'üéØ –í–∞—à —Å—Ç–∞—Ç—É—Å: **–∞–∫—Ç–∏–≤–Ω—ã–π**\n\n' +
                            'üåê –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏, –≤–∫–ª—é—á–∞—è –≤–µ–±-–¥–∞—à–±–æ—Ä–¥.\n' +
                            'üöó –°–ø–∞—Å–∏–±–æ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ –≤ –∂–∏–∑–Ω–∏ –∫–ª—É–±–∞!',
                            { 
                                parse_mode: 'Markdown',
                                ...alreadyActiveKeyboard 
                            }
                        );
                        return;
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                    if (member.status !== '—É—á–∞—Å—Ç–Ω–∏–∫' && member.status !== '–±–µ–∑ –∞–≤—Ç–æ') {
                        bot.answerCallbackQuery(callbackQuery.id, '‚ùå –°—Ç–∞—Ç—É—Å –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç');
                        
                        const statusIcon = member.status === '–Ω–æ–≤—ã–π' ? 'üÜï' : 
                                         member.status === '–≤—ã—à–µ–ª' ? 'üö´' : 
                                         member.status === '–±–∞–Ω' ? 'üö´' : '‚ùì';
                        
                        const cantUpgradeKeyboard = {
                            reply_markup: {
                                inline_keyboard: [
                                    [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª—É–±–∞', callback_data: 'stats' }],
                                    [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
                                ]
                            }
                        };
                        
                        bot.sendMessage(msg.chat.id, 
                            '‚ùå –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n\n' +
                            `üë§ –í–∞—à —Å—Ç–∞—Ç—É—Å: ${statusIcon} **${member.status}**\n\n` +
                            'üéØ –ê–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å –º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º:\n' +
                            '‚Ä¢ ‚ö™ **–£—á–∞—Å—Ç–Ω–∏–∫** - –µ—Å—Ç—å –∞–≤—Ç–æ, –Ω–æ –Ω–µ –±—ã–ª –Ω–∞ –≤—Å—Ç—Ä–µ—á–∞—Ö\n' +
                            '‚Ä¢ ‚ö™ **–ë–µ–∑ –∞–≤—Ç–æ** - –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–æ –±–µ–∑ –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n\n' +
                            'üí¨ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.',
                            { 
                                parse_mode: 'Markdown',
                                ...cantUpgradeKeyboard 
                            }
                        );
                        return;
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø–∞—Ä–æ–ª—å
                    if (!isPasswordActive()) {
                        bot.answerCallbackQuery(callbackQuery.id, '‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
                        
                        const noPasswordKeyboard = {
                            reply_markup: {
                                inline_keyboard: [
                                    [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª—É–±–∞', callback_data: 'stats' }],
                                    [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
                                ]
                            }
                        };
                        
                        bot.sendMessage(msg.chat.id, 
                            'üîê –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n\n' +
                            '‚è∞ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å.\n\n' +
                            'üöó –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –≤—Å—Ç—Ä–µ—á–∞—Ö –∫–ª—É–±–∞:\n' +
                            '‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å –Ω–∞ 10 –º–∏–Ω—É—Ç\n' +
                            '‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≤—Å—Ç—Ä–µ—á–∏ –º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å\n' +
                            '‚Ä¢ –ü–∞—Ä–æ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç\n\n' +
                            'üí¨ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ –æ –≤—Å—Ç—Ä–µ—á–∞—Ö –≤ –≥—Ä—É–ø–ø–µ!',
                            { 
                                parse_mode: 'Markdown',
                                ...noPasswordKeyboard 
                            }
                        );
                        return;
                    }
                    
                    // –ï—Å–ª–∏ –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
                    userStates.set(userId, { 
                        state: 'entering_password', 
                        step: 'enter_password',
                        data: { telegramId: member.telegram_id, memberId: member.id, currentStatus: member.status }
                    });
                    
                    const statusIcon = member.status === '—É—á–∞—Å—Ç–Ω–∏–∫' ? '‚ö™' : '‚ö™';
                    
                    bot.sendMessage(msg.chat.id, 
                        'üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞\n\n' +
                        `üë§ –í–∞—à —Å—Ç–∞—Ç—É—Å: ${statusIcon} **${member.status}**\n\n` +
                        'üîê –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å—Ç–∞–Ω–æ–≤–∏–ª –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤—Å—Ç—Ä–µ—á–∏.\n\n' +
                        '‚ö° –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è –≤–∞—à —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏—Ç—Å—è –Ω–∞ **–∞–∫—Ç–∏–≤–Ω—ã–π**.\n\n' +
                        '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:',
                        { parse_mode: 'Markdown' }
                    );
                    
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞:', error);
                    bot.answerCallbackQuery(callbackQuery.id, '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞');
                    
                    const errorKeyboard = addBackToMenuButton({});
                    bot.sendMessage(msg.chat.id, 
                        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.\n\n' +
                        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
                        { 
                            parse_mode: 'Markdown',
                            ...errorKeyboard 
                        }
                    );
                }
                break;
                
            case 'start_setuserstatus':
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
                if (!isAdmin(userId)) {
                    bot.answerCallbackQuery(callbackQuery.id, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
                    return;
                }
                
                // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
                userStates.set(userId, { 
                    state: 'setting_user_status', 
                    step: 'select_status',
                    data: {}
                });
                
                const statusKeyboard = {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: 'üÜï –ù–æ–≤—ã–π', callback_data: 'status_–Ω–æ–≤—ã–π' },
                                { text: '‚ö™ –ë–µ–∑ –∞–≤—Ç–æ', callback_data: 'status_–±–µ–∑ –∞–≤—Ç–æ' }
                            ],
                            [
                                { text: '‚ö™ –£—á–∞—Å—Ç–Ω–∏–∫', callback_data: 'status_—É—á–∞—Å—Ç–Ω–∏–∫' },
                                { text: '‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π', callback_data: 'status_–∞–∫—Ç–∏–≤–Ω—ã–π' }
                            ],
                            [
                                { text: 'üö´ –í—ã—à–µ–ª', callback_data: 'status_–≤—ã—à–µ–ª' },
                                { text: 'üö´ –ë–ê–ù', callback_data: 'status_–±–∞–Ω' }
                            ],
                            [
                                { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_status_change' }
                            ]
                        ]
                    }
                };
                
                bot.sendMessage(msg.chat.id, 
                    'üîß –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n' +
                    'üìã –®–∞–≥ 1 –∏–∑ 2: –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:\n\n' +
                    'üÜï **–ù–æ–≤—ã–π** - –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –∫–ª—É–±–∞ (–Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω)\n' +
                    '‚ö™ **–ë–µ–∑ –∞–≤—Ç–æ** - –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–æ –±–µ–∑ –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n' +
                    '‚ö™ **–£—á–∞—Å—Ç–Ω–∏–∫** - –µ—Å—Ç—å –∞–≤—Ç–æ, –Ω–æ –Ω–µ –±—ã–ª –Ω–∞ –≤—Å—Ç—Ä–µ—á–∞—Ö\n' +
                    '‚úÖ **–ê–∫—Ç–∏–≤–Ω—ã–π** - —É—á–∞—Å—Ç–≤—É–µ—Ç –≤–æ –≤—Å—Ç—Ä–µ—á–∞—Ö –∫–ª—É–±–∞\n' +
                    'üö´ **–í—ã—à–µ–ª** - –ø–æ–∫–∏–Ω—É–ª –∫–ª—É–±\n' +
                    'üö´ **–ë–ê–ù** - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –∫–ª—É–±–µ\n\n' +
                    'üëá –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å:', 
                    { 
                        parse_mode: 'Markdown',
                        ...statusKeyboard 
                    }
                );
                break;
                
            case 'edit_profile':
                await showEditProfileMenu(msg, userId);
                break;
                
            case 'admin_status':
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
                if (!isAdmin(userId)) {
                    bot.answerCallbackQuery(callbackQuery.id, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
                    return;
                }
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —á—Ç–æ –∏ –∫–æ–º–∞–Ω–¥–∞ /status
                try {
                    let statusMessage = 'üîß –°–∏—Å—Ç–µ–º–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n\n';
                    
                    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
                    statusMessage += 'üìã –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:\n';
                    statusMessage += `‚Ä¢ BOT_TOKEN: ${process.env.BOT_TOKEN ? '‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}\n`;
                    statusMessage += `‚Ä¢ CHAT_ID: ${process.env.CHAT_ID ? `‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω (${process.env.CHAT_ID})` : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}\n`;
                    statusMessage += `‚Ä¢ DB_HOST: ${process.env.DB_HOST ? '‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}\n`;
                    statusMessage += `‚Ä¢ ADMIN_IDS: ${process.env.ADMIN_IDS ? `‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω (${ADMIN_IDS.length} –∞–¥–º–∏–Ω–æ–≤)` : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}\n\n`;
                    
                    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    statusMessage += 'üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:\n';
                    statusMessage += `‚Ä¢ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: ${db.isConnected ? '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}\n`;
                    statusMessage += `‚Ä¢ –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${db.connection ? '‚úÖ –°–æ–∑–¥–∞–Ω' : '‚ùå –ù–µ —Å–æ–∑–¥–∞–Ω'}\n`;
                    
                    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
                    try {
                        const stats = await db.getStats();
                        if (stats) {
                            // –§—É–Ω–∫—Ü–∏—è getStats() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª—è–º–∏ totalMembers, totalCars –∏ —Ç.–¥.
                            const totalMembers = stats.totalMembers || 0;
                            const totalCars = stats.totalCars || 0;
                            statusMessage += `‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≤ –ë–î: ‚úÖ ${totalMembers}\n`;
                            statusMessage += `‚Ä¢ –ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –≤ –ë–î: ‚úÖ ${totalCars}\n`;
                        } else {
                            statusMessage += `‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î: ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n`;
                        }
                    } catch (dbError) {
                        statusMessage += `‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î: ‚ùå –û—à–∏–±–∫–∞ (${dbError.message})\n`;
                    }
                    
                    statusMessage += '\n';
                    
                    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram API
                    statusMessage += 'üì° Telegram Bot API:\n';
                    try {
                        const me = await bot.getMe();
                        statusMessage += `‚Ä¢ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: ‚úÖ @${me.username}\n`;
                        statusMessage += `‚Ä¢ ID –±–æ—Ç–∞: ${me.id}\n`;
                    } catch (telegramError) {
                        statusMessage += `‚Ä¢ Telegram API: ‚ùå –û—à–∏–±–∫–∞ (${telegramError.message})\n`;
                    }
                    
                    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–ª–µ–Ω—Å—Ç–≤–∞ –≤ –≥—Ä—É–ø–ø–µ
                    try {
                        const botMember = await bot.getChatMember(config.CHAT_ID, (await bot.getMe()).id);
                        statusMessage += `‚Ä¢ –°—Ç–∞—Ç—É—Å –≤ –≥—Ä—É–ø–ø–µ: ${botMember.status === 'administrator' ? '‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : 
                                                            botMember.status === 'member' ? '‚ö†Ô∏è –£—á–∞—Å—Ç–Ω–∏–∫ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∞–¥–º–∏–Ω)' : 
                                                            '‚ùå ' + botMember.status}\n`;
                    } catch (groupError) {
                        statusMessage += `‚Ä¢ –°—Ç–∞—Ç—É—Å –≤ –≥—Ä—É–ø–ø–µ: ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ (${groupError.message})\n`;
                    }
                    
                    statusMessage += '\n';
                    
                    // 5. –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    statusMessage += 'üíª –°–∏—Å—Ç–µ–º–∞:\n';
                    statusMessage += `‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${Math.floor(process.uptime())} —Å–µ–∫\n`;
                    statusMessage += `‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${Math.round(process.memoryUsage().heapUsed / 1024 / 1024)} MB\n`;
                    statusMessage += `‚Ä¢ Node.js –≤–µ—Ä—Å–∏—è: ${process.version}\n`;
                    statusMessage += `‚Ä¢ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${process.platform}\n\n`;
                    
                            // 6. –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        statusMessage += 'üìÅ –§–∞–π–ª—ã:\n';
        const fs = require('fs');
        const membersDir = config.UPLOADS.membersPath;
        const carsDir = config.UPLOADS.carsPath;
        
        statusMessage += `‚Ä¢ –ü–∞–ø–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${fs.existsSync(membersDir) ? '‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞'}\n`;
        statusMessage += `‚Ä¢ –ü–∞–ø–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: ${fs.existsSync(carsDir) ? '‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞'}\n`;
        statusMessage += `‚Ä¢ –ü—É—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${membersDir}\n`;
        statusMessage += `‚Ä¢ –ü—É—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: ${carsDir}\n`;
                    
                    if (fs.existsSync(membersDir)) {
                        const memberFiles = fs.readdirSync(membersDir).length;
                        statusMessage += `‚Ä¢ –§–æ—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${memberFiles} —Ñ–∞–π–ª–æ–≤\n`;
                    }
                    
                    if (fs.existsSync(carsDir)) {
                        const carFiles = fs.readdirSync(carsDir).length;
                        statusMessage += `‚Ä¢ –§–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: ${carFiles} —Ñ–∞–π–ª–æ–≤\n`;
                    }
                    
                    statusMessage += '\n';
                    
                    // 7. –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
                    statusMessage += 'üë• –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:\n';
                    statusMessage += `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π: ${userStates.size}\n`;
                    statusMessage += `‚Ä¢ –ó–∞–ø—Ä–æ—Å –æ—Ç –∞–¥–º–∏–Ω–∞: ‚úÖ ${callbackQuery.from.first_name} (ID: ${userId})\n`;
                    
                    statusMessage += `\nüìÖ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ${new Date().toLocaleString('ru-RU')}`;
                    
                    const callbackStatusKeyboard = addBackToMenuButton({});
                    bot.sendMessage(msg.chat.id, statusMessage, { 
                        parse_mode: 'Markdown',
                        ...callbackStatusKeyboard 
                    });
                    
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ callback admin_status:', error);
                    bot.sendMessage(msg.chat.id, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã: ${error.message}`);
                }
                break;
                
            case 'admin_test':
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
                if (!isAdmin(userId)) {
                    bot.answerCallbackQuery(callbackQuery.id, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
                    return;
                }
                
                const callbackAdminTestKeyboard = addBackToMenuButton({});
                bot.sendMessage(msg.chat.id, 
                    `‚úÖ –ê–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã!\n\n` +
                    `üë§ –í–∞—à ID: ${userId}\n` +
                    `üîß –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤: ${ADMIN_IDS.join(', ')}\n` +
                    `üìä –°—Ç–∞—Ç—É—Å: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n` +
                    `üéõÔ∏è –î–æ—Å—Ç—É–ø: –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞`,
                    { 
                        parse_mode: 'Markdown',
                        ...callbackAdminTestKeyboard 
                    }
                );
                break;
                
            case 'notification_settings':
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
                if (!isAdmin(userId)) {
                    bot.answerCallbackQuery(callbackQuery.id, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
                    return;
                }
                
                const notificationStatus = optionsManager.getNotificationStatus();
                const notificationKeyboard = addBackToMenuButton({});
                
                bot.sendMessage(msg.chat.id, 
                    `üîï –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n` +
                    `${notificationStatus}\n\n` +
                    `üí° –ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n` +
                    `1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª options.json –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞\n` +
                    `2Ô∏è‚É£ –ò–∑–º–µ–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è enabled: 1 (–≤–∫–ª—é—á–µ–Ω–æ) –∏–ª–∏ 0 (–≤—ã–∫–ª—é—á–µ–Ω–æ)\n` +
                    `3Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n` +
                    `üìù –ü—Ä–∏–º–µ—Ä:\n` +
                    `"new_invitation": {"enabled": 0} - –æ—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è\n` +
                    `"new_member": {"enabled": 1} - –≤–∫–ª—é—á–∏—Ç—å –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`,
                    { 
                        parse_mode: 'Markdown',
                        ...notificationKeyboard 
                    }
                );
                break;

            case 'auth_logs':
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
                if (!isAdmin(userId)) {
                    bot.answerCallbackQuery(callbackQuery.id, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
                    return;
                }
                
                try {
                    const authStats = await db.getAuthStats();
                    
                    let logText = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ\n\n`;
                    logText += `üìà –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: ${authStats.totalAttempts}\n`;
                    logText += `‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: ${authStats.successfulAttempts}\n`;
                    logText += `‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${authStats.failedAttempts}\n`;
                    logText += `üë• –û—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${authStats.memberAttempts}\n`;
                    logText += `üë§ –û—Ç –Ω–µ-—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${authStats.nonMemberAttempts}\n`;
                    logText += `üî¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${authStats.uniqueUsers}\n\n`;
                    
                    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ª–æ–≥–æ–≤
                    const recentLogs = await db.getAuthLogs(10);
                    
                    if (recentLogs.length > 0) {
                        logText += `üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏:\n\n`;
                        
                        recentLogs.forEach((log, index) => {
                            const date = new Date(log.auth_date).toLocaleString('ru-RU');
                            const statusIcon = log.status === 'success' ? '‚úÖ' : '‚ùå';
                            const memberIcon = log.is_member ? 'üë•' : 'üë§';
                            
                            logText += `${index + 1}. ${statusIcon} ${memberIcon} `;
                            logText += `${log.first_name || 'N/A'}`;
                            if (log.username) logText += ` (@${log.username})`;
                            logText += `\n   üìÖ ${date}`;
                            if (log.notes) logText += `\n   üìù ${log.notes}`;
                            logText += `\n\n`;
                        });
                    } else {
                        logText += `üìù –õ–æ–≥–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç.\n\n`;
                    }
                    
                    logText += `üåê –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: https://c.cabrioride.by/backend/log_auth.php`;
                    
                    const authLogsKeyboard = addBackToMenuButton({});
                    bot.sendMessage(msg.chat.id, logText, { 
                        parse_mode: 'Markdown',
                        ...authLogsKeyboard 
                    });
                    
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
                    bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.');
                }
                break;
                
            case 'admin_setpass':
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
                if (!isAdmin(userId)) {
                    bot.answerCallbackQuery(callbackQuery.id, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
                    return;
                }
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
                userStates.set(userId, { 
                    state: 'setting_password', 
                    step: 'enter_password',
                    data: {}
                });
                
                const currentStatus = isPasswordActive() ? 
                    `\nüîê –¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –∞–∫—Ç–∏–≤–µ–Ω (‚âà${getPasswordTimeLeft()} –º–∏–Ω. –æ—Å—Ç–∞–ª–æ—Å—å)` : 
                    '\n‚ö™ –ü–∞—Ä–æ–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
                
                bot.sendMessage(msg.chat.id, 
                    'üîê –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è\n\n' +
                    'üìã –≠—Ç–æ—Ç –ø–∞—Ä–æ–ª—å –ø–æ–∑–≤–æ–ª–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å "–∞–∫—Ç–∏–≤–Ω—ã–π" —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.\n\n' +
                    '‚ö° –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞—Ä–æ–ª—é:\n' +
                    '‚Ä¢ –ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤\n' +
                    '‚Ä¢ –í—Ä–µ–º—è –∂–∏–∑–Ω–∏: 10 –º–∏–Ω—É—Ç\n' +
                    '‚Ä¢ –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "—É—á–∞—Å—Ç–Ω–∏–∫" –∏–ª–∏ "–±–µ–∑ –∞–≤—Ç–æ"\n\n' +
                    currentStatus + '\n\n' +
                    '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:',
                    { parse_mode: 'Markdown' }
                );
                break;
                
            case 'continue_invitation':
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
                const userStateForContinueInvitation = userStates.get(userId);
                if (userStateForContinueInvitation && 
                    userStateForContinueInvitation.state === 'creating_invitation' && 
                    userStateForContinueInvitation.step === 'confirm_duplicate') {
                    
                    userStateForContinueInvitation.step = 'photos';
                    userStates.set(userId, userStateForContinueInvitation);
                    
                    const invitationPhotosKeyboard = {
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    { text: '‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ñ–æ—Ç–æ', callback_data: 'finish_photos' },
                                    { text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ', callback_data: 'skip_step' }
                                ]
                            ]
                        }
                    };
                    
                    bot.sendMessage(msg.chat.id, 
                        `üî¢ –ù–æ–º–µ—Ä: ${userStateForContinueInvitation.data.reg_number} ‚úÖ\n\n` +
                        'üì∏ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å\n' +
                        '–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ª—É—á—à–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≤—Å—Ç—Ä–µ—á–µ.\n\n' +
                        '‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π',
                        { 
                            parse_mode: 'Markdown',
                            ...invitationPhotosKeyboard 
                        }
                    );
                }
                break;
                
            case 'cancel_invitation':
                // –û—Ç–º–µ–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
                const userStateForCancelInvitation = userStates.get(userId);
                if (userStateForCancelInvitation && 
                    userStateForCancelInvitation.state === 'creating_invitation' && 
                    userStateForCancelInvitation.step === 'confirm_duplicate') {
                    
                    userStates.delete(userId);
                    
                    const cancelKeyboard = addBackToMenuButton({});
                    bot.sendMessage(msg.chat.id, 
                        '‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ\n\n' +
                        '–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
                        { 
                            parse_mode: 'Markdown',
                            ...cancelKeyboard 
                        }
                    );
                }
                break;
                
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
            case 'status_–Ω–æ–≤—ã–π':
            case 'status_–±–µ–∑ –∞–≤—Ç–æ':
            case 'status_—É—á–∞—Å—Ç–Ω–∏–∫':
            case 'status_–∞–∫—Ç–∏–≤–Ω—ã–π':
            case 'status_–≤—ã—à–µ–ª':
            case 'status_–±–∞–Ω':
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
                if (!isAdmin(userId)) {
                    bot.answerCallbackQuery(callbackQuery.id, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
                    return;
                }
                
                const userStateForStatus = userStates.get(userId);
                if (userStateForStatus && userStateForStatus.state === 'setting_user_status') {
                    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ callback_data
                    const selectedStatus = data.replace('status_', '');
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                    userStateForStatus.data.selectedStatus = selectedStatus;
                    userStateForStatus.step = 'enter_username';
                    userStates.set(userId, userStateForStatus);
                    
                    const statusIcon = selectedStatus === '–∞–∫—Ç–∏–≤–Ω—ã–π' ? '‚úÖ' : 
                                     selectedStatus === '–Ω–æ–≤—ã–π' ? 'üÜï' : 
                                     selectedStatus === '–±–µ–∑ –∞–≤—Ç–æ' ? '‚ö™' : 
                                     selectedStatus === '—É—á–∞—Å—Ç–Ω–∏–∫' ? '‚ö™' : 
                                     selectedStatus === '–±–∞–Ω' ? 'üö´' : 'üö´';
                    
                    bot.sendMessage(msg.chat.id, 
                        `üîß –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n` +
                        `üìã –®–∞–≥ 2 –∏–∑ 2: –í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n` +
                        `${statusIcon} –í—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: **${selectedStatus}**\n\n` +
                        `üë§ –í–≤–µ–¥–∏—Ç–µ Telegram username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ @):\n` +
                        `–ù–∞–ø—Ä–∏–º–µ—Ä: ivan_petrov –∏–ª–∏ @ivan_petrov\n\n` +
                        `‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel`, 
                        { parse_mode: 'Markdown' }
                    );
                }
                break;
                
            case 'cancel_status_change':
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
                if (!isAdmin(userId)) {
                    bot.answerCallbackQuery(callbackQuery.id, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
                    return;
                }
                
                userStates.delete(userId);
                
                const cancelKeyboard = addBackToMenuButton({});
                bot.sendMessage(msg.chat.id, 
                    '‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ\n\n' +
                    '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /setuserstatus',
                    { 
                        parse_mode: 'Markdown',
                        ...cancelKeyboard 
                    }
                                 );
                 break;
                 
             case 'confirm_status_change':
                 // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
                 if (!isAdmin(userId)) {
                     bot.answerCallbackQuery(callbackQuery.id, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
                     return;
                 }
                 
                 const userStateForConfirm = userStates.get(userId);
                 if (userStateForConfirm && userStateForConfirm.state === 'setting_user_status' && 
                     userStateForConfirm.step === 'confirm') {
                     
                     const targetMember = userStateForConfirm.data.targetMember;
                     const selectedStatus = userStateForConfirm.data.selectedStatus;
                     const adminName = msg.from?.first_name || '–ê–¥–º–∏–Ω';
                     
                     // –í—ã–ø–æ–ª–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                     const result = await db.updateMemberStatus(targetMember.telegram_id, selectedStatus, userId);
                     
                     userStates.delete(userId);
                     
                     if (result.success) {
                         const member = result.member;
                         const statusIcon = selectedStatus === '–∞–∫—Ç–∏–≤–Ω—ã–π' ? '‚úÖ' : 
                                          selectedStatus === '–Ω–æ–≤—ã–π' ? 'üÜï' : 
                                          selectedStatus === '–±–µ–∑ –∞–≤—Ç–æ' ? '‚ö™' : 
                                          selectedStatus === '—É—á–∞—Å—Ç–Ω–∏–∫' ? '‚ö™' : 
                                          selectedStatus === '–±–∞–Ω' ? 'üö´' : 'üö´';
                         
                         let successText = `‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω—ë–Ω —É—Å–ø–µ—à–Ω–æ!\n\n`;
                         successText += `üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** ${member.first_name}`;
                         if (member.last_name) successText += ` ${member.last_name}`;
                         successText += `\nüì± **Username:** @${member.nickname}`;
                         successText += `\nüìä **–°—Ç–∞—Ä—ã–π —Å—Ç–∞—Ç—É—Å:** ${member.old_status}`;
                         successText += `\nüîÑ **–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:** ${statusIcon} ${member.new_status}`;
                         successText += `\nüë®‚Äçüíº **–ò–∑–º–µ–Ω–∏–ª:** ${adminName}`;
                         successText += `\nüìÖ **–í—Ä–µ–º—è:** ${new Date().toLocaleString('ru-RU')}`;
                         
                         const successKeyboard = addBackToMenuButton({});
                         bot.sendMessage(msg.chat.id, successText, { 
                             parse_mode: 'Markdown',
                             ...successKeyboard 
                         });
                         
                         // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É
                         console.log(`‚úÖ –°—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω: ${member.first_name} (${member.old_status} ‚Üí ${member.new_status})`);
                         
                     } else {
                         const errorKeyboard = addBackToMenuButton({});
                         bot.sendMessage(msg.chat.id, 
                             `‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞\n\n` +
                             `üìù –ü—Ä–∏—á–∏–Ω–∞: ${result.message}\n\n` +
                             `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`,
                             { 
                                 parse_mode: 'Markdown',
                                 ...errorKeyboard 
                             }
                         );
                     }
                 }
                 break;
                 
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
            case 'edit_first_name':
                await startEditField(msg, userId, 'first_name', 'üë§ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏', '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:', true);
                break;
                
            case 'edit_last_name':
                await startEditField(msg, userId, 'last_name', 'üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–∞–º–∏–ª–∏–∏', '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ñ–∞–º–∏–ª–∏—é (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è):');
                break;
                
            case 'edit_birth_date':
                await startEditField(msg, userId, 'birth_date', 'üéÇ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è', '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990):');
                break;
                
            case 'edit_city':
                await startEditField(msg, userId, 'city', 'üèôÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞', '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è):');
                break;
                
            case 'edit_country':
                await startEditField(msg, userId, 'country', 'üåç –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã', '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω—É (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è):');
                break;
                
            case 'edit_phone':
                await startEditField(msg, userId, 'phone', 'üì± –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞', '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è):');
                break;
                
            case 'edit_about':
                await startEditField(msg, userId, 'about', 'üí≠ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è', '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è):');
                break;
                
            case 'edit_photo':
                await startEditPhoto(msg, userId);
                break;
                
            case 'delete_photo':
                await deleteProfilePhoto(msg, userId);
                break;
                
            default:
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º callback_data –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
                // –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –ø–æ—Ç–æ–º –æ–±—â–∏–µ!
                if (data.startsWith('edit_car_brand_')) {
                    const carId = data.replace('edit_car_brand_', '');
                    await startEditCarField(msg, userId, carId, 'brand', 'üè≠ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Ä–∫–∏', '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', true);
                } else if (data.startsWith('edit_car_model_')) {
                    const carId = data.replace('edit_car_model_', '');
                    await startEditCarField(msg, userId, carId, 'model', 'üöó –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏', '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', true);
                } else if (data.startsWith('edit_car_generation_')) {
                    const carId = data.replace('edit_car_generation_', '');
                    await startEditCarField(msg, userId, carId, 'generation', 'üìã –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∫–æ–ª–µ–Ω–∏—è', '–í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:');
                } else if (data.startsWith('edit_car_year_')) {
                    const carId = data.replace('edit_car_year_', '');
                    await startEditCarField(msg, userId, carId, 'year', 'üìÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ–¥–∞', '–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', true);
                } else if (data.startsWith('edit_car_reg_number_')) {
                    const carId = data.replace('edit_car_reg_number_', '');
                    await startEditCarField(msg, userId, carId, 'reg_number', 'üî¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞', '–í–≤–µ–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è:');
                } else if (data.startsWith('edit_car_color_')) {
                    const carId = data.replace('edit_car_color_', '');
                    await startEditCarField(msg, userId, carId, 'color', 'üé® –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞', '–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è:');
                } else if (data.startsWith('edit_car_description_')) {
                    const carId = data.replace('edit_car_description_', '');
                    await startEditCarField(msg, userId, carId, 'description', 'üí≠ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è', '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:');
                } else if (data.startsWith('edit_car_add_photo_')) {
                    const carId = data.replace('edit_car_add_photo_', '');
                    await startEditCarPhoto(msg, userId, carId);
                } else if (data.startsWith('edit_car_delete_photo_')) {
                    const carId = data.replace('edit_car_delete_photo_', '');
                    await showDeleteCarPhotoMenu(msg, userId, carId);
                } else if (data === 'continue_adding_photos') {
                    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ - –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∫ –µ—Å—Ç—å
                    bot.sendMessage(msg.chat.id, 
                        'üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n\n' +
                        'üí° –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –ø–æ–¥—Ä—è–¥!',
                        { parse_mode: 'Markdown' }
                    );
                } else if (data.startsWith('delete_car_photo_') && !data.includes('except_main')) {
                    // –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–æ—Ç–æ: delete_car_photo_123_0
                    const parts = data.replace('delete_car_photo_', '').split('_');
                    const carId = parts[0];
                    const photoIndex = parseInt(parts[1]);
                    await deleteCarPhoto(msg, userId, carId, photoIndex);
                } else if (data.startsWith('delete_car_photos_except_main_')) {
                    // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–æ—Ç–æ –∫—Ä–æ–º–µ –≥–ª–∞–≤–Ω–æ–≥–æ
                    const carId = data.replace('delete_car_photos_except_main_', '');
                    await deleteCarPhotosExceptMain(msg, userId, carId);
                } else if (data.startsWith('delete_car_') && !data.includes('photo')) {
                    // –£–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
                    const carId = data.replace('delete_car_', '');
                    await showDeleteCarConfirmation(msg, userId, carId);
                } else if (data.startsWith('confirm_delete_car_')) {
                    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
                    const carId = data.replace('confirm_delete_car_', '');
                    await deleteCarCompletely(msg, userId, carId);
                } else if (data.startsWith('sell_car_')) {
                    // –ü—Ä–æ–¥–∞–∂–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                    const carId = data.replace('sell_car_', '');
                    await showSellCarConfirmation(msg, userId, carId);
                } else if (data.startsWith('confirm_sell_car_')) {
                    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
                    const carId = data.replace('confirm_sell_car_', '');
                    await sellCarCompletely(msg, userId, carId);
                } else if (data.startsWith('edit_car_')) {
                    // –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–û–°–õ–ï–î–ù–ò–ú!
                    const carId = data.replace('edit_car_', '');
                    // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ –µ—Å–ª–∏ –æ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ
                    const userState = userStates.get(userId);
                    if (userState && userState.state === 'editing_car' && userState.step === 'add_photo') {
                        userStates.delete(userId);
                    }
                    await showEditCarMenu(msg, userId, carId);
                } else {
                    bot.answerCallbackQuery(callbackQuery.id, '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
                }
        }
        
        bot.answerCallbackQuery(callbackQuery.id);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:', error);
        bot.answerCallbackQuery(callbackQuery.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –≥—Ä—É–ø–ø—ã

// 1. –ö–æ–≥–¥–∞ –±–æ—Ç–∞ –¥–æ–±–∞–≤–ª—è—é—Ç –≤ –≥—Ä—É–ø–ø—É
bot.on('my_chat_member', async (update) => {
    try {
        const { chat, new_chat_member } = update;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à –±–æ—Ç –∏ –µ–≥–æ –¥–æ–±–∞–≤–∏–ª–∏ –≤ –≥—Ä—É–ø–ø—É
        if (new_chat_member.user.id === (await bot.getMe()).id && 
            new_chat_member.status === 'member') {
            
            console.log('üîç –û—Ç–ª–∞–¥–∫–∞ my_chat_member:');
            console.log('Chat ID –∏–∑ —Å–æ–±—ã—Ç–∏—è:', chat.id);
            console.log('Chat ID –∏–∑ config:', config.CHAT_ID);
            console.log('–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:', chat.title);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ª–∏ –Ω–∞—à–∞ –≥—Ä—É–ø–ø–∞
            if (chat.id.toString() === config.CHAT_ID.toString()) {
                // –≠—Ç–æ –Ω–∞—à–∞ –≥—Ä—É–ø–ø–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
                const welcomeMessage = `ü§ñ –ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!\n\n` +
                    `–Ø –±–æ—Ç –∫–ª—É–±–∞ –∫–∞–±—Ä–∏–æ–ª–µ—Ç–æ–≤! üöóüí®\n\n` +
                    `–ú–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏:\n` +
                    `‚Ä¢ üë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª—É–±–∞\n` +
                    `‚Ä¢ üöó –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n` +
                    `‚Ä¢ üéØ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n` +
                    `‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–ª—É–±–∞\n` +
                    `‚Ä¢ üîç –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ –Ω–æ–º–µ—Ä–∞–º\n\n` +
                    `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª—É–±! üéâ`;
                
                await bot.sendMessage(chat.id, welcomeMessage, { parse_mode: 'Markdown' });
                console.log('‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É');
            } else {
                // –≠—Ç–æ —á—É–∂–∞—è –≥—Ä—É–ø–ø–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –±–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–∞–±—Ä–∏–æ–ª–µ—Ç—á–∏–∫–æ–≤
                const wrongGroupMessage = `ü§ñ –ü—Ä–∏–≤–µ—Ç!\n\n` +
                    `–Ø –±–æ—Ç –∫–ª—É–±–∞ –∫–∞–±—Ä–∏–æ–ª–µ—Ç–æ–≤, –Ω–æ —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø—ã.\n\n` +
                    `üöó –ï—Å–ª–∏ –≤—ã –ª—é–±–∏—Ç–µ–ª—å –∫–∞–±—Ä–∏–æ–ª–µ—Ç–æ–≤, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞–º:\n` +
                    `üë• [${config.CLUB.groupLink}](${config.CLUB.groupLink})\n\n` +
                    `–¢–∞–º –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n` +
                    `‚Ä¢ –û–±—â–∞—Ç—å—Å—è —Å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞–º–∏\n` +
                    `‚Ä¢ –î–µ–ª–∏—Ç—å—Å—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ —Å–≤–æ–∏—Ö –∞–≤—Ç–æ\n` +
                    `‚Ä¢ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≤—Å—Ç—Ä–µ—á–∞—Ö –∏ –ø–æ–µ–∑–¥–∫–∞—Ö\n` +
                    `‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞\n\n` +
                    `–î–æ –≤—Å—Ç—Ä–µ—á–∏ –≤ –∫–ª—É–±–µ! üéâ`;
                
                await bot.sendMessage(chat.id, wrongGroupMessage, { parse_mode: 'Markdown' });
                console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≥—Ä—É–ø–ø–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
                
                // –ü–æ–∫–∏–¥–∞–µ–º –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
                setTimeout(async () => {
                    try {
                        await bot.leaveChat(chat.id);
                        console.log('üö™ –ü–æ–∫–∏–Ω—É–ª–∏ —á—É–∂—É—é –≥—Ä—É–ø–ø—É:', chat.title);
                    } catch (error) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∏–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã:', error.message);
                    }
                }, 5000); // 5 —Å–µ–∫—É–Ω–¥ –∑–∞–¥–µ—Ä–∂–∫–∏
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É:', error);
    }
});

// 2. –ö–æ–≥–¥–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–±–∞–≤–ª—è—é—Ç –≤ –≥—Ä—É–ø–ø—É
bot.on('new_chat_members', async (msg) => {
    try {
        const { chat, new_chat_members } = msg;
        
        console.log('üîç DEBUG new_chat_members START');
        console.log('Chat ID –∏–∑ —Å–æ–±—ã—Ç–∏—è:', chat.id);
        console.log('Chat ID –∏–∑ config:', config.CHAT_ID);
        console.log('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ:', chat.id.toString(), '===', config.CHAT_ID.toString());
        console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', new_chat_members?.length);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à–∞ –≥—Ä—É–ø–ø–∞
        if (chat.id.toString() !== config.CHAT_ID.toString()) {
            console.log('‚ùå ID –≥—Ä—É–ø–ø—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏–µ');
            console.log('–≠—Ç–æ –Ω–µ –Ω–∞—à–∞ –≥—Ä—É–ø–ø–∞:', chat.title, 'ID:', chat.id);
            return;
        }
        
        console.log('‚úÖ ID –≥—Ä—É–ø–ø—ã —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');
        
        for (const newMember of new_chat_members) {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–æ–≤
            if (newMember.is_bot) {
                console.log('ü§ñ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞:', newMember.first_name);
                continue;
            }
            
            console.log('üë§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞:', newMember.first_name, 'ID:', newMember.id);
            
            const firstName = newMember.first_name;
            const username = newMember.username ? `@${newMember.username}` : '';
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ —Ä–∞–Ω—å—à–µ –≤ –∫–ª—É–±–µ
            const existingMember = await db.getMemberByTelegramId(newMember.id);
            
            if (existingMember && existingMember.status === '–≤—ã—à–µ–ª') {
                // –£—á–∞—Å—Ç–Ω–∏–∫ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –∫–ª—É–±
                console.log('üîÑ –£—á–∞—Å—Ç–Ω–∏–∫ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –∫–ª—É–±:', firstName);
                
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —É—á–∞—Å—Ç–Ω–∏–∫–∞
                const cars = await db.getCarsByMemberId(existingMember.id);
                let restoredCarsCount = 0;
                
                for (const car of cars) {
                    if (car.status === '–≤—ã—à–µ–ª') {
                        await db.updateCar(car.id, { status: '–∞–∫—Ç–∏–≤–Ω—ã–π' });
                        restoredCarsCount++;
                        console.log(`üöó –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è: ${car.brand} ${car.model} -> "–∞–∫—Ç–∏–≤–Ω—ã–π"`);
                    }
                }
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞:
                // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ - "—É—á–∞—Å—Ç–Ω–∏–∫", –µ—Å–ª–∏ –Ω–µ—Ç - "–±–µ–∑ –∞–≤—Ç–æ"
                const newStatus = restoredCarsCount > 0 ? '—É—á–∞—Å—Ç–Ω–∏–∫' : '–±–µ–∑ –∞–≤—Ç–æ';
                
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞
                await db.updateMember(newMember.id, { 
                    status: newStatus,
                    left_date: null // –£–±–∏—Ä–∞–µ–º –¥–∞—Ç—É –≤—ã—Ö–æ–¥–∞
                });
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏
                const statusIcon = newStatus === '—É—á–∞—Å—Ç–Ω–∏–∫' ? '‚ö™' : '‚ö™';
                const returnMessage = `üéä –£—á–∞—Å—Ç–Ω–∏–∫ –≤–µ—Ä–Ω—É–ª—Å—è –≤ –∫–ª—É–±!\n\n` +
                    `${firstName}${username ? ` (${username})` : ''} —Å–Ω–æ–≤–∞ —Å –Ω–∞–º–∏!\n\n` +
                    `üìä –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: ${statusIcon} ${newStatus}\n` +
                    `üöó –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: ${restoredCarsCount}\n\n` +
                    `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞\n\n` +
                    `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ! ü§ó`;
                
                await sendGroupNotification(returnMessage);
                console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
                
            } else if (existingMember) {
                // –£—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ –µ—Å—Ç—å –≤ –ë–î —Å –¥—Ä—É–≥–∏–º —Å—Ç–∞—Ç—É—Å–æ–º
                console.log('‚ÑπÔ∏è –£—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º:', existingMember.status);
                
                const infoMessage = `üëã –£—á–∞—Å—Ç–Ω–∏–∫ –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥—Ä—É–ø–ø—É\n\n` +
                    `${firstName}${username ? ` (${username})` : ''} —Å–Ω–æ–≤–∞ –≤ —á–∞—Ç–µ!\n\n` +
                    `–°—Ç–∞—Ç—É—Å –≤ –∫–ª—É–±–µ: ${existingMember.status}`;
                
                await sendGroupNotification(infoMessage);
                
            } else {
                // –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫
                console.log('üë§ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞:', firstName);
                
                const welcomeMessage = `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª—É–± –∫–∞–±—Ä–∏–æ–ª–µ—Ç–æ–≤!\n\n` +
                    `–ü—Ä–∏–≤–µ—Ç, ${firstName}${username ? ` (${username})` : ''}!\n\n` +
                    `üöó –†–∞–¥—ã –≤–∏–¥–µ—Ç—å –Ω–æ–≤–æ–≥–æ –ª—é–±–∏—Ç–µ–ª—è –∫–∞–±—Ä–∏–æ–ª–µ—Ç–æ–≤ –≤ –Ω–∞—à–µ–º –∫–ª—É–±–µ!\n\n` +
                    `–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É [${config.CLUB.botLink}](${config.CLUB.botLink}) –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É start\n\n` +
                    `–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º! üëã`;
                
                await sendGroupNotification(welcomeMessage);
                console.log('‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
            }
        }
        
        console.log('üîç DEBUG new_chat_members END');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', error);
        console.log('üîç DEBUG new_chat_members ERROR END');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –≥—Ä—É–ø–ø—ã
bot.on('left_chat_member', async (msg) => {
    try {
        const { chat, left_chat_member } = msg;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à–∞ –≥—Ä—É–ø–ø–∞
        if (chat.id.toString() !== config.CHAT_ID.toString()) {
            console.log('‚ùå ID –≥—Ä—É–ø–ø—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤—ã—Ö–æ–¥–∞');
            return;
        }
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–æ–≤
        if (left_chat_member.is_bot) {
            console.log('ü§ñ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã—Ö–æ–¥ –±–æ—Ç–∞:', left_chat_member.first_name);
            return;
        }
        
        console.log('üëã –£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É:', left_chat_member.first_name, 'ID:', left_chat_member.id);
        
        // –ò—â–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const member = await db.getMemberByTelegramId(left_chat_member.id);
        
        if (member) {
            console.log('üìù –ù–∞–π–¥–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫ –≤ –ë–î, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–≤—ã—à–µ–ª"');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞
            await db.updateMember(left_chat_member.id, { 
                status: '–≤—ã—à–µ–ª',
                left_date: new Date().toISOString().split('T')[0] // –î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —É—á–∞—Å—Ç–Ω–∏–∫–∞
            const cars = await db.getCarsByMemberId(member.id);
            for (const car of cars) {
                if (car.status !== '–≤—ã—à–µ–ª') {
                    await db.updateCar(car.id, { status: '–≤—ã—à–µ–ª' });
                    console.log(`üöó –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è: ${car.brand} ${car.model} -> "–≤—ã—à–µ–ª"`);
                }
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
            const firstName = left_chat_member.first_name;
            const username = left_chat_member.username ? `@${left_chat_member.username}` : '';
            
            const farewellMessage = `üòî –£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª –∫–ª—É–±\n\n` +
                `${firstName}${username ? ` (${username})` : ''} –ø–æ–∫–∏–Ω—É–ª –Ω–∞—à –∫–ª—É–±.\n\n` +
                `üöó –ê–≤—Ç–æ–º–æ–±–∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (${cars.length}) –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ —Å—Ç–∞—Ç—É—Å "–≤—ã—à–µ–ª"\n\n` +
                `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞\n\n` +
                `–ù–∞–¥–µ–µ–º—Å—è –Ω–∞ —Å–∫–æ—Ä–æ–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ! ü§û`;
            
            await sendGroupNotification(farewellMessage);
            console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã—Ö–æ–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
            
        } else {
            console.log('‚ÑπÔ∏è –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ –±—ã–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã—Ö–æ–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
    }
});

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function showUserProfile(msg, userId) {
    try {
        console.log(`üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: ${userId}`);
        const member = await db.getMemberByTelegramId(userId);
        
        if (!member) {
            console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
            const keyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data: 'register' }],
                        [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
                    ]
                }
            };
            
            bot.sendMessage(msg.chat.id, 
                '‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∫–ª—É–±–µ\n\n' +
                'üöó –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n' +
                'üëá –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', 
                { 
                    parse_mode: 'Markdown',
                    ...keyboard 
                }
            );
            return;
        }
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ "–Ω–æ–≤—ã–π"
        if (member.status === '–Ω–æ–≤—ã–π') {
            const newUserKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üìù –ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', callback_data: 'register' }],
                        [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
                    ]
                }
            };
            
            let newUserText = `üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n`;
            newUserText += `üÜï **–°—Ç–∞—Ç—É—Å: –Ω–æ–≤—ã–π**\n`;
            newUserText += `üì± Telegram: ${member.first_name}`;
            if (member.nickname) newUserText += ` (@${member.nickname})`;
            newUserText += `\nüìÖ –î–∞—Ç–∞ –≤—Ö–æ–¥–∞ –≤ –≥—Ä—É–ø–ø—É: ${formatDate(member.join_date)}\n\n`;
            newUserText += `‚ö†Ô∏è **–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–ª—É–± –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é**\n\n`;
            newUserText += `üìã –ü—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã –∑–∞–ø–æ–ª–Ω–∏—Ç–µ:\n`;
            newUserText += `‚Ä¢ –ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—é\n`;
            newUserText += `‚Ä¢ –î–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è\n`;
            newUserText += `‚Ä¢ –ì–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è\n`;
            newUserText += `‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω\n`;
            newUserText += `‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–æ—Ñ–∏–ª—è\n\n`;
            newUserText += `‚ú® –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å—Ç–∞—Ç—É—Å "–±–µ–∑ –∞–≤—Ç–æ" –∏ —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª–∏!`;
            
            bot.sendMessage(msg.chat.id, newUserText, { 
                parse_mode: 'Markdown', 
                ...newUserKeyboard 
            });
            return;
        }
        
        // –û–±—ã—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        let profileText = `üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n`;
        profileText += `–ò–º—è: ${member.first_name}`;
        if (member.last_name) profileText += ` ${member.last_name}`;
        profileText += `\n–°—Ç–∞—Ç—É—Å: ${member.status}`;
        profileText += `\n–î–∞—Ç–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è: ${formatDate(member.join_date)}`;
        if (member.left_date) profileText += `\n–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞: ${formatDate(member.left_date)}`;
        
        if (member.nickname) profileText += `\n–ù–∏–∫–Ω–µ–π–º: ${member.nickname}`;
        if (member.alias) profileText += `\n–ü–æ–∑—ã–≤–Ω–æ–π: ${member.alias}`;
        if (member.city) profileText += `\n–ì–æ—Ä–æ–¥: ${member.city}`;
        if (member.country) profileText += `\n–°—Ç—Ä–∞–Ω–∞: ${member.country}`;
        if (member.phone) profileText += `\n–¢–µ–ª–µ—Ñ–æ–Ω: ${member.phone}`;
        if (member.about) profileText += `\n\n–û —Å–µ–±–µ: ${member.about}`;
        
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—Å–µ –∫–Ω–æ–ø–∫–∏ –ø–æ –æ–¥–Ω–æ–π –≤ —Å—Ç—Ä–æ–∫—É)
        const keyboard = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'edit_profile' }]
                ]
            }
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å" –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "—É—á–∞—Å—Ç–Ω–∏–∫" –∏–ª–∏ "–±–µ–∑ –∞–≤—Ç–æ"
        if ((member.status === '—É—á–∞—Å—Ç–Ω–∏–∫' || member.status === '–±–µ–∑ –∞–≤—Ç–æ') && member.status !== '–∞–∫—Ç–∏–≤–Ω—ã–π') {
            keyboard.reply_markup.inline_keyboard.push([
                { text: 'üéØ –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å', callback_data: 'get_active_status' }
            ]);
        }

        // –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
        keyboard.reply_markup.inline_keyboard.push([
            { text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }
        ]);
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ
        if (member.photo_url && member.photo_url.trim() !== '') {
            try {
                console.log('üë§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è:');
                console.log('   Photo URL from DB:', member.photo_url);
                
                const fs = require('fs');
                const path = require('path');
                const photoPath = path.resolve(config.UPLOADS.membersPath, member.photo_url);
                console.log('   Resolved Photo Path:', photoPath);
                console.log('   File exists:', fs.existsSync(photoPath));
                
                if (fs.existsSync(photoPath)) {
                    console.log('   –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è...');
                    const photoStream = fs.createReadStream(photoPath);
                    await bot.sendPhoto(msg.chat.id, photoStream, {
                        caption: profileText,
                        parse_mode: 'Markdown',
                        ...keyboard
                    }, {
                        contentType: 'image/jpeg'
                    });
                    console.log('   ‚úÖ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
                } else {
                    console.log('   ‚ùå –§–∞–π–ª —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
                    // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                    bot.sendMessage(msg.chat.id, profileText + '\n\nüì∑ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', {
                        parse_mode: 'Markdown', 
                        ...keyboard 
                    });
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è:');
                console.error('   Photo URL:', member.photo_url);
                console.error('   Error:', error);
                bot.sendMessage(msg.chat.id, profileText + '\n\nüì∑ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ', {
                    parse_mode: 'Markdown', 
                    ...keyboard 
                });
            }
        } else {
            // –ë–µ–∑ —Ñ–æ—Ç–æ
            bot.sendMessage(msg.chat.id, profileText, { 
                parse_mode: 'Markdown', 
                ...keyboard 
            });
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è:', error);
        bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è');
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function showUserCars(msg, userId) {
    try {
        console.log(`üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∞–≤—Ç–æ —Å ID: ${userId}`);
        const member = await db.getMemberByTelegramId(userId);
        
        if (!member) {
            console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∞–≤—Ç–æ`);
            const keyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data: 'register' }],
                        [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
                    ]
                }
            };
            
            bot.sendMessage(msg.chat.id, 
                '‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∫–ª—É–±–µ\n\n' +
                'üöó –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n' +
                'üëá –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', 
                { 
                    parse_mode: 'Markdown',
                    ...keyboard 
                }
            );
            return;
        }
        
        const cars = await db.getCarsByMemberId(member.id);
        
        if (cars.length === 0) {
            const noCarsKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üìù –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ', callback_data: 'add_car' }],
                        [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
                    ]
                }
            };
            
            bot.sendMessage(msg.chat.id, 
                'üöó –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.\n\n' +
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üìù –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ" –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.',
                noCarsKeyboard
            );
            return;
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å —Ñ–æ—Ç–æ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        for (let i = 0; i < cars.length; i++) {
            const car = cars[i];
            
            let carText = `üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å ${i + 1} –∏–∑ ${cars.length}\n\n`;
            carText += `${car.brand} ${car.model}`;
            if (car.generation) carText += ` (${car.generation})`;
            carText += `\nüìÖ –ì–æ–¥: ${car.year}`;
            if (car.reg_number) carText += `\nüî¢ –ù–æ–º–µ—Ä: ${car.reg_number}`;
            if (car.color) carText += `\nüé® –¶–≤–µ—Ç: ${car.color}`;
            carText += `\nüìä –°—Ç–∞—Ç—É—Å: ${car.status}`;
            if (car.description) carText += `\nüí≠ ${car.description}`;
            
            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            const carKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ', callback_data: `edit_car_${car.id}` }],
                        [{ text: 'üí∏ –ü—Ä–æ–¥–∞—Ç—å –∞–≤—Ç–æ', callback_data: `sell_car_${car.id}` }]
                    ]
                }
            };
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            if (car.photos && car.photos.trim() !== '') {
                try {
                    const fs = require('fs');
                    const path = require('path');
                    const photos = JSON.parse(car.photos);
                    
                    if (photos && photos.length > 0) {
                        // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        const firstPhoto = photos[0];
                        const photoPath = path.resolve(config.UPLOADS.carsPath, firstPhoto);
                        
                        if (fs.existsSync(photoPath)) {
                            if (photos.length > 1) {
                                carText += `\nüì∑ –§–æ—Ç–æ: 1 –∏–∑ ${photos.length}`;
                            }
                            
                            const carPhotoStream = fs.createReadStream(photoPath);
                            await bot.sendPhoto(msg.chat.id, carPhotoStream, {
                                caption: carText,
                                parse_mode: 'Markdown',
                                ...carKeyboard
                            }, {
                                contentType: 'image/jpeg'
                            });
                        } else {
                            carText += `\nüì∑ –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`;
                            await bot.sendMessage(msg.chat.id, carText, { 
                                parse_mode: 'Markdown',
                                ...carKeyboard 
                            });
                        }
                    } else {
                        await bot.sendMessage(msg.chat.id, carText, { 
                            parse_mode: 'Markdown',
                            ...carKeyboard 
                        });
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', error);
                    carText += `\nüì∑ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ`;
                    await bot.sendMessage(msg.chat.id, carText, { 
                        parse_mode: 'Markdown',
                        ...carKeyboard 
                    });
                }
            } else {
                await bot.sendMessage(msg.chat.id, carText, { 
                    parse_mode: 'Markdown',
                    ...carKeyboard 
                });
            }
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            if (i < cars.length - 1) {
                await new Promise(resolve => setTimeout(resolve, 500));
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" –ø–æ—Å–ª–µ –≤—Å–µ—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        const backKeyboard = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
                ]
            }
        };
        
        bot.sendMessage(msg.chat.id, 'üîΩ –í—Å–µ –≤–∞—à–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã –≤—ã—à–µ', {
            parse_mode: 'Markdown',
            ...backKeyboard 
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:', error);
        bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π');
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function showStats(msg) {
    try {
        const stats = await db.getExtendedStats();
        
        if (!stats) {
            bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
            return;
        }
        
        let statsText = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª—É–±–∞\n\n`;
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏
        statsText += `üë• **–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–ª—É–±–∞:** ${stats.totalActiveMembers}\n`;
        statsText += `üÜï –ù–æ–≤—ã–µ: ${stats.–Ω–æ–≤—ã–π}\n`;
        statsText += `‚ö™ –ë–µ–∑ –∞–≤—Ç–æ: ${stats.–±–µ–∑_–∞–≤—Ç–æ}\n`;
        statsText += `‚ö™ –£—á–∞—Å—Ç–Ω–∏–∫–∏: ${stats.—É—á–∞—Å—Ç–Ω–∏–∫}\n`;
        statsText += `‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ: ${stats.–∞–∫—Ç–∏–≤–Ω—ã–π}\n\n`;
        
        // –ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        statsText += `üöó **–ê–≤—Ç–æ–º–æ–±–∏–ª–µ–π:** ${stats.totalCars}\n`;
        statsText += `üìÆ **–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π:** ${stats.totalInvitations}\n\n`;
        
        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
        if (stats.totalRestrictedMembers > 0) {
            statsText += `üö´ **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø:** ${stats.totalRestrictedMembers}\n`;
            if (stats.–≤—ã—à–µ–ª > 0) statsText += `üëã –í—ã—à–ª–∏: ${stats.–≤—ã—à–µ–ª}\n`;
            if (stats.–±–∞–Ω > 0) statsText += `üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã: ${stats.–±–∞–Ω}\n\n`;
        }
        
        // –û–±—â–∏–π –∏—Ç–æ–≥
        statsText += `üìà **–í—Å–µ–≥–æ –≤ —Å–∏—Å—Ç–µ–º–µ:** ${stats.totalMembers} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`;
        
        const statsKeyboard = addBackToMenuButton({});
        bot.sendMessage(msg.chat.id, statsText, { 
            parse_mode: 'Markdown',
            ...statsKeyboard 
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±-–¥–∞—à–±–æ—Ä–¥–∞
async function handleWebDashboard(msg, userId) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        const member = await db.getMemberByTelegramId(userId);
        
        if (!member) {
            bot.sendMessage(msg.chat.id, 
                '‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∫–ª—É–±–µ.\n' +
                '–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–µ–±-–¥–∞—à–±–æ—Ä–¥—É —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /register'
            );
            return;
        }
        
        if (member.status === '–≤—ã—à–µ–ª') {
            bot.sendMessage(msg.chat.id, 
                '‚ùå –í–∞—à —Å—Ç–∞—Ç—É—Å –≤ –∫–ª—É–±–µ: "–≤—ã—à–µ–ª".\n' +
                '–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–µ–±-–¥–∞—à–±–æ—Ä–¥—É –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.'
            );
            return;
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        const timestamp = Math.floor(Date.now() / 1000);
        const hash = require('crypto').createHmac('sha256', config.BOT_TOKEN)
            .update(`${userId}:${timestamp}`)
            .digest('hex');
        
        const authUrl = `https://club.cabrioride.by/auto-auth.html?user_id=${userId}&timestamp=${timestamp}&hash=${hash}`;
        
        const keyboard = {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üåê –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–¥–∞—à–±–æ—Ä–¥', url: authUrl }
                    ],
                    [
                        { text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'menu' }
                    ]
                ]
            }
        };
        
        bot.sendMessage(msg.chat.id, 
            `üåê –í–µ–±-–¥–∞—à–±–æ—Ä–¥ Cabrio Club\n\n` +
            `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${member.first_name}!\n\n` +
            `üéØ –ß—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –≤–µ–±-–¥–∞—à–±–æ—Ä–¥–µ:\n` +
            `‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª—É–±–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n` +
            `‚Ä¢ üë• –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —Ñ–æ—Ç–æ\n` +
            `‚Ä¢ üöó –ö–∞—Ç–∞–ª–æ–≥ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∫–ª—É–±–∞\n` +
            `‚Ä¢ üì® –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π\n` +
            `‚Ä¢ üîç –£–¥–æ–±–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫\n\n` +
            `üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:\n` +
            `‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram\n` +
            `‚Ä¢ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª—É–±–∞\n` +
            `‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n\n` +
            `üëÜ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤—Ö–æ–¥–∞:`,
            { 
                parse_mode: 'Markdown',
                ...keyboard 
            }
        );
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±-–¥–∞—à–±–æ—Ä–¥–∞:', error);
        bot.sendMessage(msg.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–µ–±-–¥–∞—à–±–æ—Ä–¥.');
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –ø–æ–º–æ—â–∏
async function showHelp(msg) {
    const userId = msg.from.id;
    const isUserAdmin = isAdmin(userId);
    
    let helpText = `‚ùì –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞\n\n` +
        `üöÄ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n` +
        `/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n` +
        `/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏\n` +
        `/register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –∫–ª—É–±–µ\n` +
        `/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n` +
        `üë§ –ü—Ä–æ—Ñ–∏–ª—å –∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏:\n` +
        `/profile - –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n` +
        `/cars - –ú–æ–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏\n` +
        `/addcar - –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å\n\n` +
        `üéØ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:\n` +
        `/invite - –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ\n` +
        `/myinvites - –ú–æ–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è\n` +
        `/search - –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É\n\n` +
        `üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n` +
        `/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª—É–±–∞\n\n` +
        `üîß –°–ª—É–∂–µ–±–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n` +
        `/skip - –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —à–∞–≥ (–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö)\n` +
        `/done - –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ\n`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
    if (isUserAdmin) {
        helpText += `\nüîí –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n` +
            `/status - –°–∏—Å—Ç–µ–º–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞\n` +
            `/admintest - –¢–µ—Å—Ç –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤\n`;
    }
    
    helpText += `\nüí° –°–æ–≤–µ—Ç: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏!\n\n` +
        `üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞:\n` +
        `–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≤ —á–∞—Ç–µ –∫–ª—É–±–∞.`;
    
    if (isUserAdmin) {
        helpText += `\n\nüîß –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞`;
    }
    
    const helpKeyboard = addBackToMenuButton({});
    bot.sendMessage(msg.chat.id, helpText, { 
        parse_mode: 'Markdown',
        ...helpKeyboard 
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
bot.on('message', async (msg) => {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã (–æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
    if (msg.text && msg.text.startsWith('/')) return;
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ñ–æ—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
    if (!msg.text) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø - —Ç–æ–ª—å–∫–æ —á–ª–µ–Ω—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–µ
    if (!await checkUserMembership(msg.from.id)) return;
    
    const userId = msg.from.id;
    const userState = userStates.get(userId);
    
    console.log(`üìù –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: "${msg.text}"`);
    console.log(`üó∫Ô∏è –†–∞–∑–º–µ—Ä userStates Map:`, userStates.size);
    console.log(`üîç –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, userState);
    console.log(`üîç –í—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:`, Array.from(userStates.entries()));
    
    if (!userState) {
        console.log(`‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        return; // –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    }
    
    try {
        if (userState.state === 'registration') {
            await handleRegistration(msg, userId, userState);
        } else if (userState.state === 'adding_car') {
            await handleAddCar(msg, userId, userState);
        } else if (userState.state === 'creating_invitation') {
            await handleCreateInvitation(msg, userId, userState);
        } else if (userState.state === 'searching') {
            await handleSearch(msg, userId, userState);
        } else if (userState.state === 'setting_user_status') {
            await handleSetUserStatus(msg, userId, userState);
        } else if (userState.state === 'setting_password') {
            await handlePasswordSetting(msg, userId, userState);
        } else if (userState.state === 'entering_password') {
            await handlePasswordEntering(msg, userId, userState);
        } else if (userState.state === 'editing_profile') {
            await handleEditProfile(msg, userId, userState);
        } else if (userState.state === 'editing_car') {
            await handleEditCar(msg, userId, userState);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        bot.sendMessage(msg.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
        userStates.delete(userId);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
bot.on('photo', async (msg) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if (!await checkChatMembership(msg.from.id)) return;
    
    const userId = msg.from.id;
    const userState = userStates.get(userId);
    
    if (!userState) {
        bot.sendMessage(msg.chat.id, 'üì∏ –ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ç–æ! –ù–æ —Å–µ–π—á–∞—Å —è –Ω–µ –∂–¥—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º.');
        return;
    }
    
    try {
        if (userState.state === 'registration') {
            await handlePhotoRegistration(msg, userId, userState);
        } else if (userState.state === 'adding_car') {
            await handleCarPhoto(msg, userId, userState);
        } else if (userState.state === 'creating_invitation') {
            await handleInvitationPhoto(msg, userId, userState);
        } else if (userState.state === 'editing_profile' && userState.step === 'enter_photo') {
            await handleEditProfilePhoto(msg, userId, userState);
        } else if (userState.state === 'editing_car' && userState.step === 'add_photo') {
            await handleEditCarPhoto(msg, userId, userState);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ:', error);
        bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async function handleRegistration(msg, userId, userState) {
    const step = userState.step;
    const data = userState.data || {};
    
    switch (step) {
        case 'name':
            data.first_name = msg.text.trim();
            userState.data = data;
            userState.step = 'last_name';
            userStates.set(userId, userState);
            
            const lastNameKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_step' }]
                    ]
                }
            };
            
            bot.sendMessage(msg.chat.id, 
                `–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, ${data.first_name}! üëã\n\n` +
                'üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:', 
                { 
                    parse_mode: 'Markdown',
                    ...lastNameKeyboard 
                }
            );
            break;
            
        case 'last_name':
            data.last_name = msg.text.trim();
            userState.data = data;
            userState.step = 'birth_date';
            userStates.set(userId, userState);
            
            const birthDateKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_step' }]
                    ]
                }
            };
            
            bot.sendMessage(msg.chat.id, 
                'üéÇ –®–∞–≥ 3 –∏–∑ 8: –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è\n\n' +
                '–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990)', 
                { 
                    parse_mode: 'Markdown',
                    ...birthDateKeyboard 
                }
            );
            break;
            
        case 'birth_date':
            const birthDateInput = msg.text.trim();
            
            console.log('üîç –û—Ç–ª–∞–¥–∫–∞ birth_date:');
            console.log('  –í–≤–µ–¥–µ–Ω–Ω–∞—è –¥–∞—Ç–∞:', birthDateInput);
            
            // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
            const birthDateValidation = validateBirthDate(birthDateInput);
            console.log('  –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', birthDateValidation);
            
            if (!birthDateValidation.valid) {
                bot.sendMessage(msg.chat.id, 
                    `‚ùå ${birthDateValidation.error}\n\n` +
                    'üéÇ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n' +
                    '–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990', 
                    { parse_mode: 'Markdown' }
                );
                return;
            }
            
            data.birth_date = birthDateValidation.date;
            console.log('  –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –¥–∞—Ç–∞:', data.birth_date);
            userState.data = data;
            userState.step = 'city';
            userStates.set(userId, userState);
            
            const cityKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_step' }]
                    ]
                }
            };
            
            bot.sendMessage(msg.chat.id, 
                'üèôÔ∏è –®–∞–≥ 4 –∏–∑ 8: –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –∂–∏–≤—ë—Ç–µ?', 
                { 
                    parse_mode: 'Markdown',
                    ...cityKeyboard 
                }
            );
            break;
            
        case 'city':
            data.city = msg.text.trim();
            userState.data = data;
            userState.step = 'country';
            userStates.set(userId, userState);
            
            const countryKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å (–ë–µ–ª–∞—Ä—É—Å—å)', callback_data: 'skip_step' }]
                    ]
                }
            };
            
            bot.sendMessage(msg.chat.id, 
                'üåç –®–∞–≥ 5 –∏–∑ 8: –í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –≤—ã –∂–∏–≤—ë—Ç–µ?\n\n' +
                '–ù–∞—à –∫–ª—É–± –±–∞–∑–∏—Ä—É–µ—Ç—Å—è –≤ –ú–∏–Ω—Å–∫–µ, –ë–µ–ª–∞—Ä—É—Å—å.\n' +
                '–ü—Ä–∏–º–µ—Ä—ã: –ë–µ–ª–∞—Ä—É—Å—å, –†–æ—Å—Å–∏—è, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω, –£–∫—Ä–∞–∏–Ω–∞', 
                { 
                    parse_mode: 'Markdown',
                    ...countryKeyboard 
                }
            );
            break;
            
        case 'country':
            data.country = msg.text.trim();
            userState.data = data;
            userState.step = 'phone';
            userStates.set(userId, userState);
            
            const phoneKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_step' }]
                    ]
                }
            };
            
            bot.sendMessage(msg.chat.id, 
                'üì± –®–∞–≥ 5 –∏–∑ 8: –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n' +
                '–ù–∞–ø—Ä–∏–º–µ—Ä: +375 (33) 993-22-88', 
                { 
                    parse_mode: 'Markdown',
                    ...phoneKeyboard 
                }
            );
            break;
            
        case 'phone':
            data.phone = msg.text.trim();
            userState.data = data;
            userState.step = 'about';
            userStates.set(userId, userState);
            
            const aboutKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_step' }]
                    ]
                }
            };
            
            bot.sendMessage(msg.chat.id, 
                'üìù –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ\n\n' +
                '–ö–∞–∫–∏–µ —É –≤–∞—Å –∞–≤—Ç–æ–º–æ–±–∏–ª–∏? –ö–∞–∫ –¥–∞–≤–Ω–æ —É–≤–ª–µ–∫–∞–µ—Ç–µ—Å—å –∫–∞–±—Ä–∏–æ–ª–µ—Ç–∞–º–∏?', 
                { 
                    parse_mode: 'Markdown',
                    ...aboutKeyboard 
                }
            );
            break;
            
        case 'about':
            data.about = msg.text.trim();
            userState.data = data;
            userState.step = 'photo';
            userStates.set(userId, userState);
            
            const photoKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ', callback_data: 'skip_step' }]
                    ]
                }
            };
            
            bot.sendMessage(msg.chat.id, 
                'üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è\n\n' +
                '–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —É–∑–Ω–∞—Ç—å –≤–∞—Å!', 
                { 
                    parse_mode: 'Markdown',
                    ...photoKeyboard 
                }
            );
            break;
            
        case 'photo':
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ
            // (—Ñ–æ—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –≤ bot.on('photo') -> handlePhotoRegistration)
            const photoSkipKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ', callback_data: 'skip_step' }]
                    ]
                }
            };
            
            bot.sendMessage(msg.chat.id, 
                'üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"', 
                photoSkipKeyboard
            );
            break;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ —à–∞–≥–∞ –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async function handleRegistrationSkip(msg, userId, userState) {
    const step = userState.step;
    const data = userState.data || {};
    
    switch (step) {
        case 'last_name':
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–º–∏–ª–∏—é
            userState.data = data;
            userState.step = 'birth_date';
            userStates.set(userId, userState);
            
            const birthDateKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_step' }]
                    ]
                }
            };
            
            bot.sendMessage(msg.chat.id, 
                'üéÇ –®–∞–≥ 3 –∏–∑ 8: –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è\n\n' +
                '–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990)', 
                { 
                    parse_mode: 'Markdown',
                    ...birthDateKeyboard 
                }
            );
            break;
            
        case 'birth_date':
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
            userState.data = data;
            userState.step = 'city';
            userStates.set(userId, userState);
            
            const cityKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_step' }]
                    ]
                }
            };
            
            bot.sendMessage(msg.chat.id, 
                'üèôÔ∏è –®–∞–≥ 4 –∏–∑ 8: –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –∂–∏–≤—ë—Ç–µ?', 
                { 
                    parse_mode: 'Markdown',
                    ...cityKeyboard 
                }
            );
            break;
            
        case 'city':
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–æ—Ä–æ–¥
            userState.data = data;
            userState.step = 'country';
            userStates.set(userId, userState);
            
            const countryKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å (–ë–µ–ª–∞—Ä—É—Å—å)', callback_data: 'skip_step' }]
                    ]
                }
            };
            
            bot.sendMessage(msg.chat.id, 
                'üåç –í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –≤—ã –∂–∏–≤—ë—Ç–µ?\n\n' +
                '–ù–∞—à –∫–ª—É–± –±–∞–∑–∏—Ä—É–µ—Ç—Å—è –≤ –ú–∏–Ω—Å–∫–µ, –ë–µ–ª–∞—Ä—É—Å—å.\n' +
                '–ü—Ä–∏–º–µ—Ä—ã: –ë–µ–ª–∞—Ä—É—Å—å, –†–æ—Å—Å–∏—è, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω, –£–∫—Ä–∞–∏–Ω–∞', 
                { 
                    parse_mode: 'Markdown',
                    ...countryKeyboard 
                }
            );
            break;
            
        case 'country':
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∞–Ω—É, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ë–µ–ª–∞—Ä—É—Å—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            data.country = '–ë–µ–ª–∞—Ä—É—Å—å';
            userState.data = data;
            userState.step = 'phone';
            userStates.set(userId, userState);
            
            const phoneKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_step' }]
                    ]
                }
            };
            
            bot.sendMessage(msg.chat.id, 
                'üì± –®–∞–≥ 5 –∏–∑ 8: –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n' +
                '–ù–∞–ø—Ä–∏–º–µ—Ä: +375 (33) 993-22-88', 
                { 
                    parse_mode: 'Markdown',
                    ...phoneKeyboard 
                }
            );
            break;
            
        case 'phone':
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
            userState.data = data;
            userState.step = 'about';
            userStates.set(userId, userState);
            
            const aboutKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_step' }]
                    ]
                }
            };
            
            bot.sendMessage(msg.chat.id, 
                'üìù –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ\n\n' +
                '–ö–∞–∫–∏–µ —É –≤–∞—Å –∞–≤—Ç–æ–º–æ–±–∏–ª–∏? –ö–∞–∫ –¥–∞–≤–Ω–æ —É–≤–ª–µ–∫–∞–µ—Ç–µ—Å—å –∫–∞–±—Ä–∏–æ–ª–µ—Ç–∞–º–∏?', 
                { 
                    parse_mode: 'Markdown',
                    ...aboutKeyboard 
                }
            );
            break;
            
        case 'about':
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            userState.data = data;
            userState.step = 'photo';
            userStates.set(userId, userState);
            
            const photoKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ', callback_data: 'skip_step' }]
                    ]
                }
            };
            
            bot.sendMessage(msg.chat.id, 
                'üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è\n\n' +
                '–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —É–∑–Ω–∞—Ç—å –≤–∞—Å!', 
                { 
                    parse_mode: 'Markdown',
                    ...photoKeyboard 
                }
            );
            break;
            
        case 'photo':
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–æ—Ç–æ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            await completeRegistration(msg, userId, data);
            break;
            
        default:
            bot.sendMessage(msg.chat.id, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
            userStates.delete(userId);
            break;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ —à–∞–≥–∞ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
async function handleInvitationSkip(msg, userId, userState) {
    const step = userState.step;
    const data = userState.data || {};
    
    switch (step) {
        case 'photos':
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–æ—Ç–æ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
            await completeCreateInvitation(msg, userId, data);
            break;
            
        default:
            bot.sendMessage(msg.chat.id, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
            userStates.delete(userId);
            break;
    }
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async function completeRegistration(msg, userId, data) {
    try {
        console.log('üîç –û—Ç–ª–∞–¥–∫–∞ completeRegistration:');
        console.log('userId:', userId);
        console.log('data:', JSON.stringify(data, null, 2));
        console.log('msg.from.username:', msg.from.username);
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏)
        const existingMember = await db.getMemberByTelegramId(userId);
        
        if (existingMember) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã–º–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            const updateData = {
                first_name: data.first_name,
                last_name: data.last_name || null,
                birth_date: data.birth_date || null,
                phone: data.phone || null,
                city: data.city || null,
                country: data.country || '–ë–µ–ª–∞—Ä—É—Å—å',
                about: data.about || null,
                status: '–±–µ–∑ –∞–≤—Ç–æ' // –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å —Å "–Ω–æ–≤—ã–π" –Ω–∞ "–±–µ–∑ –∞–≤—Ç–æ"
            };
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–æ–≤–æ–µ
            if (data.photo_url) {
                updateData.photo_url = data.photo_url;
            }
            
            const updateResult = await db.updateMember(userId, updateData);
            
            if (updateResult.affectedRows === 0) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞');
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const updatedMember = await db.getMemberByTelegramId(userId);
            var newMember = updatedMember;
            
            console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–∞: ${data.first_name} (${userId}) - —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω —Å "${existingMember.status}" –Ω–∞ "–±–µ–∑ –∞–≤—Ç–æ"`);
        } else {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
            const memberData = {
                telegram_id: userId,
                first_name: data.first_name,
                last_name: data.last_name || null,
                birth_date: data.birth_date || null,
                nickname: msg.from.username || null,
                phone: data.phone || null,
                city: data.city || null,
                country: data.country || '–ë–µ–ª–∞—Ä—É—Å—å',
                about: data.about || null,
                photo_url: data.photo_url || null,
                join_date: new Date().toISOString().split('T')[0],
                status: '–±–µ–∑ –∞–≤—Ç–æ'
            };
            
            var newMember = await db.createMember(memberData);
            console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–∞: ${data.first_name} (${userId}) —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–±–µ–∑ –∞–≤—Ç–æ"`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–¥–∞–ª–æ—Å—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        if (!newMember) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –ë–î');
            userStates.delete(userId);
            
            bot.sendMessage(msg.chat.id, 
                '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö\n\n' +
                'üîß –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n' +
                '–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n\n' +
                'üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ–∑–∂–µ –∫–æ–º–∞–Ω–¥–æ–π /register\n\n' +
                'üìû –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
                { parse_mode: 'Markdown' }
            );
            return;
        }
        
        // –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        userStates.delete(userId);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        let confirmationText = 'üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n\n';
        confirmationText += `üë§ ${newMember.first_name}`;
        if (newMember.last_name) confirmationText += ` ${newMember.last_name}`;
        if (newMember.city) confirmationText += `\nüèôÔ∏è –ì–æ—Ä–æ–¥: ${newMember.city}`;
        if (newMember.country) confirmationText += `\nüåç –°—Ç—Ä–∞–Ω–∞: ${newMember.country}`;
        if (newMember.phone) confirmationText += `\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: ${newMember.phone}`;
        confirmationText += `\nüìÖ –î–∞—Ç–∞: ${formatDate(newMember.join_date)}`;
        confirmationText += `\nüìä –°—Ç–∞—Ç—É—Å: ${newMember.status}`;
        
        confirmationText += '\n\nüöó –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:';
        confirmationText += '\n‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏';
        confirmationText += '\n‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤';
        confirmationText += '\n‚Ä¢ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∂–∏–∑–Ω–∏ –∫–ª—É–±–∞';
        
        confirmationText += '\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º!';
        
        const keyboard = {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'menu' },
                        { text: 'üöó –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ', callback_data: 'add_car' }
                    ]
                ]
            }
        };
        
        bot.sendMessage(msg.chat.id, confirmationText, { 
            parse_mode: 'Markdown',
            ...keyboard 
        });
        
        console.log(`‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: ${newMember.first_name} (ID: ${userId})`);
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É –∏–∑ userState
        const userState = userStates.get(userId);
        const canSendToGroup = userState && userState.groupAccess;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
        if (canSendToGroup) {
            let groupNotification = `üìù –£—á–∞—Å—Ç–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n\n`;
            groupNotification += `üë§ ${newMember.first_name}`;
            if (newMember.last_name) groupNotification += ` ${newMember.last_name}`;
            if (newMember.nickname) groupNotification += ` (@${newMember.nickname})`;
            if (newMember.city) groupNotification += `\nüèôÔ∏è ${newMember.city}`;
            if (newMember.country) groupNotification += `\nüåç ${newMember.country}`;
            if (newMember.about) groupNotification += `\n\nüí≠ ${newMember.about}`;
            
            groupNotification += `\n\nüìä –°—Ç–∞—Ç—É—Å: ${newMember.status}`;
            groupNotification += `\nüöó –ñ–¥—ë–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö!`;
            
            try {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
                if (newMember.photo_url) {
                    const fs = require('fs');
                    const path = require('path');
                    const photoPath = path.resolve(config.UPLOADS.membersPath, newMember.photo_url);
                    
                    console.log('üì∏ –û—Ç–ª–∞–¥–∫–∞ —Ñ–æ—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:');
                    console.log('newMember.photo_url:', newMember.photo_url);
                    console.log('photoPath:', photoPath);
                    console.log('fs.existsSync(photoPath):', fs.existsSync(photoPath));
                    
                    if (fs.existsSync(photoPath)) {
                        console.log('‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –≥—Ä—É–ø–ø—É');
                        await sendGroupPhoto(photoPath, groupNotification, {}, 'new_member');
                    } else {
                        console.log('‚ö†Ô∏è –§–∞–π–ª —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω:', photoPath);
                        await sendGroupNotification(groupNotification, {}, 'new_member');
                    }
                } else {
                    console.log('‚ÑπÔ∏è –£ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–µ—Ç —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è');
                    await sendGroupNotification(groupNotification, {}, 'new_member');
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É:', error);
                // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É
            }
        } else {
            console.log('‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ - –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        userStates.delete(userId);
        
        bot.sendMessage(msg.chat.id, 
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.\n' +
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –µ—â—ë —Ä–∞–∑ –∫–æ–º–∞–Ω–¥–æ–π /register\n\n' +
            '–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
        );
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function showUserInvitations(msg, userId) {
    try {
        const member = await db.getMemberByTelegramId(userId);
        
        if (!member) {
            const notRegisteredKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data: 'register' }],
                        [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
                    ]
                }
            };
            
            bot.sendMessage(msg.chat.id, 
                '‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∫–ª—É–±–µ\n\n' +
                'üöó –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n' +
                'üëá –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:',
                { 
                    parse_mode: 'Markdown',
                    ...notRegisteredKeyboard 
                }
            );
            return;
        }
        
        const invitations = await db.getInvitationsByInviter(member.id);
        
        if (invitations.length === 0) {
            const noInvitationsKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üéØ –ù–æ–≤–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ', callback_data: 'create_invitation' }],
                        [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
                    ]
                }
            };
            
            bot.sendMessage(msg.chat.id, 
                'üìÆ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π.\n\n' +
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üéØ –û—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ" –∫–æ–≥–¥–∞ —É–≤–∏–¥–∏—Ç–µ –Ω–µ–∑–Ω–∞–∫–æ–º—ã–π –∫–∞–±—Ä–∏–æ–ª–µ—Ç!',
                noInvitationsKeyboard
            );
            return;
        }
        
        let invitationsText = `üìÆ –í–∞—à–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è (${invitations.length})\n\n`;
        
        invitations.forEach((invitation, index) => {
            invitationsText += `üöó ${invitation.brand} ${invitation.model}`;
            if (invitation.reg_number) invitationsText += ` (${invitation.reg_number})`;
            invitationsText += `\nüìÖ –î–∞—Ç–∞: ${formatDate(invitation.invitation_date)}`;
            invitationsText += `\nüìç –ú–µ—Å—Ç–æ: ${invitation.location}`;
            invitationsText += `\nüìä –°—Ç–∞—Ç—É—Å: ${invitation.status}`;
            if (invitation.contact_name) invitationsText += `\nüì± –ö–æ–Ω—Ç–∞–∫—Ç—ã: ${invitation.contact_name}`;
            if (invitation.notes) invitationsText += `\nüìù ${invitation.notes}`;
            invitationsText += `\n\n`;
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const statusCounts = invitations.reduce((acc, inv) => {
            acc[inv.status] = (acc[inv.status] || 0) + 1;
            return acc;
        }, {});
        
        invitationsText += `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:\n`;
        Object.entries(statusCounts).forEach(([status, count]) => {
            invitationsText += `‚Ä¢ ${status}: ${count}\n`;
        });
        
        const keyboard = {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É', callback_data: 'search_by_number' },
                        { text: 'üéØ –ù–æ–≤–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ', callback_data: 'create_invitation' }
                    ],
                    [
                        { text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }
                    ]
                ]
            }
        };
        
        bot.sendMessage(msg.chat.id, invitationsText, { 
            parse_mode: 'Markdown',
            ...keyboard 
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π:', error);
        bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π');
    }
}

async function startAddCar(msg, userId) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const member = await db.getMemberByTelegramId(userId);
        
        if (!member) {
            const notRegisteredKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data: 'register' }],
                        [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
                    ]
                }
            };
            
            bot.sendMessage(msg.chat.id, 
                '‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∫–ª—É–±–µ\n\n' +
                'üöó –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n' +
                'üëá –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:',
                { 
                    parse_mode: 'Markdown',
                    ...notRegisteredKeyboard 
                }
            );
            return;
        }
        
        // –ó–∞–ø—Ä–µ—â–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–Ω–æ–≤—ã–π"
        if (member.status === '–Ω–æ–≤—ã–π') {
            const newUserCarKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üìù –ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', callback_data: 'register' }],
                        [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
                    ]
                }
            };
            
            bot.sendMessage(msg.chat.id, 
                'üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n\n' +
                '‚ö†Ô∏è –í–∞—à —Å—Ç–∞—Ç—É—Å: **–Ω–æ–≤—ã–π**\n\n' +
                'üìã –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n' +
                '1Ô∏è‚É£ –ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –∫–ª—É–±–µ\n' +
                '2Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å "–±–µ–∑ –∞–≤—Ç–æ" –∏–ª–∏ –≤—ã—à–µ\n\n' +
                '‚ú® –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª–∏!',
                { 
                    parse_mode: 'Markdown',
                    ...newUserCarKeyboard 
                }
            );
            return;
        }
        
        userStates.set(userId, { state: 'adding_car', step: 'brand' });
        const addCarKeyboard = addBackToMenuButton({});
        bot.sendMessage(msg.chat.id, 
            'üöó –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n\n' +
            '–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: BMW, Mercedes-Benz, Audi):',
            { 
                parse_mode: 'Markdown',
                ...addCarKeyboard 
            }
        );
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ:', error);
        bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

async function startCreateInvitation(msg, userId) {
    try {
        const member = await db.getMemberByTelegramId(userId);
        if (!member) {
            const notRegisteredInviteKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data: 'register' }],
                        [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
                    ]
                }
            };
            
            bot.sendMessage(msg.chat.id, 
                '‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∫–ª—É–±–µ\n\n' +
                'üéØ –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n' +
                'üëá –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:',
                { 
                    parse_mode: 'Markdown',
                    ...notRegisteredInviteKeyboard 
                }
            );
            return;
        }
        
        userStates.set(userId, { 
            state: 'creating_invitation', 
            step: 'reg_number',
            data: { inviter_member_id: member.id }
        });
        
        const createInvitationKeyboard = addBackToMenuButton({});
        bot.sendMessage(msg.chat.id, 
            'üéØ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è\n\n' +
            '–í—ã —É–≤–∏–¥–µ–ª–∏ –Ω–µ–∑–Ω–∞–∫–æ–º—ã–π –∫–∞–±—Ä–∏–æ–ª–µ—Ç –∏ –æ—Å—Ç–∞–≤–∏–ª–∏ –≤–∏–∑–∏—Ç–∫—É?\n' +
            '–î–∞–≤–∞–π—Ç–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º —ç—Ç–æ!\n\n' +
            'üî¢ –í–≤–µ–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è:\n' +
            '–§–æ—Ä–º–∞—Ç: —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤\n' +
            '–ù–∞–ø—Ä–∏–º–µ—Ä: A123BC77, 1234AB199\n\n' +
            '‚ö†Ô∏è –≠—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ!',
            { 
                parse_mode: 'Markdown',
                ...createInvitationKeyboard 
            }
        );
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', error);
        bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)
async function handleAddCar(msg, userId, userState) {
    const step = userState.step;
    const data = userState.data || {};
    
    switch (step) {
        case 'brand':
            data.brand = msg.text.trim();
            userState.data = data;
            userState.step = 'model';
            userStates.set(userId, userState);
            
            bot.sendMessage(msg.chat.id, 
                `–û—Ç–ª–∏—á–Ω–æ! –ú–∞—Ä–∫–∞: ${data.brand} ‚úÖ\n\n` +
                '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:'
            );
            break;
            
        case 'model':
            data.model = msg.text.trim();
            userState.data = data;
            userState.step = 'year';
            userStates.set(userId, userState);
            
            bot.sendMessage(msg.chat.id, 
                `–ú–æ–¥–µ–ª—å: ${data.model} ‚úÖ\n\n` +
                '–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞:'
            );
            break;
            
        case 'year':
            const year = parseInt(msg.text.trim());
            if (isNaN(year) || year < 1950 || year > new Date().getFullYear() + 1) {
                bot.sendMessage(msg.chat.id, 
                    '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2010):'
                );
                return;
            }
            
            data.year = year;
            userState.data = data;
            userState.step = 'reg_number';
            userStates.set(userId, userState);
            
            const regNumberKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_step' }]
                    ]
                }
            };
            
            bot.sendMessage(msg.chat.id, 
                `–ì–æ–¥: ${data.year} ‚úÖ\n\n` +
                'üöó –í–≤–µ–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n' +
                '–§–æ—Ä–º–∞—Ç: —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤\n' +
                '–ù–∞–ø—Ä–∏–º–µ—Ä: A123BC77, 1234AB199',
                regNumberKeyboard
            );
            break;
            
        case 'reg_number':
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ - /skip —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ callback_data
            {
                // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞
                const validation = validateRegNumber(msg.text);
                
                if (!validation.valid) {
                    const validationErrorKeyboard = {
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_step' }]
                            ]
                        }
                    };
                    
                    bot.sendMessage(msg.chat.id, 
                        `‚ùå ${validation.error}\n\n` +
                        '–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤:\n' +
                        '‚Ä¢ A123BC77\n' +
                        '‚Ä¢ 1234AB199\n' +
                        '‚Ä¢ H001AA\n\n' +
                        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:',
                        validationErrorKeyboard
                    );
                    return;
                }
                
                data.reg_number = validation.number;
                userState.data = data;
                userState.step = 'photos';
                userStates.set(userId, userState);
                
                const carPhotosKeyboard = {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: '‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å', callback_data: 'finish_photos' },
                                { text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ', callback_data: 'skip_step' }
                            ]
                        ]
                    }
                };
                
                bot.sendMessage(msg.chat.id, 
                    `–ù–æ–º–µ—Ä: ${data.reg_number} ‚úÖ\n\n` +
                    'üì∏ –®–∞–≥ 5/5: –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è!\n' +
                    '–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –ø–æ–¥—Ä—è–¥.', 
                    { 
                        parse_mode: 'Markdown',
                        ...carPhotosKeyboard 
                    }
                );
            }
            break;
            
        case 'photos':
            if (msg.text) {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ - –¥–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
                // /done –∏ /skip —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ callback_data
                const carPhotosKeyboard = {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: '‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å', callback_data: 'finish_photos' },
                                { text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ', callback_data: 'skip_step' }
                            ]
                        ]
                    }
                };
                
                bot.sendMessage(msg.chat.id, 
                    'üì∏ –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è.\n\n' +
                    '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:', 
                    carPhotosKeyboard
                );
            }
            // –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ, –æ–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ handleCarPhoto
            break;
    }
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
async function completeAddCar(msg, userId, data) {
    try {
        const member = await db.getMemberByTelegramId(userId);
        if (!member) {
            bot.sendMessage(msg.chat.id, '‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /register');
            userStates.delete(userId);
            return;
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let carStatus = '–∞–∫—Ç–∏–≤–Ω—ã–π'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        if (member.status === '—É—á–∞—Å—Ç–Ω–∏–∫' || member.status === '–±–µ–∑ –∞–≤—Ç–æ') {
            carStatus = '–Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏'; // –¢—Ä–µ–±—É–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
        } else if (member.status === '–∞–∫—Ç–∏–≤–Ω—ã–π') {
            carStatus = '–∞–∫—Ç–∏–≤–Ω—ã–π'; // –°—Ä–∞–∑—É –∞–∫—Ç–∏–≤–Ω—ã–π
        }
        
        const carData = {
            member_id: member.id,
            brand: data.brand,
            model: data.model,
            year: data.year,
            reg_number: data.reg_number || null,
            photos: data.photos ? JSON.stringify(data.photos) : null,
            status: carStatus
        };
        
        const newCar = await db.createCar(carData);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π —Å —Ç–∞–∫–∏–º –∂–µ –Ω–æ–º–µ—Ä–æ–º
        if (newCar && data.reg_number) {
            await checkAndUpdateInvitationStatus(data.reg_number, newCar.id);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–¥–∞–ª–æ—Å—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å
        if (!newCar) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –ë–î');
            userStates.delete(userId);
            
            bot.sendMessage(msg.chat.id, 
                '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n\n' +
                'üîß –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n' +
                '–î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n\n' +
                'üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –ø–æ–∑–∂–µ\n\n' +
                'üìû –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
                { parse_mode: 'Markdown' }
            );
            return;
        }
        
        userStates.delete(userId);
        
        let confirmText = `üéâ –ê–≤—Ç–æ–º–æ–±–∏–ª—å –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n` +
            `üöó ${data.brand} ${data.model}\n` +
            `üìÖ –ì–æ–¥: ${data.year}\n`;
        
        if (data.reg_number) {
            confirmText += `üî¢ –ù–æ–º–µ—Ä: ${data.reg_number}\n`;
        }
        
        confirmText += `üìä –°—Ç–∞—Ç—É—Å: ${carStatus}\n`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ "–Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"
        if (carStatus === '–Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏') {
            confirmText += `\n‚ö†Ô∏è –ê–≤—Ç–æ–º–æ–±–∏–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.\n`;
            confirmText += `–ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏—Ç—Å—è –Ω–∞ "–∞–∫—Ç–∏–≤–Ω—ã–π".`;
        }
        
        if (data.photos && data.photos.length > 0) {
            confirmText += `üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: ${data.photos.length}\n`;
        }
        
        confirmText += '\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.';
        
        const keyboard = {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'menu' },
                        { text: 'üéØ –ù–æ–≤–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ', callback_data: 'create_invitation' }
                    ]
                ]
            }
        };
        
        bot.sendMessage(msg.chat.id, confirmText, { 
            parse_mode: 'Markdown',
            ...keyboard 
        });
        
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å: ${data.brand} ${data.model} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ "—É—á–∞—Å—Ç–Ω–∏–∫" –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        const statusResult = await db.checkAndUpdateCandidateStatus(userId);
        if (statusResult && statusResult.statusChanged) {
            const statusMember = statusResult.member;
            const statusMessage = 
                `üöó –°—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ–±–Ω–æ–≤–ª—ë–Ω!\n\n` +
                `${statusMember.first_name} —Ç–µ–ø–µ—Ä—å **—É—á–∞—Å—Ç–Ω–∏–∫** –∫–ª—É–±–∞!\n\n` +
                `üìä –°—Ç–∞—Ç—É—Å: ${statusMember.old_status} ‚Üí ‚ö™ ${statusMember.new_status}\n` +
                `üöó –ê–≤—Ç–æ–º–æ–±–∏–ª–µ–π: ${statusMember.car_count}\n\n` +
                `üéØ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ "–∞–∫—Ç–∏–≤–Ω—ã–π" –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`;
            
            await sendGroupNotification(statusMessage, {}, 'system_messages');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ª–∏ –ø–µ—Ä–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
        const memberCars = await db.getCarsByMemberId(member.id);
        const isFirstCar = memberCars.length === 1; // –¢–æ–ª—å–∫–æ —á—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å
        
        if (isFirstCar) {
            // –≠—Ç–æ –ø–µ—Ä–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤–æ–≥–æ —á–ª–µ–Ω–∞ –∫–ª—É–±–∞
            let welcomeMessage = `üéâ –ù–æ–≤—ã–π —á–ª–µ–Ω –∫–ª—É–±–∞!\n\n`;
            welcomeMessage += `üë§ ${member.first_name}`;
            if (member.last_name) welcomeMessage += ` ${member.last_name}`;
            welcomeMessage += ``;
            if (member.nickname) welcomeMessage += ` (@${member.nickname})`;
            if (member.city) welcomeMessage += `\nüèôÔ∏è ${member.city}`;
            if (member.about) welcomeMessage += `\n\nüí≠ ${member.about}`;
            
            welcomeMessage += `\n\nüöó ${data.brand} ${data.model}\n`;
            welcomeMessage += `üìÖ –ì–æ–¥: ${data.year}`;
            if (data.reg_number) welcomeMessage += `\nüî¢ –ù–æ–º–µ—Ä: ${data.reg_number}`;
            if (data.photos && data.photos.length > 0) {
                welcomeMessage += `\nüì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: ${data.photos.length}`;
            }
            
            welcomeMessage += `\n\nüéä –¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–ª–Ω–æ–ø—Ä–∞–≤–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –∫–ª—É–±–∞!`;
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
            if (data.photos && data.photos.length > 0) {
                const fs = require('fs');
                const path = require('path');
                const carPhotoPath = path.resolve(config.UPLOADS.carsPath, data.photos[0]);
                
                if (fs.existsSync(carPhotoPath)) {
                    await sendGroupPhoto(carPhotoPath, welcomeMessage, {}, 'new_member');
                } else {
                    console.log('‚ö†Ô∏è –§–∞–π–ª —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω:', carPhotoPath);
                    await sendGroupNotification(welcomeMessage, {}, 'new_member');
                }
            } else if (member.photo_url) {
                const fs = require('fs');
                const path = require('path');
                const memberPhotoPath = path.resolve(config.UPLOADS.membersPath, member.photo_url);
                
                if (fs.existsSync(memberPhotoPath)) {
                    await sendGroupPhoto(memberPhotoPath, welcomeMessage, {}, 'new_member');
                } else {
                    console.log('‚ö†Ô∏è –§–∞–π–ª —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω:', memberPhotoPath);
                    await sendGroupNotification(welcomeMessage, {}, 'new_member');
                }
            } else {
                await sendGroupNotification(welcomeMessage, {}, 'new_member');
            }
        } else {
            // –≠—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å
            let carMessage = `üöó –ù–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –∫–ª—É–±–µ!\n\n`;
            carMessage += `üë§ ${member.first_name}`;
            if (member.last_name) carMessage += ` ${member.last_name}`;
            if (member.nickname) carMessage += ` (@${member.nickname})`;
            
            carMessage += `\n\nüöó ${data.brand} ${data.model}\n`;
            carMessage += `üìÖ –ì–æ–¥: ${data.year}`;
            if (data.reg_number) carMessage += `\nüî¢ –ù–æ–º–µ—Ä: ${data.reg_number}`;
            if (data.photos && data.photos.length > 0) {
                carMessage += `\nüì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: ${data.photos.length}`;
            }
            
            carMessage += `\n\nüìä –ê–≤—Ç–æ–º–æ–±–∏–ª–µ–π: ${memberCars.length}`;
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
            if (data.photos && data.photos.length > 0) {
                const fs = require('fs');
                const path = require('path');
                const carPhotoPath = path.resolve(config.UPLOADS.carsPath, data.photos[0]);
                
                if (fs.existsSync(carPhotoPath)) {
                    await sendGroupPhoto(carPhotoPath, carMessage, {}, 'new_car');
                } else {
                    console.log('‚ö†Ô∏è –§–∞–π–ª —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω:', carPhotoPath);
                    await sendGroupNotification(carMessage, {}, 'new_car');
                }
            } else {
                await sendGroupNotification(carMessage, {}, 'new_car');
            }
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', error);
        userStates.delete(userId);
        bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
async function handleCreateInvitation(msg, userId, userState) {
    const step = userState.step;
    const data = userState.data || {};
    
    switch (step) {
        case 'reg_number':
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ)
            const validation = validateRegNumber(msg.text);
            
            if (!validation.valid) {
                bot.sendMessage(msg.chat.id, 
                    `‚ùå ${validation.error}\n\n` +
                    '–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤:\n' +
                    '‚Ä¢ A123BC77\n' +
                    '‚Ä¢ 1234AB199\n' +
                    '‚Ä¢ H001AA\n\n' +
                    '‚ö†Ô∏è –ù–æ–º–µ—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:',
                    { parse_mode: 'Markdown' }
                );
                return;
            }
            
            data.reg_number = validation.number;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –Ω–æ–º–µ—Ä –≤ –±–∞–∑–µ
            try {
                const existingCars = await db.getCarsByRegNumber(validation.number);
                
                if (existingCars.length > 0) {
                    const car = existingCars[0];
                    
                    // –ï—Å–ª–∏ —ç—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–ª—É–±–∞
                    if (car.member_id && car.status !== '–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ') {
                        const owner = await db.getMemberById(car.member_id);
                        
                        let memberCarText = `üö´ –≠—Ç–æ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫—É –∫–ª—É–±–∞!\n\n`;
                        memberCarText += `üî¢  ${validation.number}\n`;
                        memberCarText += `üöó  ${car.brand} ${car.model}`;
                        if (car.year) memberCarText += ` (${car.year})`;
                        memberCarText += `\nüìä ${car.status}\n`;
                        
                        if (owner) {
                            memberCarText += `üë§ ${owner.first_name}`;
                            if (owner.last_name) memberCarText += ` ${owner.last_name}`;
                            if (owner.nickname) memberCarText += ` (@${owner.nickname})`;
                            memberCarText += `\n`;
                        }
                        
                        if (car.photos) {
                            try {
                                const photos = JSON.parse(car.photos);
                                if (photos && photos.length > 0) {
                                    memberCarText += `üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: ${photos.length}\n`;
                                }
                            } catch (error) {
                                console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–æ—Ç–æ:', error);
                            }
                        }
                        
                        memberCarText += '\nüí° –°–æ–≤–µ—Ç: –°–≤—è–∂–∏—Ç–µ—Å—å —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —á–µ—Ä–µ–∑ –∫–ª—É–± –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.';
                        
                        userStates.delete(userId);
                        bot.sendMessage(msg.chat.id, memberCarText, { 
                            parse_mode: 'Markdown',
                            reply_markup: {
                                inline_keyboard: [
                                    [
                                        { text: 'üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'menu' },
                                        { text: 'üéØ –ù–æ–≤–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ', callback_data: 'create_invitation' }
                                    ]
                                ]
                            }
                        });
                        return;
                    }
                    
                    // –ï—Å–ª–∏ —ç—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π (–¥—É–±–ª–∏–∫–∞—Ç)
                    if (car.status === '–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ') {
                        const invitations = await db.getInvitationsByCar(car.id);
                        
                        let duplicateText = `‚ö†Ô∏è –ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å –Ω–æ–º–µ—Ä–æ–º ${validation.number} —É–∂–µ –µ—Å—Ç—å –≤ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è—Ö!\n\n`;
                        duplicateText += `üöó  ${car.brand}\n`;
                        duplicateText += `üöó  ${car.model}\n`;
                        duplicateText += `üìÆ  ${invitations.length}\n`;
                        
                        if (invitations.length > 0) {
                            const lastInvitation = invitations[0];
                            duplicateText += `üìÖ ${formatDate(lastInvitation.invitation_date)}\n`;
                            duplicateText += `üìç  ${lastInvitation.location}\n`;
                        }
                        
                        if (car.photos) {
                            try {
                                const photos = JSON.parse(car.photos);
                                if (photos && photos.length > 0) {
                                    duplicateText += `üì∏ ${photos.length}\n`;
                                }
                            } catch (error) {
                                console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–æ—Ç–æ:', error);
                            }
                        }
                        
                        duplicateText += '\nü§î –•–æ—Ç–∏—Ç–µ –≤—Å—ë —Ä–∞–≤–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ?';
                        
                        userState.data = data;
                        userState.step = 'confirm_duplicate';
                        userStates.set(userId, userState);
                        
                        const duplicateKeyboard = {
                            reply_markup: {
                                inline_keyboard: [
                                    [
                                        { text: '‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data: 'continue_invitation' },
                                        { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_invitation' }
                                    ]
                                ]
                            }
                        };
                        
                        bot.sendMessage(msg.chat.id, duplicateText, { 
                            parse_mode: 'Markdown',
                            ...duplicateKeyboard 
                        });
                        return;
                    }
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:', error);
            }
            
            // –ï—Å–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            userState.data = data;
            userState.step = 'photos';
            userStates.set(userId, userState);
            
            const invitationPhotosKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ñ–æ—Ç–æ', callback_data: 'finish_photos' },
                            { text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ', callback_data: 'skip_step' }
                        ]
                    ]
                }
            };
            
            bot.sendMessage(msg.chat.id, 
                `üî¢ –ù–æ–º–µ—Ä: ${data.reg_number} ‚úÖ\n\n` +
                'üì∏ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å\n' +
                '–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ª—É—á—à–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≤—Å—Ç—Ä–µ—á–µ.\n\n' +
                '‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π',
                { 
                    parse_mode: 'Markdown',
                    ...invitationPhotosKeyboard 
                }
            );
            break;
            
        case 'confirm_duplicate':
            // –≠—Ç–æ—Ç —Å–ª—É—á–∞–π —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ callback_data –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback_query
            // –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è
            bot.sendMessage(msg.chat.id, 
                'ü§î –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è.'
            );
            break;
            
        case 'location':
            if (msg.text.trim() === '/finish') {
                // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–æ—Å—Ä–æ—á–Ω–æ
                await completeCreateInvitation(msg, userId, data);
                return;
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Å—Ç–æ (–ø—Ä–æ–ø—É—Å–∫ —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ callback_data)
            data.location = msg.text.trim();
            
            userState.data = data;
            userState.step = 'brand';
            userStates.set(userId, userState);
            
            let locationText = '';
            if (data.location) {
                locationText += `üìç –ú–µ—Å—Ç–æ: ${data.location} ‚úÖ\n\n`;
            }
            locationText += 'üöó –ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n';
            locationText += '–ï—Å–ª–∏ –∑–Ω–∞–µ—Ç–µ –º–∞—Ä–∫—É, –≤–≤–µ–¥–∏—Ç–µ –µ—ë:\n';
            locationText += '–ù–∞–ø—Ä–∏–º–µ—Ä: BMW, Mercedes-Benz, Audi, Porsche\n\n';
            const locationKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_step' },
                            { text: '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å', callback_data: 'finish_invitation' }
                        ]
                    ]
                }
            };
            
            bot.sendMessage(msg.chat.id, locationText, { 
                parse_mode: 'Markdown',
                ...locationKeyboard 
            });
            break;
            
        case 'photos':
            if (msg.text && (msg.text.trim() === '/done')) {
                // –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
                const photoCount = data.photos ? data.photos.length : 0;
                
                if (photoCount === 0) {
                    const invitationPhotosKeyboard = {
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    { text: '‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ñ–æ—Ç–æ', callback_data: 'finish_photos' },
                                    { text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ', callback_data: 'skip_step' }
                                ]
                            ]
                        }
                    };
                    
                    bot.sendMessage(msg.chat.id, 
                        'üì∏ –í—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ.\n' +
                        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:',
                        invitationPhotosKeyboard
                    );
                    return;
                }
                
                userState.step = 'location';
                userStates.set(userId, userState);
                
                const locationKeyboard = {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_step' },
                                { text: '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å', callback_data: 'finish_invitation' }
                            ]
                        ]
                    }
                };
                
                bot.sendMessage(msg.chat.id, 
                    `üì∏ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: ${photoCount} ‚úÖ\n\n` +
                    'üìç –ì–¥–µ –≤—ã –æ—Å—Ç–∞–≤–∏–ª–∏ –≤–∏–∑–∏—Ç–∫—É? (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n' +
                    '–ù–∞–ø—Ä–∏–º–µ—Ä: "–ü–∞—Ä–∫–æ–≤–∫–∞ –¢–¶ –ì–∞–ª–µ—Ä–µ—è", "—É–ª. –õ–µ–Ω–∏–Ω–∞ 15", "–≤–æ–∑–ª–µ –¥–æ–º–∞"\n\n' +
                    '‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ',
                    { 
                        parse_mode: 'Markdown',
                        ...locationKeyboard 
                    }
                );
            } else if (msg.text) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —ç—Ç–∞–ø–µ —Ñ–æ—Ç–æ (–≤–∫–ª—é—á–∞—è "undefined")
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ
                console.log(`‚ö†Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —ç—Ç–∞–ø–µ —Ñ–æ—Ç–æ: "${msg.text}"`);
                return;
            }
            break;
            
        case 'brand':
            if (msg.text.trim() === '/finish') {
                // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–æ—Å—Ä–æ—á–Ω–æ
                await completeCreateInvitation(msg, userId, data);
                return;
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ä–∫—É (–ø—Ä–æ–ø—É—Å–∫ —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ callback_data)
            data.brand = msg.text.trim();
            userState.data = data;
            userState.step = 'model';
            userStates.set(userId, userState);
            
            let brandText = '';
            if (data.brand) {
                brandText += `üöó –ú–∞—Ä–∫–∞: ${data.brand} ‚úÖ\n\n`;
            }
            brandText += 'üöó –ú–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n';
            brandText += '–ï—Å–ª–∏ –∑–Ω–∞–µ—Ç–µ –º–æ–¥–µ–ª—å, –≤–≤–µ–¥–∏—Ç–µ –µ—ë:\n';
            brandText += '–ù–∞–ø—Ä–∏–º–µ—Ä: E46, SLK, A4, 911\n\n';
            const brandKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_step' },
                            { text: '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å', callback_data: 'finish_invitation' }
                        ]
                    ]
                }
            };
            
            bot.sendMessage(msg.chat.id, brandText, { 
                parse_mode: 'Markdown',
                ...brandKeyboard 
            });
            break;
            
        case 'model':
            if (msg.text.trim() === '/finish') {
                // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–æ—Å—Ä–æ—á–Ω–æ
                await completeCreateInvitation(msg, userId, data);
                return;
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å (–ø—Ä–æ–ø—É—Å–∫ —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ callback_data)
            data.model = msg.text.trim();
            userState.data = data;
            userState.step = 'contact_info';
            userStates.set(userId, userState);
            
            let modelText = '';
            if (data.model) {
                modelText += `üöó –ú–æ–¥–µ–ª—å: ${data.model} ‚úÖ\n\n`;
            }
            modelText += 'üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã –≤ –≤–∏–∑–∏—Ç–∫–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n';
            modelText += '–ö–∞–∫–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤—ã –æ—Å—Ç–∞–≤–∏–ª–∏?\n';
            modelText += '–ù–∞–ø—Ä–∏–º–µ—Ä: "Telegram @username", "+7 999 123-45-67", "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤"\n\n';
            const modelKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_step' },
                            { text: '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å', callback_data: 'finish_invitation' }
                        ]
                    ]
                }
            };
            
            bot.sendMessage(msg.chat.id, modelText, { 
                parse_mode: 'Markdown',
                ...modelKeyboard 
            });
            break;
            
        case 'contact_info':
            if (msg.text.trim() === '/finish') {
                // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–æ—Å—Ä–æ—á–Ω–æ
                await completeCreateInvitation(msg, userId, data);
                return;
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã (–ø—Ä–æ–ø—É—Å–∫ —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ callback_data)
            data.contact_info = msg.text.trim();
            userState.data = data;
            userState.step = 'notes';
            userStates.set(userId, userState);
            
            let contactText = '';
            if (data.contact_info) {
                contactText += `üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã: ${data.contact_info} ‚úÖ\n\n`;
            }
            contactText += 'üìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n';
            contactText += '–ù–∞–ø—Ä–∏–º–µ—Ä: "–∫—Ä–∞—Å–∏–≤—ã–π –∫–∞–±—Ä–∏–æ–ª–µ—Ç", "—Å—Ç–æ—è–ª –¥–æ–ª–≥–æ", "–≤–ª–∞–¥–µ–ª–µ—Ü —Ä—è–¥–æ–º –±—ã–ª"\n\n';
            const contactKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_step' },
                            { text: '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å', callback_data: 'finish_invitation' }
                        ]
                    ]
                }
            };
            
            bot.sendMessage(msg.chat.id, contactText, { 
                parse_mode: 'Markdown',
                ...contactKeyboard 
            });
            break;
            
        case 'notes':
            if (msg.text.trim() === '/finish') {
                // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–æ—Å—Ä–æ—á–Ω–æ
                await completeCreateInvitation(msg, userId, data);
                return;
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–º–µ—Ç–∫–∏ (–ø—Ä–æ–ø—É—Å–∫ —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ callback_data)
            data.notes = msg.text.trim();
            
            // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
            await completeCreateInvitation(msg, userId, data);
            break;
    }
}

// –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
function validateRegNumber(regNumber) {
    console.log('üîç DEBUG validateRegNumber called with:', regNumber);
    console.log('üîç DEBUG validateRegNumber stack:', new Error().stack.split('\n').slice(1, 4));
    
    if (!regNumber || typeof regNumber !== 'string') {
        console.log('üîç DEBUG validateRegNumber returning: –Ω–æ–º–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω');
        return { valid: false, error: '–ù–æ–º–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω' };
    }
    
    const cleanNumber = regNumber.trim().toUpperCase();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É
    if (cleanNumber.length === 0) {
        return { valid: false, error: '–ù–æ–º–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' };
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    if (cleanNumber.length < 4 || cleanNumber.length > 12) {
        return { valid: false, error: '–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 4 –¥–æ 12 —Å–∏–º–≤–æ–ª–æ–≤' };
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã)
    const regNumberPattern = /^[A-Z0-9]+$/;
    if (!regNumberPattern.test(cleanNumber)) {
        return { 
            valid: false, 
            error: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã (A-Z) –∏ —Ü–∏—Ñ—Ä—ã (0-9) –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤' 
        };
    }
    
    return { valid: true, number: cleanNumber };
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
async function completeCreateInvitation(msg, userId, data) {
    try {
        console.log('üîç –û—Ç–ª–∞–¥–∫–∞ completeCreateInvitation:');
        console.log('userId:', userId);
        console.log('data:', JSON.stringify(data, null, 2));
        
        // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å
        let car = null;
        
        // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –ø–æ –Ω–æ–º–µ—Ä—É (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
        if (data.reg_number) {
            const existingCars = await db.getCarsByRegNumber(data.reg_number);
            if (existingCars.length > 0) {
                car = existingCars[0];
                console.log('–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å:', car.id);
            }
        }
        
        // –ï—Å–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π (–±–µ–∑ –≤–ª–∞–¥–µ–ª—å—Ü–∞)
        if (!car) {
            const carData = {
                member_id: null, // –ê–≤—Ç–æ–º–æ–±–∏–ª—å –±–µ–∑ –≤–ª–∞–¥–µ–ª—å—Ü–∞
                brand: data.brand || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                model: data.model || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                year: data.year || 1900, // –ì–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
                reg_number: data.reg_number,
                status: '–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ',
                photos: data.photos && data.photos.length > 0 ? JSON.stringify(data.photos) : null
            };
            
            car = await db.createCar(carData);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–¥–∞–ª–æ—Å—å –ª–∏ —Å–æ–∑–¥–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å
            if (!car) {
                console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
                userStates.delete(userId);
                
                bot.sendMessage(msg.chat.id, 
                    '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö\n\n' +
                    'üîß –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n' +
                    '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n\n' +
                    'üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–∑–∂–µ\n\n' +
                    'üìû –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
                    { parse_mode: 'Markdown' }
                );
                return;
            }
            
            console.log('–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', car.id);
            console.log(`üî¢ –ù–æ–º–µ—Ä: ${data.reg_number}`);
            console.log(`üöó –ú–∞—Ä–∫–∞/–ú–æ–¥–µ–ª—å: ${carData.brand}/${carData.model}`);
            if (data.photos && data.photos.length > 0) {
                console.log(`üì∏ –î–æ–±–∞–≤–ª–µ–Ω–æ ${data.photos.length} —Ñ–æ—Ç–æ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è`);
            }
        }
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
        const invitationData = {
            car_id: car.id,
            invitation_date: new Date().toISOString().split('T')[0], // –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞
            location: data.location || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
            inviter_member_id: data.inviter_member_id,
            status: '–Ω–æ–≤–æ–µ',
            contact_phone: null, // –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º
            contact_name: data.contact_info || null,
            notes: data.notes || null
        };
        
        const invitation = await db.createInvitation(invitationData);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–¥–∞–ª–æ—Å—å –ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
        if (!invitation) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ');
            userStates.delete(userId);
            
            bot.sendMessage(msg.chat.id, 
                '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è\n\n' +
                'üîß –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n' +
                '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n\n' +
                'üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–∑–∂–µ\n\n' +
                'üìû –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
                { parse_mode: 'Markdown' }
            );
            return;
        }
        
        // –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        userStates.delete(userId);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        let confirmText = 'üéâ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ!\n\n';
        confirmText += `üî¢ –ù–æ–º–µ—Ä: ${data.reg_number}\n`;
        confirmText += `üìÖ –î–∞—Ç–∞: ${formatDate(invitationData.invitation_date)}\n`;
        
        if (data.location) {
            confirmText += `üìç –ú–µ—Å—Ç–æ: ${data.location}\n`;
        }
        if (data.photos && data.photos.length > 0) {
            confirmText += `üì∏ –§–æ—Ç–æ: ${data.photos.length}\n`;
        }
        if (data.brand && data.brand !== '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') {
            confirmText += `üöó –ú–∞—Ä–∫–∞: ${data.brand}\n`;
        }
        if (data.model && data.model !== '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') {
            confirmText += `üöó –ú–æ–¥–µ–ª—å: ${data.model}\n`;
        }
        if (data.contact_info) {
            confirmText += `üì± –ö–æ–Ω—Ç–∞–∫—Ç: ${data.contact_info}\n`;
        }
        if (data.notes) {
            confirmText += `üìù –ó–∞–º–µ—Ç–∫–∏: ${data.notes}\n`;
        }
        
        confirmText += '\n‚ú® –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í–æ–∑–º–æ–∂–Ω–æ, —Å–∫–æ—Ä–æ —É –Ω–∞—Å –±—É–¥–µ—Ç –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –∫–ª—É–±–∞!';
        
        const keyboard = {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'menu' },
                        { text: 'üéØ –ï—â—ë –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ', callback_data: 'create_invitation' }
                    ],
                    [
                        { text: 'üìÆ –ú–æ–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è', callback_data: 'my_invitations' }
                    ]
                ]
            }
        };
        
        bot.sendMessage(msg.chat.id, confirmText, { 
            parse_mode: 'Markdown',
            ...keyboard 
        });
        
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ: ${data.brand} ${data.model} (ID: ${invitation.id})`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –æ –Ω–æ–≤–æ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏
        const inviter = await db.getMemberById(data.inviter_member_id);
        
        let invitationMessage = `üéØ –ù–æ–≤–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!\n\n`;
        invitationMessage += `üë§ ${inviter.first_name}`;
        if (inviter.last_name) invitationMessage += ` ${inviter.last_name}`;
        if (inviter.nickname) invitationMessage += ` (@${inviter.nickname})`;
        
        invitationMessage += `\n\nüöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å:\n`;
        invitationMessage += `üî¢ –ù–æ–º–µ—Ä: ${data.reg_number}`;
        
        if (data.brand && data.brand !== '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') {
            invitationMessage += `\nüöó –ú–∞—Ä–∫–∞: ${data.brand}`;
        }
        if (data.model && data.model !== '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') {
            invitationMessage += ` ${data.model}`;
        }
        
        invitationMessage += `\nüìÖ –î–∞—Ç–∞: ${formatDate(invitationData.invitation_date)}`;
        
        if (data.location && data.location !== '–ù–µ —É–∫–∞–∑–∞–Ω–æ') {
            invitationMessage += `\nüìç –ú–µ—Å—Ç–æ: ${data.location}`;
        }
        
        if (data.contact_info) {
            invitationMessage += `\nüì± –ö–æ–Ω—Ç–∞–∫—Ç: ${data.contact_info}`;
        }
        
        if (data.notes) {
            invitationMessage += `\nüìù –ó–∞–º–µ—Ç–∫–∏: ${data.notes}`;
        }
        
        if (data.photos && data.photos.length > 0) {
            invitationMessage += `\nüì∏ –§–æ—Ç–æ: ${data.photos.length}`;
        }
        
        invitationMessage += `\n\nü§û –ù–∞–¥–µ–µ–º—Å—è –Ω–∞ –æ—Ç–∫–ª–∏–∫ –≤–ª–∞–¥–µ–ª—å—Ü–∞!`;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
        if (data.photos && data.photos.length > 0) {
            const fs = require('fs');
            const path = require('path');
            const carPhotoPath = path.resolve(config.UPLOADS.carsPath, data.photos[0]);
            
            if (fs.existsSync(carPhotoPath)) {
                await sendGroupPhoto(carPhotoPath, invitationMessage, {}, 'new_invitation');
            } else {
                console.log('‚ö†Ô∏è –§–∞–π–ª —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω:', carPhotoPath);
                await sendGroupNotification(invitationMessage, {}, 'new_invitation');
            }
        } else {
            await sendGroupNotification(invitationMessage, {}, 'new_invitation');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', error);
        userStates.delete(userId);
        
        bot.sendMessage(msg.chat.id, 
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.\n' +
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.\n\n' +
            '–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
        );
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
async function downloadPhoto(fileId, fileName) {
    try {
        console.log('üì∏ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞:');
        console.log('   File ID:', fileId);
        console.log('   File Name:', fileName);
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        const file = await bot.getFile(fileId);
        console.log('   Telegram File Info:', file);
        
        const fileUrl = `https://api.telegram.org/file/bot${config.BOT_TOKEN}/${file.file_path}`;
        console.log('   Download URL:', fileUrl);
        
        // –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        createUploadDirs();
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        const filePath = path.resolve(config.UPLOADS.membersPath, fileName);
        console.log('   Save Path:', filePath);
        console.log('   Members Path Config:', config.UPLOADS.membersPath);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        console.log('   –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å URL...');
        const response = await fetch(fileUrl);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const arrayBuffer = await response.arrayBuffer();
        const buffer = Buffer.from(arrayBuffer);
        console.log('   –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:', buffer.length, '–±–∞–π—Ç');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        fs.writeFileSync(filePath, buffer);
        console.log('   ‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
        const relativePath = `uploads/members/${fileName}`;
        console.log('   –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å:', relativePath);
        return relativePath;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞:');
        console.error('   File ID:', fileId);
        console.error('   File Name:', fileName);
        console.error('   Error:', error);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
async function downloadCarPhoto(fileId, fileName) {
    try {
        console.log('üöó –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:');
        console.log('   File ID:', fileId);
        console.log('   File Name:', fileName);
        
        const file = await bot.getFile(fileId);
        console.log('   Telegram File Info:', file);
        
        const fileUrl = `https://api.telegram.org/file/bot${config.BOT_TOKEN}/${file.file_path}`;
        console.log('   Download URL:', fileUrl);
        
        createUploadDirs();
        const filePath = path.resolve(config.UPLOADS.carsPath, fileName);
        console.log('   Save Path:', filePath);
        console.log('   Cars Path Config:', config.UPLOADS.carsPath);
        
        console.log('   –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å URL...');
        const response = await fetch(fileUrl);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const arrayBuffer = await response.arrayBuffer();
        const buffer = Buffer.from(arrayBuffer);
        console.log('   –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:', buffer.length, '–±–∞–π—Ç');
        
        fs.writeFileSync(filePath, buffer);
        console.log('   ‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        
        console.log('   ‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        return { success: true, fileName: fileName };
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:');
        console.error('   File ID:', fileId);
        console.error('   File Name:', fileName);
        console.error('   Error:', error);
        throw error;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –≤–æ –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async function handlePhotoRegistration(msg, userId, userState) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
        const photo = msg.photo[msg.photo.length - 1];
        const fileName = `member_${userId}_${Date.now()}.jpg`;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ
        const photoPath = await downloadPhoto(photo.file_id, fileName);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å)
        const data = userState.data || {};
        data.photo_url = fileName;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (!data.first_name) {
            bot.sendMessage(msg.chat.id, 
                '‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n' +
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /register'
            );
            userStates.delete(userId);
            return;
        }
        
        bot.sendMessage(msg.chat.id, 
            '‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n\n' +
            '–ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é...'
        );
        
        // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        await completeRegistration(msg, userId, data);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        bot.sendMessage(msg.chat.id, 
            '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.\n' +
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip'
        );
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
async function handleCarPhoto(msg, userId, userState) {
    try {
        const photo = msg.photo[msg.photo.length - 1];
        const data = userState.data || {};
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!data.photos) {
            data.photos = [];
        }
        
        const fileName = `car_${userId}_${Date.now()}_${data.photos.length + 1}.jpg`;
        const photoPath = await downloadCarPhoto(photo.file_id, fileName);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞ –≤ –º–∞—Å—Å–∏–≤
        data.photos.push(fileName);
        userState.data = data;
        userStates.set(userId, userState);
        
        const carPhotosKeyboard = {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å', callback_data: 'finish_photos' },
                        { text: 'üì∏ –ï—â—ë —Ñ–æ—Ç–æ', callback_data: 'continue_photos' }
                    ]
                ]
            }
        };
        
        bot.sendMessage(msg.chat.id, 
            `‚úÖ –§–æ—Ç–æ ${data.photos.length} –∑–∞–≥—Ä—É–∂–µ–Ω–æ!\n\n` +
            '–ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏—Ç—å:', 
            carPhotosKeyboard
        );
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', error);
        bot.sendMessage(msg.chat.id, 
            '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.\n' +
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.'
        );
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
async function handleInvitationPhoto(msg, userId, userState) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ —ç—Ç–∞–ø–µ —Ñ–æ—Ç–æ
        if (userState.step !== 'photos') {
            bot.sendMessage(msg.chat.id, 
                'üì∏ –°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.'
            );
            return;
        }
        
        const photo = msg.photo[msg.photo.length - 1];
        const data = userState.data || {};
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!data.photos) {
            data.photos = [];
        }
        
        const fileName = `invitation_${userId}_${Date.now()}_${data.photos.length + 1}.jpg`;
        const photoPath = await downloadCarPhoto(photo.file_id, fileName);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞ –≤ –º–∞—Å—Å–∏–≤
        data.photos.push(fileName);
        userState.data = data;
        userStates.set(userId, userState);
        
        const invitationPhotosKeyboard = {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å', callback_data: 'finish_photos' },
                        { text: 'üì∏ –ï—â—ë —Ñ–æ—Ç–æ', callback_data: 'continue_photos' }
                    ]
                ]
            }
        };
        
        let photoText = `‚úÖ –§–æ—Ç–æ ${data.photos.length} –∑–∞–≥—Ä—É–∂–µ–Ω–æ!\n\n`;
        photoText += `üî¢ –ù–æ–º–µ—Ä: ${data.reg_number}\n`;
        photoText += '–ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏—Ç—å:';
        
        bot.sendMessage(msg.chat.id, photoText, invitationPhotosKeyboard);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', error);
        bot.sendMessage(msg.chat.id, 
            '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.\n' +
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.'
        );
    }
}

// –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É
async function startSearchByNumber(msg, userId) {
    try {
        const member = await db.getMemberByTelegramId(userId);
        if (!member) {
            const notRegisteredSearchKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data: 'register' }],
                        [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
                    ]
                }
            };
            
            bot.sendMessage(msg.chat.id, 
                '‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∫–ª—É–±–µ\n\n' +
                'üîç –î–ª—è –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n' +
                'üëá –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:',
                { 
                    parse_mode: 'Markdown',
                    ...notRegisteredSearchKeyboard 
                }
            );
            return;
        }
        
        userStates.set(userId, { 
            state: 'searching', 
            step: 'number'
        });
        
        const searchKeyboard = addBackToMenuButton({});
        bot.sendMessage(msg.chat.id, 
            'üîç –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ –Ω–æ–º–µ—Ä—É\n\n' +
            '–í–≤–µ–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ –µ–≥–æ —á–∞—Å—Ç—å:\n' +
            '‚Ä¢ –ü–æ–ª–Ω—ã–π –Ω–æ–º–µ—Ä: A123BC77\n' +
            '‚Ä¢ –ß–∞—Å—Ç–∏—á–Ω—ã–π –ø–æ–∏—Å–∫: A123, BC77, 123\n\n' +
            '–ü–æ–∏—Å–∫ –Ω–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É.',
            { 
                parse_mode: 'Markdown',
                ...searchKeyboard 
            }
        );
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞:', error);
        bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É
async function handleSearch(msg, userId, userState) {
    try {
        const searchQuery = msg.text.trim().toUpperCase();
        
        if (searchQuery.length < 2) {
            bot.sendMessage(msg.chat.id, 
                '‚ùå –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.\n' +
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:'
            );
            return;
        }
        
        // –ò—â–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
        const cars = await db.searchCarsByRegNumber(searchQuery);
        
        userStates.delete(userId);
        
        if (cars.length === 0) {
            bot.sendMessage(msg.chat.id, 
                `üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É "${searchQuery}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n` +
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä –∏–ª–∏ –µ–≥–æ —á–∞—Å—Ç—å.',
                {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: 'üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫', callback_data: 'search_by_number' },
                                { text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }
                            ]
                        ]
                    }
                }
            );
            return;
        }
        
        let resultsText = `üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ "${searchQuery}"\n\n`;
        resultsText += `–ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: ${cars.length}\n\n`;
        
        for (let i = 0; i < cars.length; i++) {
            const car = cars[i];
            resultsText += `${i + 1}. ${car.brand} ${car.model}`;
            if (car.year) resultsText += ` (${car.year})`;
            resultsText += `\nüî¢ –ù–æ–º–µ—Ä: ${car.reg_number || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`;
            resultsText += `\nüìä –°—Ç–∞—Ç—É—Å: ${car.status}`;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö
            if (car.photos) {
                try {
                    const photos = JSON.parse(car.photos);
                    if (photos && photos.length > 0) {
                        resultsText += `\nüì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: ${photos.length}`;
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–æ—Ç–æ:', error);
                }
            }
            
            // –ï—Å–ª–∏ —ç—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
            if (car.status === '–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ') {
                try {
                    const invitations = await db.getInvitationsByCar(car.id);
                    resultsText += `\nüìÆ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: ${invitations.length}`;
                    if (invitations.length > 0) {
                        const lastInvitation = invitations[0]; // –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
                        resultsText += `\nüìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ: ${formatDate(lastInvitation.invitation_date)}`;
                        resultsText += `\nüìç –ú–µ—Å—Ç–æ: ${lastInvitation.location}`;
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –¥–ª—è –∞–≤—Ç–æ:', error);
                }
            }
            
            resultsText += `\n\n`;
        }
        
        const keyboard = {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫', callback_data: 'search_by_number' },
                        { text: 'üéØ –ù–æ–≤–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ', callback_data: 'create_invitation' }
                    ],
                    [
                        { text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }
                    ]
                ]
            }
        };
        
        bot.sendMessage(msg.chat.id, resultsText, { 
            parse_mode: 'Markdown',
            ...keyboard 
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
        userStates.delete(userId);
        bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function handleSetUserStatus(msg, userId, userState) {
    if (userState.step !== 'enter_username') {
        return;
    }
    
    try {
        const username = msg.text.trim();
        const selectedStatus = userState.data.selectedStatus;
        
        if (!username) {
            bot.sendMessage(msg.chat.id, 
                '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username.\n' +
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.'
            );
            return;
        }
        
        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
        const member = await db.getMemberByUsername(username);
        
        if (!member) {
            const notFoundKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_status_change' }]
                    ]
                }
            };
            
            bot.sendMessage(msg.chat.id, 
                `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å username "${username}" –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n` +
                `üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n` +
                `‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –∫–ª—É–±–µ\n` +
                `‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω username\n` +
                `‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–µ–Ω–∏–ª username\n\n` +
                `üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n` +
                `‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è\n` +
                `‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –≥—Ä—É–ø–ø–µ\n` +
                `‚Ä¢ –ü–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–æ–±—â–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π username\n\n` +
                `–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π username –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:`,
                { 
                    parse_mode: 'Markdown',
                    ...notFoundKeyboard 
                }
            );
            return;
        }
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        const statusIcon = selectedStatus === '–∞–∫—Ç–∏–≤–Ω—ã–π' ? '‚úÖ' : 
                         selectedStatus === '–Ω–æ–≤—ã–π' ? 'üÜï' : 
                         selectedStatus === '–±–µ–∑ –∞–≤—Ç–æ' ? '‚ö™' : 'üö´';
        
        const confirmKeyboard = {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: 'confirm_status_change' },
                        { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_status_change' }
                    ]
                ]
            }
        };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        userState.data.targetMember = member;
        userState.step = 'confirm';
        userStates.set(userId, userState);
        
        let confirmText = `üîß –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞\n\n`;
        confirmText += `üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** ${member.first_name}`;
        if (member.last_name) confirmText += ` ${member.last_name}`;
        confirmText += `\nüì± **Username:** @${member.nickname}`;
        confirmText += `\nüìä **–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:** ${member.status}`;
        confirmText += `\nüîÑ **–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:** ${statusIcon} ${selectedStatus}`;
        
        if (member.status === selectedStatus) {
            confirmText += `\n\n‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å "${selectedStatus}"`;
        }
        
        confirmText += `\n\n‚ùì –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞?`;
        
        bot.sendMessage(msg.chat.id, confirmText, { 
            parse_mode: 'Markdown',
            ...confirmKeyboard 
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
        userStates.delete(userId);
        bot.sendMessage(msg.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
async function handlePasswordSetting(msg, userId, userState) {
    const password = msg.text.trim();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è
    if (password.length < 5) {
        bot.sendMessage(msg.chat.id, 
            '‚ùå –ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π\n\n' +
            '‚ö° –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è: 5 —Å–∏–º–≤–æ–ª–æ–≤\n' +
            '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:',
            { parse_mode: 'Markdown' }
        );
        return;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
    setActivePassword(password);
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userStates.delete(userId);
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const successKeyboard = {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üîí –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data: 'category_admin' }],
                [{ text: 'üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'menu' }]
            ]
        }
    };
    
    bot.sendMessage(msg.chat.id, 
        '‚úÖ –ü–∞—Ä–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n' +
        `üîê –ü–∞—Ä–æ–ª—å: \`${password}\`\n` +
        '‚è∞ –í—Ä–µ–º—è –∂–∏–∑–Ω–∏: 10 –º–∏–Ω—É—Ç\n' +
        'üë• –î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "—É—á–∞—Å—Ç–Ω–∏–∫" –∏ "–±–µ–∑ –∞–≤—Ç–æ"\n\n' +
        'üì¢ –¢–µ–ø–µ—Ä—å —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≤—Å—Ç—Ä–µ—á–∏ –º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å:\n' +
        'üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç ‚Üí –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å ‚Üí üéØ –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å\n\n' +
        'üóëÔ∏è –ü–∞—Ä–æ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç.',
        { 
            parse_mode: 'Markdown',
            ...successKeyboard 
        }
    );
    
    console.log(`üîê –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${userId} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –ø–∞—Ä–æ–ª—å: ${password}`);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
async function handlePasswordEntering(msg, userId, userState) {
    const inputPassword = msg.text.trim();
    const { telegramId, memberId, currentStatus } = userState.data;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    if (!checkPassword(inputPassword)) {
        bot.sendMessage(msg.chat.id, 
            '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å\n\n' +
            'üîê –í–≤–µ–¥—ë–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n' +
            'üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:\n' +
            '‚Ä¢ –ü–∞—Ä–æ–ª—å –≤–≤–µ–¥—ë–Ω –±–µ–∑ –æ—à–∏–±–æ–∫\n' +
            '‚Ä¢ –ü–∞—Ä–æ–ª—å –µ—â—ë –Ω–µ –∏—Å—Ç—ë–∫ (10 –º–∏–Ω—É—Ç)\n' +
            '‚Ä¢ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–∞—Ä–æ–ª—å –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á–µ\n\n' +
            '‚úèÔ∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:',
            { parse_mode: 'Markdown' }
        );
        return;
    }
    
    try {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ "–∞–∫—Ç–∏–≤–Ω—ã–π"
        const result = await db.updateMemberStatus(telegramId, '–∞–∫—Ç–∏–≤–Ω—ã–π');
        
        if (!result.success) {
            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            userStates.delete(userId);
            
            bot.sendMessage(msg.chat.id, 
                `‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞\n\n` +
                `üîß ${result.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}\n` +
                `–ü–∞—Ä–æ–ª—å –±—ã–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º, –Ω–æ —Å—Ç–∞—Ç—É—Å –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å.\n\n` +
                `üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.`,
                { parse_mode: 'Markdown' }
            );
            return;
        }
        
        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        userStates.delete(userId);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        console.log(`üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–ª—É—á–∏–ª –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ –ø–∞—Ä–æ–ª—å (–±—ã–ª–æ: ${currentStatus})`);
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        const updatedMember = await db.getMemberByTelegramId(userId);
        if (updatedMember) {
            // –õ–æ–≥–∏—Ä—É–µ–º –≤ –ë–î (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
            try {
                await db.logAuthAttempt({
                    telegram_id: userId,
                    username: updatedMember.nickname,
                    first_name: updatedMember.first_name,
                    last_name: updatedMember.last_name,
                    is_member: true,
                    member_id: updatedMember.id,
                    status: 'success',
                    notes: `Status upgraded from ${currentStatus} to –∞–∫—Ç–∏–≤–Ω—ã–π via password`
                });
            } catch (logError) {
                console.error('–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', logError);
            }
        }
        
        // –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const successKeyboard = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üåê –í–µ–±-–¥–∞—à–±–æ—Ä–¥', callback_data: 'web_dashboard' }],
                    [{ text: 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'my_profile' }],
                    [{ text: 'üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'menu' }]
                ]
            }
        };
        
        bot.sendMessage(msg.chat.id, 
            'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω!\n\n' +
            '‚úÖ –í–∞—à –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: **–∞–∫—Ç–∏–≤–Ω—ã–π**\n\n' +
            'üéØ –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n' +
            '‚Ä¢ üåê **–í–µ–±-–¥–∞—à–±–æ—Ä–¥** - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n' +
            '‚Ä¢ üìä –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞\n' +
            '‚Ä¢ üöó –£—á–∞—Å—Ç–∏–µ –≤ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö –∫–ª—É–±–∞\n\n' +
            'üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ –≤ –∂–∏–∑–Ω–∏ –∫–ª—É–±–∞!\n' +
            'üí¨ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤–æ –≤—Å—Ç—Ä–µ—á–∞—Ö –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö.',
            { 
                parse_mode: 'Markdown',
                ...successKeyboard 
            }
        );
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ –ø–∞—Ä–æ–ª—å:', error);
        
        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        userStates.delete(userId);
        
        bot.sendMessage(msg.chat.id, 
            '‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞\n\n' +
            'üîß –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.\n' +
            '–ü–∞—Ä–æ–ª—å –±—ã–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º, –Ω–æ —Å—Ç–∞—Ç—É—Å –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å.\n\n' +
            'üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.',
            { parse_mode: 'Markdown' }
        );
    }
}

// –ö–æ–º–∞–Ω–¥–∞ /cancel - –æ—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
bot.onText(/\/cancel/, async (msg) => {
    const userId = msg.from.id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if (!await checkAccess(msg)) return;
    
    const userState = userStates.get(userId);
    
    if (!userState) {
        bot.sendMessage(msg.chat.id, 
            '‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.\n\n' +
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞.',
            { parse_mode: 'Markdown' }
        );
        return;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è
    let operationName = '–û–ø–µ—Ä–∞—Ü–∏—è';
    switch (userState.state) {
        case 'registration':
            operationName = '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è';
            break;
        case 'adding_car':
            operationName = '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è';
            break;
        case 'creating_invitation':
            operationName = '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è';
            break;
        case 'searching':
            operationName = '–ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—è';
            break;
        case 'setting_user_status':
            operationName = '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
            break;
        case 'setting_password':
            operationName = '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–æ–ª—è';
            break;
        case 'entering_password':
            operationName = '–í–≤–æ–¥ –ø–∞—Ä–æ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞';
            break;
    }
    
    // –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userStates.delete(userId);
    
    const cancelKeyboard = {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'menu' }]
            ]
        }
    };
    
    bot.sendMessage(msg.chat.id, 
        `‚ùå ${operationName} –æ—Ç–º–µ–Ω–µ–Ω–∞\n\n` +
        'üîÑ –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.',
        { 
            parse_mode: 'Markdown',
            ...cancelKeyboard 
        }
    );
    
    console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ—Ç–º–µ–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é: ${userState.state}`);
});

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è

// –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
async function showEditProfileMenu(msg, userId) {
    try {
        const member = await db.getMemberByTelegramId(userId);
        
        if (!member) {
            const notRegisteredKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data: 'register' }],
                        [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
                    ]
                }
            };
            
            bot.sendMessage(msg.chat.id, 
                '‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∫–ª—É–±–µ\n\n' +
                'üöó –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n' +
                'üëá –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:',
                { 
                    parse_mode: 'Markdown',
                    ...notRegisteredKeyboard 
                }
            );
            return;
        }
        
        // –ó–∞–ø—Ä–µ—â–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ "–Ω–æ–≤—ã–π"
        if (member.status === '–Ω–æ–≤—ã–π') {
            const newUserEditKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üìù –ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', callback_data: 'register' }],
                        [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
                    ]
                }
            };
            
            bot.sendMessage(msg.chat.id, 
                'üö´ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n\n' +
                '‚ö†Ô∏è –í–∞—à —Å—Ç–∞—Ç—É—Å: **–Ω–æ–≤—ã–π**\n\n' +
                'üìã –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n' +
                '1Ô∏è‚É£ –ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –∫–ª—É–±–µ\n' +
                '2Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å "–±–µ–∑ –∞–≤—Ç–æ" –∏–ª–∏ –≤—ã—à–µ\n\n' +
                '‚ú® –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è!',
                { 
                    parse_mode: 'Markdown',
                    ...newUserEditKeyboard 
                }
            );
            return;
        }
        
        const keyboard = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üë§ –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', callback_data: 'edit_first_name' }],
                    [{ text: 'üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é', callback_data: 'edit_last_name' }],
                    [{ text: 'üéÇ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è', callback_data: 'edit_birth_date' }],
                    [{ text: 'üèôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥', callback_data: 'edit_city' }],
                    [{ text: 'üåç –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω—É', callback_data: 'edit_country' }],
                    [{ text: 'üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω', callback_data: 'edit_phone' }],
                    [{ text: 'üí≠ –ò–∑–º–µ–Ω–∏—Ç—å "–û —Å–µ–±–µ"', callback_data: 'edit_about' }],
                    [{ text: 'üì∏ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ', callback_data: 'edit_photo' }],
                    [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'my_profile' }]
                ]
            }
        };
        
        let menuText = `‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è\n\n`;
        menuText += `üë§ **–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:**\n`;
        menuText += `‚Ä¢ –ò–º—è: ${member.first_name || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
        menuText += `‚Ä¢ –§–∞–º–∏–ª–∏—è: ${member.last_name || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n`;
        menuText += `‚Ä¢ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${member.birth_date ? formatDate(member.birth_date) : '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n`;
        menuText += `‚Ä¢ –ì–æ—Ä–æ–¥: ${member.city || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n`;
        menuText += `‚Ä¢ –°—Ç—Ä–∞–Ω–∞: ${member.country || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n`;
        menuText += `‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: ${member.phone || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n`;
        menuText += `‚Ä¢ –û —Å–µ–±–µ: ${member.about ? (member.about.length > 50 ? member.about.substring(0, 50) + '...' : member.about) : '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
        menuText += `‚Ä¢ –§–æ—Ç–æ: ${member.photo_url ? '–∑–∞–≥—Ä—É–∂–µ–Ω–æ' : '–Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ'}\n\n`;
        menuText += `üí° **–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**\n`;
        menuText += `‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö\n`;
        menuText += `‚Ä¢ –ò–º—è –Ω–µ–ª—å–∑—è –æ—Å—Ç–∞–≤–ª—è—Ç—å –ø—É—Å—Ç—ã–º`;
        
        bot.sendMessage(msg.chat.id, menuText, { 
            parse_mode: 'Markdown',
            ...keyboard 
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    }
}

// –ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è
async function startEditField(msg, userId, fieldName, title, prompt, required = false) {
    try {
        const member = await db.getMemberByTelegramId(userId);
        
        if (!member) {
            bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        userStates.set(userId, { 
            state: 'editing_profile', 
            step: 'enter_value',
            data: { 
                fieldName: fieldName,
                title: title,
                required: required,
                currentValue: member[fieldName]
            }
        });
        
        let currentValueText = '';
        if (member[fieldName]) {
            if (fieldName === 'birth_date') {
                currentValueText = `\nüìÖ –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${formatDate(member[fieldName])}`;
            } else {
                currentValueText = `\nüìù –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${member[fieldName]}`;
            }
        } else {
            currentValueText = '\nüìù –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: –Ω–µ —É–∫–∞–∑–∞–Ω–æ';
        }
        
        const cancelKeyboard = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'edit_profile' }]
                ]
            }
        };
        
        let promptText = `${title}\n\n${currentValueText}\n\n${prompt}`;
        
        if (!required) {
            promptText += '\n\nüí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö';
        }
        
        bot.sendMessage(msg.chat.id, promptText, { 
            parse_mode: 'Markdown',
            ...cancelKeyboard 
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è:', error);
        bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    }
}

// –ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ
async function startEditPhoto(msg, userId) {
    try {
        const member = await db.getMemberByTelegramId(userId);
        
        if (!member) {
            bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        userStates.set(userId, { 
            state: 'editing_profile', 
            step: 'enter_photo',
            data: { 
                fieldName: 'photo_url',
                title: 'üì∏ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è',
                currentValue: member.photo_url
            }
        });
        
        const photoKeyboard = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ', callback_data: 'delete_photo' }],
                    [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'edit_profile' }]
                ]
            }
        };
        
        let photoText = `üì∏ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è\n\n`;
        photoText += `üìù –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${member.photo_url ? '—Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ' : '—Ñ–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ'}\n\n`;
        photoText += `üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:`;
        
        bot.sendMessage(msg.chat.id, photoText, { 
            parse_mode: 'Markdown',
            ...photoKeyboard 
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ:', error);
        bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ');
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
async function handleEditProfile(msg, userId, userState) {
    const { fieldName, title, required, currentValue } = userState.data;
    
    try {
        if (userState.step === 'enter_value') {
            let newValue = msg.text ? msg.text.trim() : '';
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if (required && !newValue) {
                bot.sendMessage(msg.chat.id, 
                    `‚ùå –ü–æ–ª–µ "${title}" –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º\n\n` +
                    '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:'
                );
                return;
            }
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
            if (fieldName === 'birth_date' && newValue) {
                const dateValidation = validateBirthDate(newValue);
                if (!dateValidation.valid) {
                    bot.sendMessage(msg.chat.id, 
                        `‚ùå ${dateValidation.error}\n\n` +
                        '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990):'
                    );
                    return;
                }
                newValue = dateValidation.date; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const updateData = {};
            updateData[fieldName] = newValue || null;
            
            const result = await db.updateMember(userId, updateData);
            
            if (result.affectedRows === 0) {
                userStates.delete(userId);
                bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
                return;
            }
            
            userStates.delete(userId);
            
            // –£—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            const successKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚úèÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', callback_data: 'edit_profile' }],
                        [{ text: 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'my_profile' }],
                        [{ text: 'üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'menu' }]
                    ]
                }
            };
            
            let successText = `‚úÖ –ü–æ–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!\n\n`;
            successText += `${title.replace('–ò–∑–º–µ–Ω–µ–Ω–∏–µ', '–û–±–Ω–æ–≤–ª–µ–Ω–æ')}\n\n`;
            
            if (newValue) {
                if (fieldName === 'birth_date') {
                    successText += `üìÖ –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${formatDate(newValue)}`;
                } else {
                    successText += `üìù –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${newValue}`;
                }
            } else {
                successText += `üóëÔ∏è –î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã`;
            }
            
            bot.sendMessage(msg.chat.id, successText, { 
                parse_mode: 'Markdown',
                ...successKeyboard 
            });
            
        } else if (userState.step === 'enter_photo') {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –±—É–¥–µ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            bot.sendMessage(msg.chat.id, 
                'üì∏ –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è\n\n' +
                '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ'
            );
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
        userStates.delete(userId);
        bot.sendMessage(msg.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
    }
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
function validateBirthDate(dateString) {
    console.log('üîç validateBirthDate –≤—ã–∑–≤–∞–Ω–∞ —Å:', dateString);
    
    if (!dateString || dateString.trim() === '') {
        console.log('  –ü—É—Å—Ç–∞—è –¥–∞—Ç–∞ - —Ä–∞–∑—Ä–µ—à–µ–Ω–æ');
        return { valid: true, date: null }; // –ü—É—Å—Ç–∞—è –¥–∞—Ç–∞ –¥–æ–ø—É—Å—Ç–∏–º–∞
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì
    const dateRegex = /^(\d{1,2})\.(\d{1,2})\.(\d{4})$/;
    const match = dateString.match(dateRegex);
    
    if (!match) {
        console.log('  –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
        return { 
            valid: false, 
            error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì' 
        };
    }
    
    const day = parseInt(match[1], 10);
    const month = parseInt(match[2], 10);
    const year = parseInt(match[3], 10);
    
    console.log(`  –†–∞–∑–æ–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞: –¥–µ–Ω—å=${day}, –º–µ—Å—è—Ü=${month}, –≥–æ–¥=${year}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
    const date = new Date(year, month - 1, day);
    
    if (date.getFullYear() !== year || 
        date.getMonth() !== month - 1 || 
        date.getDate() !== day) {
        console.log('  –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞');
        return { 
            valid: false, 
            error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ–Ω—å, –º–µ—Å—è—Ü –∏ –≥–æ–¥' 
        };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    const currentYear = new Date().getFullYear();
    if (year < 1900 || year > currentYear - 10) {
        console.log(`  –ì–æ–¥ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: ${year}, –¥–æ–ø—É—Å—Ç–∏–º–æ: 1900-${currentYear - 10}`);
        return { 
            valid: false, 
            error: `–ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 1900 –∏ ${currentYear - 10}` 
        };
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD –¥–ª—è MySQL
    const formattedDate = `${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;
    
    console.log(`  –í–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞: ${formattedDate}`);
    return { 
        valid: true, 
        date: formattedDate 
    };
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
async function handleEditProfilePhoto(msg, userId, userState) {
    try {
        const photo = msg.photo[msg.photo.length - 1]; // –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        const fileName = `${userId}_${Date.now()}.jpg`;
        
        // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        const photoPath = await downloadPhoto(photo.file_id, fileName);
        
        if (!photoPath) {
            bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
            return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const result = await db.updateMember(userId, { photo_url: fileName });
        
        if (result.affectedRows === 0) {
            userStates.delete(userId);
            bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
            return;
        }
        
        userStates.delete(userId);
        
        // –£—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        const successKeyboard = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚úèÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', callback_data: 'edit_profile' }],
                    [{ text: 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'my_profile' }],
                    [{ text: 'üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'menu' }]
                ]
            }
        };
        
        bot.sendMessage(msg.chat.id, 
            '‚úÖ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!\n\n' +
            'üì∏ –ù–æ–≤–æ–µ —Ñ–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ.',
            { 
                parse_mode: 'Markdown',
                ...successKeyboard 
            }
        );
        
                 console.log(`üì∏ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${fileName}`);
         
     } catch (error) {
         console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è:', error);
         userStates.delete(userId);
         bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
     }
 }

// –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
async function deleteProfilePhoto(msg, userId) {
    try {
        const userState = userStates.get(userId);
        if (!userState || userState.state !== 'editing_profile') {
            bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
            return;
        }
        
        // –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const result = await db.updateMember(userId, { photo_url: null });
        
        if (result.affectedRows === 0) {
            userStates.delete(userId);
            bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ');
            return;
        }
        
        userStates.delete(userId);
        
        // –£—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
        const successKeyboard = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚úèÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', callback_data: 'edit_profile' }],
                    [{ text: 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'my_profile' }],
                    [{ text: 'üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'menu' }]
                ]
            }
        };
        
        bot.sendMessage(msg.chat.id, 
            '‚úÖ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è —É–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!\n\n' +
            'üóëÔ∏è –§–æ—Ç–æ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ.',
            { 
                parse_mode: 'Markdown',
                ...successKeyboard 
            }
        );
        
        console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è:', error);
        userStates.delete(userId);
        bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏');
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
async function showEditCarMenu(msg, userId, carId) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        const member = await db.getMemberByTelegramId(userId);
        if (!member) {
            bot.answerCallbackQuery(msg.id, '‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∫–ª—É–±–µ');
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
        const cars = await db.getCarsByMemberId(member.id);
        const car = cars.find(c => c.id.toString() === carId.toString());
        
        if (!car) {
            bot.answerCallbackQuery(msg.id, '‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (–≤–ª–∞–¥–µ–ª–µ—Ü –∏–ª–∏ –∞–¥–º–∏–Ω)
        if (car.member_id !== member.id && !isAdmin(userId)) {
            bot.answerCallbackQuery(msg.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
            return;
        }
        
        let menuText = `‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n\n`;
        menuText += `üöó **${car.brand} ${car.model}**\n`;
        if (car.generation) menuText += `üìã –ü–æ–∫–æ–ª–µ–Ω–∏–µ: ${car.generation}\n`;
        menuText += `üìÖ –ì–æ–¥: ${car.year}\n`;
        menuText += `üî¢ –ù–æ–º–µ—Ä: ${car.reg_number || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n`;
        menuText += `üé® –¶–≤–µ—Ç: ${car.color || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n`;
        menuText += `üìä –°—Ç–∞—Ç—É—Å: ${car.status}\n`;
        menuText += `üí≠ –û–ø–∏—Å–∞–Ω–∏–µ: ${car.description || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö
        let photosCount = 0;
        if (car.photos && car.photos.trim() !== '') {
            try {
                const photos = JSON.parse(car.photos);
                photosCount = photos ? photos.length : 0;
            } catch (e) {
                photosCount = 0;
            }
        }
        menuText += `üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: ${photosCount}/10\n\n`;
        menuText += `üëá –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:`;
        
        const keyboard = {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üè≠ –ú–∞—Ä–∫–∞', callback_data: `edit_car_brand_${carId}` },
                        { text: 'üöó –ú–æ–¥–µ–ª—å', callback_data: `edit_car_model_${carId}` }
                    ],
                    [
                        { text: 'üìã –ü–æ–∫–æ–ª–µ–Ω–∏–µ', callback_data: `edit_car_generation_${carId}` },
                        { text: 'üìÖ –ì–æ–¥', callback_data: `edit_car_year_${carId}` }
                    ],
                    [
                        { text: 'üî¢ –ù–æ–º–µ—Ä', callback_data: `edit_car_reg_number_${carId}` },
                        { text: 'üé® –¶–≤–µ—Ç', callback_data: `edit_car_color_${carId}` }
                    ],
                    [
                        { text: 'üí≠ –û–ø–∏—Å–∞–Ω–∏–µ', callback_data: `edit_car_description_${carId}` }
                    ],
                    [
                        { text: 'üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ', callback_data: `edit_car_add_photo_${carId}` }
                    ]
                ]
            }
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        if (photosCount > 0) {
            keyboard.reply_markup.inline_keyboard.splice(-1, 0, [
                { text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ', callback_data: `edit_car_delete_photo_${carId}` }
            ]);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –∞–≤—Ç–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        if (isAdmin(userId)) {
            keyboard.reply_markup.inline_keyboard.push([
                { text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å', callback_data: `delete_car_${carId}` }
            ]);
        }
        
        // –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.reply_markup.inline_keyboard.push([
            { text: 'üîô –ù–∞–∑–∞–¥ –∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º', callback_data: 'my_cars' }
        ]);
        
        try {
            await bot.editMessageText(menuText, {
                chat_id: msg.chat.id,
                message_id: msg.message_id,
                parse_mode: 'Markdown',
                ...keyboard
            });
        } catch (editError) {
            await bot.sendMessage(msg.chat.id, menuText, {
                parse_mode: 'Markdown',
                ...keyboard
            });
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ:', error);
        bot.answerCallbackQuery(msg.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
}

// –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
async function startEditCarField(msg, userId, carId, fieldName, title, prompt, required = false) {
    try {
        const member = await db.getMemberByTelegramId(userId);
        if (!member) return;
        
        const cars = await db.getCarsByMemberId(member.id);
        const car = cars.find(c => c.id.toString() === carId.toString());
        
        if (!car || (car.member_id !== member.id && !isAdmin(userId))) {
            bot.answerCallbackQuery(msg.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
            return;
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        userStates.set(userId, {
            state: 'editing_car',
            step: `edit_${fieldName}`,
            data: { carId, fieldName, required }
        });
        
        const keyboard = required ? {} : {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: `edit_car_${carId}` }]
                ]
            }
        };
        
        let promptText = `${title}\n\n`;
        if (car[fieldName]) {
            promptText += `üìù –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: **${car[fieldName]}**\n\n`;
        }
        promptText += prompt;
        
        if (!required) {
            promptText += `\n\nüí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è`;
        }
        
        bot.sendMessage(msg.chat.id, promptText, {
            parse_mode: 'Markdown',
            ...keyboard
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è –∞–≤—Ç–æ:', error);
        bot.answerCallbackQuery(msg.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
}

// –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—é
async function startEditCarPhoto(msg, userId, carId) {
    try {
        const member = await db.getMemberByTelegramId(userId);
        if (!member) return;
        
        const cars = await db.getCarsByMemberId(member.id);
        const car = cars.find(c => c.id.toString() === carId.toString());
        
        if (!car || (car.member_id !== member.id && !isAdmin(userId))) {
            bot.answerCallbackQuery(msg.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–æ—Ç–æ
        let currentPhotosCount = 0;
        if (car.photos && car.photos.trim() !== '') {
            try {
                const photos = JSON.parse(car.photos);
                currentPhotosCount = photos ? photos.length : 0;
            } catch (e) {
                currentPhotosCount = 0;
            }
        }
        
        if (currentPhotosCount >= 10) {
            bot.answerCallbackQuery(msg.id, '‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (10)');
            return;
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ
        userStates.set(userId, {
            state: 'editing_car',
            step: 'add_photo',
            data: { carId }
        });
        
        const keyboard = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: `edit_car_${carId}` }]
                ]
            }
        };
        
        bot.sendMessage(msg.chat.id, 
            `üì∑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—é\n\n` +
            `üöó ${car.brand} ${car.model}\n` +
            `üìä –¢–µ–∫—É—â–∏—Ö —Ñ–æ—Ç–æ: ${currentPhotosCount}/10\n\n` +
            `üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n\n` +
            `üí° **–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –ø–æ–¥—Ä—è–¥!**\n` +
            `‚Ä¢ –ù–æ–≤—ã–µ —Ñ–æ—Ç–æ —Å—Ç–∞–Ω—É—Ç –≥–ª–∞–≤–Ω—ã–º–∏ (–±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –ø–µ—Ä–≤—ã–º–∏)\n` +
            `‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–æ –æ–¥–Ω–æ–º—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ\n` +
            `‚Ä¢ –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ñ–æ—Ç–æ –Ω–∞–∂–º–∏—Ç–µ "üîô –û—Ç–º–µ–Ω–∏—Ç—å" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞`,
            {
                parse_mode: 'Markdown',
                ...keyboard
            }
        );
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –∞–≤—Ç–æ:', error);
        bot.answerCallbackQuery(msg.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
async function handleEditCar(msg, userId, userState) {
    const step = userState.step;
    const data = userState.data;
    
    try {
        if (step.startsWith('edit_')) {
            const fieldName = data.fieldName;
            const carId = data.carId;
            const inputValue = msg.text.trim();
            
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≥–æ–¥–∞
            if (fieldName === 'year') {
                const year = parseInt(inputValue);
                if (isNaN(year) || year < 1900 || year > new Date().getFullYear() + 1) {
                    bot.sendMessage(msg.chat.id, 
                        `‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥\n\n` +
                        `–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –æ—Ç 1900 –¥–æ ${new Date().getFullYear() + 1}`,
                        { parse_mode: 'Markdown' }
                    );
                    return;
                }
            }
            
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            const updateData = {};
            
            // –ï—Å–ª–∏ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–ª–µ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ - —É–¥–∞–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            if (inputValue === '' && !data.required) {
                updateData[fieldName] = null;
            } else if (inputValue !== '') {
                updateData[fieldName] = inputValue;
            } else if (data.required) {
                bot.sendMessage(msg.chat.id, 
                    `‚ùå –≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è\n\n` +
                    `–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:`,
                    { parse_mode: 'Markdown' }
                );
                return;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const result = await db.updateCar(carId, updateData);
            
            if (result.affectedRows > 0) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–æ–º–µ—Ä
                if (fieldName === 'reg_number' && inputValue !== '') {
                    await checkAndUpdateInvitationStatus(inputValue, carId);
                }
                
                userStates.delete(userId);
                
                bot.sendMessage(msg.chat.id, 
                    `‚úÖ –ü–æ–ª–µ "${getFieldDisplayName(fieldName)}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n` +
                    `üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...`,
                    { parse_mode: 'Markdown' }
                );
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                setTimeout(async () => {
                    await showEditCarMenu(msg, userId, carId);
                }, 1000);
            } else {
                bot.sendMessage(msg.chat.id, 
                    `‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è\n\n` +
                    `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`,
                    { parse_mode: 'Markdown' }
                );
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ:', error);
        userStates.delete(userId);
        bot.sendMessage(msg.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π');
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
async function handleEditCarPhoto(msg, userId, userState) {
    const carId = userState.data.carId;
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
        const member = await db.getMemberByTelegramId(userId);
        const cars = await db.getCarsByMemberId(member.id);
        const car = cars.find(c => c.id.toString() === carId.toString());
        
        if (!car) {
            bot.sendMessage(msg.chat.id, '‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            userStates.delete(userId);
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ
        let currentPhotos = [];
        if (car.photos && car.photos.trim() !== '') {
            try {
                currentPhotos = JSON.parse(car.photos) || [];
            } catch (e) {
                currentPhotos = [];
            }
        }
        
        if (currentPhotos.length >= 10) {
            bot.sendMessage(msg.chat.id, '‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (10)');
            userStates.delete(userId);
            return;
        }
        
        // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        const photo = msg.photo[msg.photo.length - 1]; // –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        const fileName = `car_${carId}_${Date.now()}.jpg`;
        
        const downloadResult = await downloadCarPhoto(photo.file_id, fileName);
        
        if (downloadResult.success) {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞ (—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≥–ª–∞–≤–Ω—ã–º)
            const updatedPhotos = [fileName, ...currentPhotos];
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const result = await db.updateCar(carId, { photos: JSON.stringify(updatedPhotos) });
            
            if (result.affectedRows > 0) {
                // –ù–ï —É–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ
                
                const continueKeyboard = {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üì∏ –ï—â–µ —Ñ–æ—Ç–æ', callback_data: 'continue_adding_photos' }],
                            [{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data: `edit_car_${carId}` }]
                        ]
                    }
                };
                
                bot.sendMessage(msg.chat.id, 
                    `‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è ${updatedPhotos.length} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n` +
                    `üì∑ –í—Å–µ–≥–æ —Ñ–æ—Ç–æ —É –∞–≤—Ç–æ–º–æ–±–∏–ª—è: ${updatedPhotos.length}/10\n` +
                    `üéØ –ù–æ–≤–æ–µ —Ñ–æ—Ç–æ —Å—Ç–∞–ª–æ –≥–ª–∞–≤–Ω—ã–º\n\n` +
                    `üì∏ **–ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ** –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å:`,
                    { 
                        parse_mode: 'Markdown',
                        ...continueKeyboard 
                    }
                );
            } else {
                bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏');
                userStates.delete(userId);
            }
        } else {
            bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏');
            userStates.delete(userId);
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ –∞–≤—Ç–æ:', error);
        userStates.delete(userId);
        bot.sendMessage(msg.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏');
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
async function checkAndUpdateInvitationStatus(regNumber, carId) {
    try {
        if (!regNumber) return;
        
        // 1. –ò—â–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–∏-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Å —Ç–∞–∫–∏–º –∂–µ –Ω–æ–º–µ—Ä–æ–º
        const existingCars = await db.getCarsByRegNumber(regNumber);
        const invitationCars = existingCars.filter(car => 
            car.status === '–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ' && 
            car.id.toString() !== carId.toString()
        );
        
        // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∞–≤—Ç–æ–º–æ–±–∏–ª–∏-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç—É—Å "–≤ –∫–ª—É–±–µ"
        for (const invitationCar of invitationCars) {
            try {
                await db.updateCar(invitationCar.id, { status: '–≤ –∫–ª—É–±–µ' });
                console.log(`‚úÖ –ê–≤—Ç–æ–º–æ–±–∏–ª—å-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ ${invitationCar.id} (${regNumber}) –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å "–≤ –∫–ª—É–±–µ"`);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
                const carInvitations = await db.getInvitationsByCar(invitationCar.id);
                for (const invitation of carInvitations) {
                    if (invitation.status === '–Ω–æ–≤–æ–µ' || invitation.status === '–æ–∂–∏–¥–∞–Ω–∏–µ') {
                        await db.updateInvitation(invitation.id, { 
                            status: '–≤—Å—Ç—É–ø–∏–ª –≤ –∫–ª—É–±',
                            response_date: new Date().toISOString().split('T')[0],
                            club_car_id: carId // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å —Å –º–∞—à–∏–Ω–æ–π –≤ –∫–ª—É–±–µ
                        });
                        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è ${invitation.id}: –Ω–æ–º–µ—Ä ${regNumber} –≤—Å—Ç—É–ø–∏–ª –≤ –∫–ª—É–±, —Å–≤—è–∑–∞–Ω —Å –º–∞—à–∏–Ω–æ–π ${carId}`);
                    }
                }
            } catch (updateError) {
                console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è ${invitationCar.id}:`, updateError);
            }
        }
        
        // 2. –ò—â–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–µ–∫—É—â–∏–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º (–µ—Å–ª–∏ –æ–Ω —Å–∞–º –±—ã–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º)
        const currentCarInvitations = await db.getInvitationsByCar(carId);
        for (const invitation of currentCarInvitations) {
            if (invitation.status === '–Ω–æ–≤–æ–µ' || invitation.status === '–æ–∂–∏–¥–∞–Ω–∏–µ') {
                await db.updateInvitation(invitation.id, { 
                    status: '–≤—Å—Ç—É–ø–∏–ª –≤ –∫–ª—É–±',
                    response_date: new Date().toISOString().split('T')[0],
                    club_car_id: carId // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å —Å –º–∞—à–∏–Ω–æ–π –≤ –∫–ª—É–±–µ
                });
                console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è ${invitation.id}: –Ω–æ–º–µ—Ä ${regNumber} –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—é, —Å–≤—è–∑–∞–Ω —Å –º–∞—à–∏–Ω–æ–π ${carId}`);
            }
        }
        
        // 3. –ò—â–µ–º –í–°–ï –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Å —Ç–∞–∫–∏–º –∂–µ –Ω–æ–º–µ—Ä–æ–º (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç car_id)
        // –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ –Ω–æ–º–µ—Ä –µ—Å—Ç—å –≤ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è—Ö, –Ω–æ –Ω–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        const allInvitations = await db.getInvitationsByCarNumber(regNumber);
        for (const invitation of allInvitations) {
            if ((invitation.status === '–Ω–æ–≤–æ–µ' || invitation.status === '–æ–∂–∏–¥–∞–Ω–∏–µ') && !invitation.club_car_id) {
                await db.updateInvitation(invitation.id, { 
                    status: '–≤—Å—Ç—É–ø–∏–ª –≤ –∫–ª—É–±',
                    response_date: new Date().toISOString().split('T')[0],
                    club_car_id: carId // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å —Å –º–∞—à–∏–Ω–æ–π –≤ –∫–ª—É–±–µ
                });
                console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è ${invitation.id}: –Ω–æ–º–µ—Ä ${regNumber} –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è—Ö, —Å–≤—è–∑–∞–Ω —Å –º–∞—à–∏–Ω–æ–π ${carId}`);
            }
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
async function showDeleteCarPhotoMenu(msg, userId, carId) {
    try {
        const member = await db.getMemberByTelegramId(userId);
        if (!member) return;
        
        const cars = await db.getCarsByMemberId(member.id);
        const car = cars.find(c => c.id.toString() === carId.toString());
        
        if (!car || (car.member_id !== member.id && !isAdmin(userId))) {
            bot.answerCallbackQuery(msg.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ
        let currentPhotos = [];
        if (car.photos && car.photos.trim() !== '') {
            try {
                currentPhotos = JSON.parse(car.photos) || [];
            } catch (e) {
                currentPhotos = [];
            }
        }
        
        if (currentPhotos.length === 0) {
            bot.answerCallbackQuery(msg.id, '‚ùå –£ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π');
            return;
        }
        
        if (currentPhotos.length === 1) {
            bot.answerCallbackQuery(msg.id, '‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ');
            return;
        }
        
        let menuText = `üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n\n`;
        menuText += `üöó **${car.brand} ${car.model}**\n`;
        menuText += `üì∑ –í—Å–µ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: ${currentPhotos.length}\n\n`;
        menuText += `‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –ú–∏–Ω–∏–º—É–º 1 —Ñ–æ—Ç–æ –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è\n\n`;
        menuText += `üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:`;
        
        const keyboard = {
            reply_markup: {
                inline_keyboard: []
            }
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–æ—Ç–æ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –µ—Å–ª–∏ –æ–Ω–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ)
        currentPhotos.forEach((photo, index) => {
            if (currentPhotos.length > 1) { // –ú–æ–∂–µ–º —É–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ–ª—å—à–µ 1 —Ñ–æ—Ç–æ
                keyboard.reply_markup.inline_keyboard.push([
                    { 
                        text: `üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ ${index + 1} ${index === 0 ? '(–≥–ª–∞–≤–Ω–æ–µ)' : ''}`, 
                        callback_data: `delete_car_photo_${carId}_${index}` 
                    }
                ]);
            }
        });
        
        // –ö–Ω–æ–ø–∫–∞ "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫—Ä–æ–º–µ –≥–ª–∞–≤–Ω–æ–≥–æ"
        if (currentPhotos.length > 1) {
            keyboard.reply_markup.inline_keyboard.push([
                { text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫—Ä–æ–º–µ –≥–ª–∞–≤–Ω–æ–≥–æ', callback_data: `delete_car_photos_except_main_${carId}` }
            ]);
        }
        
        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        keyboard.reply_markup.inline_keyboard.push([
            { text: 'üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é', callback_data: `edit_car_${carId}` }
        ]);
        
        try {
            await bot.editMessageText(menuText, {
                chat_id: msg.chat.id,
                message_id: msg.message_id,
                parse_mode: 'Markdown',
                ...keyboard
            });
        } catch (editError) {
            await bot.sendMessage(msg.chat.id, menuText, {
                parse_mode: 'Markdown',
                ...keyboard
            });
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –∞–≤—Ç–æ:', error);
        bot.answerCallbackQuery(msg.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
}

// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
async function deleteCarPhoto(msg, userId, carId, photoIndex) {
    try {
        const member = await db.getMemberByTelegramId(userId);
        if (!member) return;
        
        const cars = await db.getCarsByMemberId(member.id);
        const car = cars.find(c => c.id.toString() === carId.toString());
        
        if (!car || (car.member_id !== member.id && !isAdmin(userId))) {
            bot.answerCallbackQuery(msg.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–æ—Ç–æ
        let currentPhotos = [];
        if (car.photos && car.photos.trim() !== '') {
            try {
                currentPhotos = JSON.parse(car.photos) || [];
            } catch (e) {
                currentPhotos = [];
            }
        }
        
        if (currentPhotos.length <= 1) {
            bot.answerCallbackQuery(msg.id, '‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ');
            return;
        }
        
        if (photoIndex >= currentPhotos.length) {
            bot.answerCallbackQuery(msg.id, '‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            return;
        }
        
        // –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ –∏–∑ –º–∞—Å—Å–∏–≤–∞
        const deletedPhoto = currentPhotos.splice(photoIndex, 1)[0];
        
        // –£–¥–∞–ª—è–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª
        try {
            const fs = require('fs');
            const path = require('path');
            const photoPath = path.resolve(config.UPLOADS.carsPath, deletedPhoto);
            if (fs.existsSync(photoPath)) {
                fs.unlinkSync(photoPath);
                console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª —Ñ–æ—Ç–æ: ${deletedPhoto}`);
            }
        } catch (fileError) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ:', fileError);
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —É–¥–∞–ª–∏–ª—Å—è
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        const result = await db.updateCar(carId, { photos: JSON.stringify(currentPhotos) });
        
        if (result.affectedRows > 0) {
            bot.sendMessage(msg.chat.id, 
                `‚úÖ –§–æ—Ç–æ ${photoIndex + 1} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!\n\n` +
                `üì∑ –û—Å—Ç–∞–ª–æ—Å—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: ${currentPhotos.length}\n\n` +
                `üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...`,
                { parse_mode: 'Markdown' }
            );
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            setTimeout(async () => {
                await showEditCarMenu(msg, userId, carId);
            }, 1000);
        } else {
            bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –∞–≤—Ç–æ:', error);
        bot.answerCallbackQuery(msg.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏');
    }
}

// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–æ—Ç–æ –∫—Ä–æ–º–µ –≥–ª–∞–≤–Ω–æ–≥–æ
async function deleteCarPhotosExceptMain(msg, userId, carId) {
    try {
        const member = await db.getMemberByTelegramId(userId);
        if (!member) return;
        
        const cars = await db.getCarsByMemberId(member.id);
        const car = cars.find(c => c.id.toString() === carId.toString());
        
        if (!car || (car.member_id !== member.id && !isAdmin(userId))) {
            bot.answerCallbackQuery(msg.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–æ—Ç–æ
        let currentPhotos = [];
        if (car.photos && car.photos.trim() !== '') {
            try {
                currentPhotos = JSON.parse(car.photos) || [];
            } catch (e) {
                currentPhotos = [];
            }
        }
        
        if (currentPhotos.length <= 1) {
            bot.answerCallbackQuery(msg.id, '‚ùå –£ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Ñ–æ—Ç–æ');
            return;
        }
        
        const mainPhoto = currentPhotos[0]; // –ì–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ (–ø–µ—Ä–≤–æ–µ)
        const photosToDelete = currentPhotos.slice(1); // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ
        
        // –£–¥–∞–ª—è–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
        const fs = require('fs');
        const path = require('path');
        let deletedCount = 0;
        
        photosToDelete.forEach(photoName => {
            try {
                const photoPath = path.resolve(config.UPLOADS.carsPath, photoName);
                if (fs.existsSync(photoPath)) {
                    fs.unlinkSync(photoPath);
                    deletedCount++;
                    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª —Ñ–æ—Ç–æ: ${photoName}`);
                }
            } catch (fileError) {
                console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ:', fileError);
            }
        });
        
        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ
        const updatedPhotos = [mainPhoto];
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        const result = await db.updateCar(carId, { photos: JSON.stringify(updatedPhotos) });
        
        if (result.affectedRows > 0) {
            bot.sendMessage(msg.chat.id, 
                `‚úÖ –£–¥–∞–ª–µ–Ω–æ ${photosToDelete.length} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π!\n\n` +
                `üì∑ –û—Å—Ç–∞–≤–ª–µ–Ω–æ: 1 –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ\n` +
                `üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${deletedCount}\n\n` +
                `üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...`,
                { parse_mode: 'Markdown' }
            );
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            setTimeout(async () => {
                await showEditCarMenu(msg, userId, carId);
            }, 1000);
        } else {
            bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –∞–≤—Ç–æ –∫—Ä–æ–º–µ –≥–ª–∞–≤–Ω–æ–≥–æ:', error);
        bot.answerCallbackQuery(msg.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏');
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
async function showDeleteCarConfirmation(msg, userId, carId) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
        if (!isAdmin(userId)) {
            bot.answerCallbackQuery(msg.id, '‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª–∏');
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–∞–ø—Ä—è–º—É—é –ø–æ ID (–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –ª—é–±—ã–µ –∞–≤—Ç–æ)
        const allCars = await db.getAllCars();
        const car = allCars.find(c => c.id.toString() === carId.toString());
        
        if (!car) {
            bot.answerCallbackQuery(msg.id, '‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        const owner = await db.getMemberById(car.member_id);
        
        let confirmText = `‚ö†Ô∏è **–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –£–î–ê–õ–ï–ù–ò–Ø –ê–í–¢–û–ú–û–ë–ò–õ–Ø**\n\n`;
        confirmText += `üöó **–ê–≤—Ç–æ–º–æ–±–∏–ª—å:** ${car.brand} ${car.model}`;
        if (car.generation) confirmText += ` (${car.generation})`;
        confirmText += `\nüìÖ –ì–æ–¥: ${car.year}`;
        if (car.reg_number) confirmText += `\nüî¢ –ù–æ–º–µ—Ä: ${car.reg_number}`;
        confirmText += `\nüìä –°—Ç–∞—Ç—É—Å: ${car.status}`;
        
        if (owner) {
            confirmText += `\n\nüë§ **–í–ª–∞–¥–µ–ª–µ—Ü:** ${owner.first_name}`;
            if (owner.last_name) confirmText += ` ${owner.last_name}`;
            if (owner.nickname) confirmText += ` (@${owner.nickname})`;
        }
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö
        let photosCount = 0;
        if (car.photos && car.photos.trim() !== '') {
            try {
                const photos = JSON.parse(car.photos);
                photosCount = photos ? photos.length : 0;
            } catch (e) {
                photosCount = 0;
            }
        }
        confirmText += `\nüì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: ${photosCount}`;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        const invitations = await db.getInvitationsByCar(carId);
        if (invitations.length > 0) {
            confirmText += `\nüìÆ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: ${invitations.length}`;
        }
        
        confirmText += `\n\nüî• **–í–ù–ò–ú–ê–ù–ò–ï!**`;
        confirmText += `\n‚Ä¢ –ê–≤—Ç–æ–º–æ–±–∏–ª—å –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω **–ù–ê–í–°–ï–ì–î–ê**`;
        confirmText += `\n‚Ä¢ –í—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã —Å –¥–∏—Å–∫–∞`;
        if (invitations.length > 0) {
            confirmText += `\n‚Ä¢ –í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã`;
        }
        confirmText += `\n‚Ä¢ –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ **–ù–ï–û–ë–†–ê–¢–ò–ú–û**`;
        
        confirmText += `\n\n‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å?`;
        
        const keyboard = {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üî• –î–ê, –£–î–ê–õ–ò–¢–¨', callback_data: `confirm_delete_car_${carId}` }
                    ],
                    [
                        { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: `edit_car_${carId}` }
                    ]
                ]
            }
        };
        
        try {
            await bot.editMessageText(confirmText, {
                chat_id: msg.chat.id,
                message_id: msg.message_id,
                parse_mode: 'Markdown',
                ...keyboard
            });
        } catch (editError) {
            await bot.sendMessage(msg.chat.id, confirmText, {
                parse_mode: 'Markdown',
                ...keyboard
            });
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∞–≤—Ç–æ:', error);
        bot.answerCallbackQuery(msg.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
async function deleteCarCompletely(msg, userId, carId) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
        if (!isAdmin(userId)) {
            bot.answerCallbackQuery(msg.id, '‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª–∏');
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º (–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –ª—é–±—ã–µ –∞–≤—Ç–æ)
        const allCars = await db.getAllCars();
        const car = allCars.find(c => c.id.toString() === carId.toString());
        
        if (!car) {
            bot.answerCallbackQuery(msg.id, '‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        const owner = await db.getMemberById(car.member_id);
        
        let deletedPhotosCount = 0;
        let deletedInvitationsCount = 0;
        
        // 1. –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –¥–∏—Å–∫–∞
        if (car.photos && car.photos.trim() !== '') {
            try {
                const photos = JSON.parse(car.photos);
                if (photos && photos.length > 0) {
                    const fs = require('fs');
                    const path = require('path');
                    
                    photos.forEach(photoName => {
                        try {
                            const photoPath = path.resolve(config.UPLOADS.carsPath, photoName);
                            if (fs.existsSync(photoPath)) {
                                fs.unlinkSync(photoPath);
                                deletedPhotosCount++;
                                console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª —Ñ–æ—Ç–æ: ${photoName}`);
                            }
                        } catch (fileError) {
                            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ:', fileError);
                        }
                    });
                }
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:', e);
            }
        }
        
        // 2. –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º
        const invitations = await db.getInvitationsByCar(carId);
        for (const invitation of invitations) {
            try {
                await db.updateInvitation(invitation.id, { status: '—É–¥–∞–ª–µ–Ω' });
                deletedInvitationsCount++;
            } catch (invError) {
                console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', invError);
            }
        }
        
        // 3. –£–¥–∞–ª—è–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –µ—Å—Ç—å –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è deleteCar, –µ—Å–ª–∏ –Ω–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º updateCar
        try {
            // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
            const result = await db.updateCar(carId, { 
                status: '—É–¥–∞–ª–µ–Ω',
                member_id: null
            });
            
            if (result.affectedRows > 0) {
                // –õ–æ–≥–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
                console.log(`üóëÔ∏è –ê–≤—Ç–æ–º–æ–±–∏–ª—å —É–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω–æ–º ${userId}:`);
                console.log(`   –ê–≤—Ç–æ: ${car.brand} ${car.model} (ID: ${carId})`);
                console.log(`   –í–ª–∞–¥–µ–ª–µ—Ü: ${owner ? owner.first_name : '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'} (ID: ${car.member_id})`);
                console.log(`   –£–¥–∞–ª–µ–Ω–æ —Ñ–æ—Ç–æ: ${deletedPhotosCount}`);
                console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: ${deletedInvitationsCount}`);
                
                let successText = `‚úÖ **–ê–≤—Ç–æ–º–æ–±–∏–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!**\n\n`;
                successText += `üöó ${car.brand} ${car.model}`;
                if (car.reg_number) successText += ` (${car.reg_number})`;
                successText += `\n\nüìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:**`;
                successText += `\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Ñ–æ—Ç–æ: ${deletedPhotosCount}`;
                successText += `\nüìÆ –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: ${deletedInvitationsCount}`;
                successText += `\nüíæ –ê–≤—Ç–æ–º–æ–±–∏–ª—å –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π`;
                
                if (owner) {
                    successText += `\n\nüë§ **–í–ª–∞–¥–µ–ª–µ—Ü —É–≤–µ–¥–æ–º–ª–µ–Ω:** ${owner.first_name}`;
                    if (owner.last_name) successText += ` ${owner.last_name}`;
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É
                    try {
                        await bot.sendMessage(owner.telegram_id, 
                            `‚ö†Ô∏è **–í–∞—à –∞–≤—Ç–æ–º–æ–±–∏–ª—å —É–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º**\n\n` +
                            `üöó ${car.brand} ${car.model}` +
                            (car.reg_number ? ` (${car.reg_number})` : '') + `\n\n` +
                            `üìÖ –î–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${new Date().toLocaleDateString('ru-RU')}\n\n` +
                            `üí¨ –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∫–ª—É–±–∞.`,
                            { parse_mode: 'Markdown' }
                        );
                        console.log(`üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü—É ${owner.telegram_id}`);
                    } catch (notifyError) {
                        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É:', notifyError);
                        successText += `\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É`;
                    }
                }
                
                successText += `\n\nüîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π...`;
                
                const successKeyboard = {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üöó –ú–æ–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏', callback_data: 'my_cars' }],
                            [{ text: 'üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'menu' }]
                        ]
                    }
                };
                
                bot.sendMessage(msg.chat.id, successText, {
                    parse_mode: 'Markdown',
                    ...successKeyboard
                });
                
            } else {
                bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
            }
            
        } catch (dbError) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ –ë–î:', dbError);
            bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', error);
        bot.answerCallbackQuery(msg.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏');
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
async function showSellCarConfirmation(msg, userId, carId) {
    try {
        const member = await db.getMemberByTelegramId(userId);
        if (!member) return;
        
        const cars = await db.getCarsByMemberId(member.id);
        const car = cars.find(c => c.id.toString() === carId.toString());
        
        if (!car) {
            bot.answerCallbackQuery(msg.id, '‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
        if (car.member_id !== member.id) {
            bot.answerCallbackQuery(msg.id, '‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —ç—Ç–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è');
            return;
        }
        
        let confirmText = `üí∏ **–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ü–†–û–î–ê–ñ–ò –ê–í–¢–û–ú–û–ë–ò–õ–Ø**\n\n`;
        confirmText += `üöó **–ê–≤—Ç–æ–º–æ–±–∏–ª—å:** ${car.brand} ${car.model}`;
        if (car.generation) confirmText += ` (${car.generation})`;
        confirmText += `\nüìÖ –ì–æ–¥: ${car.year}`;
        if (car.reg_number) confirmText += `\nüî¢ –ù–æ–º–µ—Ä: ${car.reg_number}`;
        if (car.color) confirmText += `\nüé® –¶–≤–µ—Ç: ${car.color}`;
        confirmText += `\nüìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${car.status}`;
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö
        let photosCount = 0;
        if (car.photos && car.photos.trim() !== '') {
            try {
                const photos = JSON.parse(car.photos);
                photosCount = photos ? photos.length : 0;
            } catch (e) {
                photosCount = 0;
            }
        }
        confirmText += `\nüì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: ${photosCount}`;
        
        confirmText += `\n\nüí∏ **–ß–¢–û –ü–†–û–ò–ó–û–ô–î–ï–¢ –ü–†–ò –ü–†–û–î–ê–ñ–ï:**`;
        confirmText += `\n‚Ä¢ –í—ã **–ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç–µ –±—ã—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º** —ç—Ç–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è`;
        confirmText += `\n‚Ä¢ –ê–≤—Ç–æ–º–æ–±–∏–ª—å –ø–æ–ª—É—á–∏—Ç —Å—Ç–∞—Ç—É—Å **"–ø—Ä–æ–¥–∞–Ω"**`;
        confirmText += `\n‚Ä¢ –ê–≤—Ç–æ–º–æ–±–∏–ª—å **–æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ –±–∞–∑–µ** –∫–ª—É–±–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏`;
        confirmText += `\n‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ **—Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è** –≤ —Å–∏—Å—Ç–µ–º–µ`;
        confirmText += `\n‚Ä¢ –ù–æ–≤—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü —Å–º–æ–∂–µ—Ç **–¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å** —Å–µ–±–µ`;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        const invitations = await db.getInvitationsByCar(carId);
        if (invitations.length > 0) {
            confirmText += `\n‚Ä¢ –°–≤—è–∑–∞–Ω–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è (${invitations.length}) **–æ—Å—Ç–∞–Ω—É—Ç—Å—è –≤ –∏—Å—Ç–æ—Ä–∏–∏**`;
        }
        
        confirmText += `\n\n‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å —ç—Ç–æ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å?`;
        
        const keyboard = {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üí∏ –î–ê, –ü–†–û–î–ê–¢–¨', callback_data: `confirm_sell_car_${carId}` }
                    ],
                    [
                        { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: `edit_car_${carId}` }
                    ]
                ]
            }
        };
        
        try {
            await bot.editMessageText(confirmText, {
                chat_id: msg.chat.id,
                message_id: msg.message_id,
                parse_mode: 'Markdown',
                ...keyboard
            });
        } catch (editError) {
            await bot.sendMessage(msg.chat.id, confirmText, {
                parse_mode: 'Markdown',
                ...keyboard
            });
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏ –∞–≤—Ç–æ:', error);
        bot.answerCallbackQuery(msg.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–¥–∞–∂–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
async function sellCarCompletely(msg, userId, carId) {
    try {
        const member = await db.getMemberByTelegramId(userId);
        if (!member) return;
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–∞–∂–µ–π
        const cars = await db.getCarsByMemberId(member.id);
        const car = cars.find(c => c.id.toString() === carId.toString());
        
        if (!car) {
            bot.answerCallbackQuery(msg.id, '‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
        if (car.member_id !== member.id) {
            bot.answerCallbackQuery(msg.id, '‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —ç—Ç–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è');
            return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–∞ "–ø—Ä–æ–¥–∞–Ω" –∏ —É–±–∏—Ä–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
        try {
            const result = await db.updateCar(carId, { 
                status: '–ø—Ä–æ–¥–∞–Ω',
                member_id: null
            });
            
            if (result.affectedRows > 0) {
                // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–∂—É
                console.log(`üí∏ –ê–≤—Ç–æ–º–æ–±–∏–ª—å –ø—Ä–æ–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId}:`);
                console.log(`   –ê–≤—Ç–æ: ${car.brand} ${car.model} (ID: ${carId})`);
                console.log(`   –ë—ã–≤—à–∏–π –≤–ª–∞–¥–µ–ª–µ—Ü: ${member.first_name} (ID: ${member.id})`);
                
                let successText = `‚úÖ **–ê–≤—Ç–æ–º–æ–±–∏–ª—å —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–Ω!**\n\n`;
                successText += `üöó ${car.brand} ${car.model}`;
                if (car.reg_number) successText += ` (${car.reg_number})`;
                successText += `\n\nüìä **–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–¥–∞–∂–∏:**`;
                successText += `\nüí∏ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "–ø—Ä–æ–¥–∞–Ω"`;
                successText += `\nüë§ –í—ã –±–æ–ª—å—à–µ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º`;
                successText += `\nüìã –ê–≤—Ç–æ–º–æ–±–∏–ª—å –æ—Å—Ç–∞–ª—Å—è –≤ –±–∞–∑–µ –∫–ª—É–±–∞`;
                successText += `\nüîÑ –ù–æ–≤—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ —Å–µ–±–µ`;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–ª–∏—è–µ—Ç –ª–∏ —ç—Ç–æ –Ω–∞ —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const remainingCars = await db.getCarsByMemberId(member.id);
                const activeCarsCount = remainingCars.filter(c => c.status !== '–≤—ã—à–µ–ª' && c.status !== '–ø—Ä–æ–¥–∞–Ω').length;
                
                if (activeCarsCount === 0 && member.status === '—É—á–∞—Å—Ç–Ω–∏–∫') {
                    // –ï—Å–ª–∏ —É —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π, –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–±–µ–∑ –∞–≤—Ç–æ"
                    await db.updateMemberStatus(userId, '–±–µ–∑ –∞–≤—Ç–æ');
                    successText += `\n\nüìä **–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞:**`;
                    successText += `\n‚ö™ –í–∞—à —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "–±–µ–∑ –∞–≤—Ç–æ"`;
                    successText += `\nüí° –£ –≤–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π`;
                    
                    console.log(`üìä –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${member.first_name} –∏–∑–º–µ–Ω–µ–Ω: —É—á–∞—Å—Ç–Ω–∏–∫ ‚Üí –±–µ–∑ –∞–≤—Ç–æ (–ø—Ä–æ–¥–∞–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å)`);
                }
                
                successText += `\n\nüîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π...`;
                
                const successKeyboard = {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üöó –ú–æ–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏', callback_data: 'my_cars' }],
                            [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å', callback_data: 'add_car' }],
                            [{ text: 'üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'menu' }]
                        ]
                    }
                };
                
                bot.sendMessage(msg.chat.id, successText, {
                    parse_mode: 'Markdown',
                    ...successKeyboard
                });
                
            } else {
                bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è');
            }
            
        } catch (dbError) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –ë–î:', dbError);
            bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', error);
        bot.answerCallbackQuery(msg.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ');
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—è
function getFieldDisplayName(fieldName) {
    const fieldNames = {
        'brand': '–ú–∞—Ä–∫–∞',
        'model': '–ú–æ–¥–µ–ª—å', 
        'generation': '–ü–æ–∫–æ–ª–µ–Ω–∏–µ',
        'year': '–ì–æ–¥',
        'reg_number': '–ù–æ–º–µ—Ä',
        'color': '–¶–≤–µ—Ç',
        'description': '–û–ø–∏—Å–∞–Ω–∏–µ'
    };
    return fieldNames[fieldName] || fieldName;
}

// =====================================================
// üéâ –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–±—ã—Ç–∏—è–º–∏
// =====================================================

async function showAllEvents(msg, userId) {
    try {
        const events = await db.getAllEvents();
        
        if (events.length === 0) {
            const noEventsKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚ûï –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ', callback_data: 'create_event' }],
                        [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —Å–æ–±—ã—Ç–∏—è–º', callback_data: 'events_menu' }]
                    ]
                }
            };
            
            bot.sendMessage(msg.chat.id, 
                'üìÖ –°–æ–±—ã—Ç–∏—è –∫–ª—É–±–∞\n\n' +
                'üéØ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.\n\n' +
                '‚ú® –°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º –∏ —Å–æ–∑–¥–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –∫–ª—É–±–∞!',
                { 
                    parse_mode: 'Markdown',
                    ...noEventsKeyboard 
                }
            );
            return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –æ–¥–Ω–æ–º—É
        for (let i = 0; i < Math.min(events.length, 5); i++) {
            const event = events[i];
            
            let eventText = `üéâ **${event.title}**\n\n`;
            eventText += `üìÖ –î–∞—Ç–∞: ${event.event_date}`;
            if (event.event_time) eventText += ` –≤ ${event.event_time.substring(0, 5)}`;
            eventText += `\nüìç –ú–µ—Å—Ç–æ: ${event.location}, ${event.city}`;
            eventText += `\nüéØ –¢–∏–ø: ${event.type}`;
            eventText += `\nüìä –°—Ç–∞—Ç—É—Å: ${event.status}`;
            
            if (event.first_name) {
                eventText += `\nüë§ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: ${event.first_name}`;
                if (event.last_name) eventText += ` ${event.last_name}`;
            }
            
            if (event.participants_count > 0) {
                eventText += `\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${event.participants_count}`;
                if (event.max_participants) eventText += `/${event.max_participants}`;
            }
            
            if (event.price > 0) {
                eventText += `\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${event.price}‚ÇΩ`;
            } else {
                eventText += `\nüÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–æ`;
            }
            
            if (event.description) {
                eventText += `\n\nüí≠ ${event.description}`;
            }
            
            const eventKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ', callback_data: `event_details_${event.id}` }]
                    ]
                }
            };
            
            await bot.sendMessage(msg.chat.id, eventText, {
                parse_mode: 'Markdown',
                ...eventKeyboard
            });
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            if (i < Math.min(events.length, 5) - 1) {
                await new Promise(resolve => setTimeout(resolve, 500));
            }
        }
        
        // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        const navigationKeyboard = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚ûï –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ', callback_data: 'create_event' }],
                    [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —Å–æ–±—ã—Ç–∏—è–º', callback_data: 'events_menu' }]
                ]
            }
        };
        
        const summaryText = events.length > 5 ? 
            `üìä –ü–æ–∫–∞–∑–∞–Ω–æ 5 –∏–∑ ${events.length} —Å–æ–±—ã—Ç–∏–π` : 
            `üìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: ${events.length}`;
        
        bot.sendMessage(msg.chat.id, summaryText, navigationKeyboard);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–æ–±—ã—Ç–∏–π:', error);
        bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π');
    }
}

async function showAllServices(msg, userId) {
    try {
        const services = await db.getAllServices();
        
        if (services.length === 0) {
            const noServicesKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å', callback_data: 'add_service' }],
                        [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —Å–µ—Ä–≤–∏—Å–∞–º', callback_data: 'services_menu' }]
                    ]
                }
            };
            
            bot.sendMessage(msg.chat.id, 
                'üîß –ö–∞—Ç–∞–ª–æ–≥ —Å–µ—Ä–≤–∏—Å–æ–≤\n\n' +
                'üè™ –í –∫–∞—Ç–∞–ª–æ–≥–µ –ø–æ–∫–∞ –Ω–µ—Ç –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–æ–≤.\n\n' +
                '‚ú® –ü–æ–º–æ–≥–∏—Ç–µ –∫–ª—É–±—É –∏ –¥–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å!',
                { 
                    parse_mode: 'Markdown',
                    ...noServicesKeyboard 
                }
            );
            return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –ø–æ –æ–¥–Ω–æ–º—É
        for (let i = 0; i < Math.min(services.length, 5); i++) {
            const service = services[i];
            
            let serviceText = `üè™ **${service.name}**\n\n`;
            serviceText += `üîß –¢–∏–ø: ${service.type}`;
            serviceText += `\nüèôÔ∏è –ì–æ—Ä–æ–¥: ${service.city}`;
            
            if (service.address) serviceText += `\nüìç –ê–¥—Ä–µ—Å: ${service.address}`;
            if (service.phone) serviceText += `\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: ${service.phone}`;
            if (service.website) serviceText += `\nüåê –°–∞–π—Ç: ${service.website}`;
            
            // –†–µ–π—Ç–∏–Ω–≥ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
            if (service.rating) {
                serviceText += `\n‚≠ê –†–µ–π—Ç–∏–Ω–≥: ${service.rating}/5.0`;
                if (service.reviews_count > 0) {
                    serviceText += ` (${service.reviews_count} –æ—Ç–∑—ã–≤–æ–≤)`;
                }
            }
            
            const recommendationEmoji = {
                '—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è': '‚úÖ',
                '–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è': '‚ùå',
                '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ': '‚ö™'
            };
            
            serviceText += `\n${recommendationEmoji[service.recommendation] || '‚ö™'} ${service.recommendation}`;
            
            if (service.price_range) {
                const priceEmoji = {
                    '–Ω–∏–∑–∫–∏–π': 'üíö',
                    '—Å—Ä–µ–¥–Ω–∏–π': 'üíõ', 
                    '–≤—ã—Å–æ–∫–∏–π': 'üî¥'
                };
                serviceText += `\nüí∞ –¶–µ–Ω—ã: ${priceEmoji[service.price_range]} ${service.price_range}`;
            }
            
            if (service.working_hours) {
                serviceText += `\nüïí –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: ${service.working_hours}`;
            }
            
            if (service.description) {
                serviceText += `\n\nüí≠ ${service.description}`;
            }
            
            const serviceKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ', callback_data: `service_details_${service.id}` }]
                    ]
                }
            };
            
            await bot.sendMessage(msg.chat.id, serviceText, {
                parse_mode: 'Markdown',
                ...serviceKeyboard
            });
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            if (i < Math.min(services.length, 5) - 1) {
                await new Promise(resolve => setTimeout(resolve, 500));
            }
        }
        
        // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        const navigationKeyboard = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å', callback_data: 'add_service' }],
                    [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —Å–µ—Ä–≤–∏—Å–∞–º', callback_data: 'services_menu' }]
                ]
            }
        };
        
        const summaryText = services.length > 5 ? 
            `üìä –ü–æ–∫–∞–∑–∞–Ω–æ 5 –∏–∑ ${services.length} —Å–µ—Ä–≤–∏—Å–æ–≤` : 
            `üìä –í—Å–µ–≥–æ —Å–µ—Ä–≤–∏—Å–æ–≤: ${services.length}`;
        
        bot.sendMessage(msg.chat.id, summaryText, navigationKeyboard);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–µ—Ä–≤–∏—Å–æ–≤:', error);
        bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤');
    }
}

async function startCreateEvent(msg, userId) {
    try {
        const member = await db.getMemberByTelegramId(userId);
        if (!member) {
            bot.sendMessage(msg.chat.id, '‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∫–ª—É–±–µ');
            return;
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
        userStates.set(userId, {
            state: 'creating_event',
            step: 'title',
            data: { organizer_id: member.id }
        });
        
        const keyboard = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'events_menu' }]
                ]
            }
        };
        
        bot.sendMessage(msg.chat.id, 
            'üéâ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è\n\n' +
            'üìù –®–∞–≥ 1 –∏–∑ 6: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è\n\n' +
            '–ü—Ä–∏–¥—É–º–∞–π—Ç–µ —è—Ä–∫–æ–µ –∏ –ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n\n' +
            'üí° –ü—Ä–∏–º–µ—Ä—ã: "–í–µ—Å–µ–Ω–Ω–∏–π –∑–∞–µ–∑–¥ –≤ –ü–æ–¥–º–æ—Å–∫–æ–≤—å–µ", "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –≤—Å—Ç—Ä–µ—á–∞", "–§–æ—Ç–æ—Å–µ—Å—Å–∏—è –≤ —Ü–µ–Ω—Ç—Ä–µ"',
            { 
                parse_mode: 'Markdown',
                ...keyboard 
            }
        );
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
        bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è');
    }
}

async function startAddService(msg, userId) {
    try {
        const member = await db.getMemberByTelegramId(userId);
        if (!member) {
            bot.sendMessage(msg.chat.id, '‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∫–ª—É–±–µ');
            return;
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
        userStates.set(userId, {
            state: 'adding_service',
            step: 'name',
            data: { added_by_member_id: member.id }
        });
        
        const keyboard = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'services_menu' }]
                ]
            }
        };
        
        bot.sendMessage(msg.chat.id, 
            'üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞\n\n' +
            'üìù –®–∞–≥ 1 –∏–∑ 5: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞\n\n' +
            '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–∞—Ç–∞–ª–æ–≥:\n\n' +
            'üí° –ü—Ä–∏–º–µ—Ä—ã: "–ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å –ö–∞–±—Ä–∏–æ –¶–µ–Ω—Ç—Ä", "–î–µ—Ç–µ–π–ª–∏–Ω–≥ –ë–ª–µ—Å–∫", "–°–¢–û –ì–∞—Ä–∞–∂ 77"',
            { 
                parse_mode: 'Markdown',
                ...keyboard 
            }
        );
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞:', error);
        bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
async function initBot() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if (!config.BOT_TOKEN) {
            console.error('‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!');
            process.exit(1);
        }
        
        if (!config.CHAT_ID) {
            console.error('‚ùå CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!');
            console.log('üìã –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å CHAT_ID:');
            console.log('1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É');
            console.log('2. –ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ');
            console.log(`3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ: https://api.telegram.org/bot${config.BOT_TOKEN}/getUpdates`);
            console.log('4. –ù–∞–π–¥–∏—Ç–µ "chat":{"id":-1001234567890} –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —á–∏—Å–ª–æ –≤ .env');
            process.exit(1);
        }
        
        createUploadDirs();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
        const commands = [
            { command: 'start', description: 'üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ' },
            { command: 'menu', description: 'üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏' },
            { command: 'register', description: 'üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –∫–ª—É–±–µ' },
            { command: 'profile', description: 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å' },
            { command: 'cars', description: 'üöó –ú–æ–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏' },
            { command: 'addcar', description: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å' },
            { command: 'invite', description: 'üéØ –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ' },
            { command: 'myinvites', description: 'üìÆ –ú–æ–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è' },
            { command: 'search', description: 'üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É' },
            { command: 'stats', description: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª—É–±–∞' },
            { command: 'status', description: 'üîß –°–∏—Å—Ç–µ–º–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (–∞–¥–º–∏–Ω—ã)' },
            { command: 'admintest', description: 'üîê –¢–µ—Å—Ç –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤ (–∞–¥–º–∏–Ω—ã)' },
            { command: 'authlogs', description: 'üìä –õ–æ–≥–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–∞–π—Ç–∞ (–∞–¥–º–∏–Ω—ã)' },

            { command: 'setuserstatus', description: 'üîß –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω—ã)' },
            { command: 'setpass', description: 'üîê –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ (–∞–¥–º–∏–Ω—ã)' },
            { command: 'cancel', description: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é' },
            { command: 'help', description: '‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º' }
        ];
        
        await bot.setMyCommands(commands);
        console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
        
        console.log('ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
        console.log(`üì± –ò–º—è –±–æ—Ç–∞: ${(await bot.getMe()).first_name}`);
        console.log(`üÜî Chat ID –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ${config.CHAT_ID}`);
        console.log(`üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${config.DATABASE.host}/${config.DATABASE.database}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ
        try {
            const botMember = await bot.getChatMember(config.CHAT_ID, (await bot.getMe()).id);
            console.log(`üîê –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ: ${botMember.status}`);
            
            if (botMember.status === 'administrator') {
                console.log('‚úÖ –ë–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã');
            } else if (botMember.status === 'member') {
                console.log('‚ö†Ô∏è –ë–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –≤ –ø—Ä–∞–≤–∞—Ö)');
            } else {
                console.log('‚ùå –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ:', error.message);
        }
        
        // –ó–∞–ø—É—Å–∫ –≤–µ–± API
        const apiApp = createAPI();
        const PORT = 3001;
        apiApp.listen(PORT, () => {
            console.log(`üåê –í–µ–± API –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
            console.log(`üìä –î–∞—à–±–æ—Ä–¥ –¥–æ—Å—Ç—É–ø–µ–Ω: http://localhost:${PORT}`);
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', error);
        process.exit(1);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error);
});

// Graceful shutdown
process.on('SIGINT', async () => {
    console.log('\nüîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...');
    await db.close();
    process.exit(0);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
initBot(); 
