/**
 * üîß –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –±–æ—Ç–∞
 */

const fs = require('fs');
const path = require('path');

class OptionsManager {
    constructor() {
        this.optionsFile = path.join(__dirname, '../../options.json');
        this.options = null;
        this.lastModified = null;
        this.loadOptions();
    }

    /**
     * üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞
     */
    loadOptions() {
        try {
            if (fs.existsSync(this.optionsFile)) {
                const data = fs.readFileSync(this.optionsFile, 'utf8');
                this.options = JSON.parse(data);
                
                // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
                const stats = fs.statSync(this.optionsFile);
                this.lastModified = stats.mtime;
                
                console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ options.json');
            } else {
                console.log('‚ö†Ô∏è –§–∞–π–ª options.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
                this.createDefaultOptions();
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error.message);
            this.createDefaultOptions();
        }
    }

    /**
     * üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞
     */
    checkForUpdates() {
        if (!this.options || !this.options.settings.auto_reload) {
            return false;
        }

        try {
            if (fs.existsSync(this.optionsFile)) {
                const stats = fs.statSync(this.optionsFile);
                if (stats.mtime > this.lastModified) {
                    console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ options.json, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º...');
                    this.loadOptions();
                    return true;
                }
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error.message);
        }
        return false;
    }

    /**
     * üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     */
    createDefaultOptions() {
        this.options = {
            notifications: {
                new_member: { enabled: 1, description: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –∫–ª—É–±–∞" },
                new_invitation: { enabled: 1, description: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è—Ö" },
                new_car: { enabled: 1, description: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π" },
                member_left: { enabled: 1, description: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã—Ö–æ–¥–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤" },
                system_messages: { enabled: 1, description: "–°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è" }
            },
            settings: {
                auto_reload: 1,
                description: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"
            },
            version: "1.0",
            last_updated: new Date().toISOString().split('T')[0]
        };
    }

    /**
     * ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤–∫–ª—é—á–µ–Ω –ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     * @param {string} notificationType - –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @returns {boolean}
     */
    isNotificationEnabled(notificationType) {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ
        this.checkForUpdates();

        if (!this.options || !this.options.notifications) {
            return true; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω–æ
        }

        const notification = this.options.notifications[notificationType];
        if (!notification) {
            console.log(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${notificationType}`);
            return true; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω–æ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤
        }

        const enabled = notification.enabled === 1;
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è "${notificationType}": ${enabled ? '‚úÖ –≤–∫–ª—é—á–µ–Ω–æ' : '‚ùå –≤—ã–∫–ª—é—á–µ–Ω–æ'}`);
        return enabled;
    }

    /**
     * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    getAllOptions() {
        this.checkForUpdates();
        return this.options;
    }

    /**
     * üìù –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
     */
    getNotificationDescription(notificationType) {
        if (!this.options || !this.options.notifications || !this.options.notifications[notificationType]) {
            return '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ';
        }
        return this.options.notifications[notificationType].description;
    }

    /**
     * üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    getNotificationStatus() {
        this.checkForUpdates();
        
        if (!this.options || !this.options.notifications) {
            return '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã';
        }

        let status = 'üîß –°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n\n';
        
        Object.keys(this.options.notifications).forEach(key => {
            const notification = this.options.notifications[key];
            const icon = notification.enabled === 1 ? '‚úÖ' : '‚ùå';
            status += `${icon} ${notification.description}\n`;
        });

        status += `\nüìÅ –§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫: options.json`;
        status += `\nüîÑ –ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞: ${this.options.settings.auto_reload === 1 ? '‚úÖ' : '‚ùå'}`;

        return status;
    }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const optionsManager = new OptionsManager();

module.exports = optionsManager; 